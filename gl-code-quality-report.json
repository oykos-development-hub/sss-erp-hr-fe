[{"filePath":"/builds/erp/hr-ms-client/setupProxy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/JobTenderApplicationModal/JobTenderApplicationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2909,2912],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2909,2912],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2925,2928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2925,2928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3910,3913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3910,3913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5591,5594],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5591,5594],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":173,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5688,5691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5688,5691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'citizenship' is assigned a value but never used.","line":185,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":185,"endColumn":73},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8250,8253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8250,8253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":308,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":308,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9916,9919],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9916,9919],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":365,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":365,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12107,12110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12107,12110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":386,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":386,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12881,12884],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12881,12884],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":420,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":420,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14114,14117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14114,14117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Datepicker, Dropdown, Input, Modal, Typography} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {\n  applicationStatusOptions,\n  applicationTypeOptions,\n  evaluationTypeOptions,\n} from '../../screens/jobTenders/constants';\nimport useJobTenderApplicationsInsert from '../../services/graphql/jobTenders/useJobTenderApplicationInsert';\nimport useBasicInfoGet from '../../services/graphql/userProfile/basicInfo/useBasicInfoGet';\nimport useUserProfiles from '../../services/graphql/userProfile/useUserProfiles';\nimport {DropdownDataString} from '../../types/dropdownData';\nimport {JobTender, JobTenderApplication, JobTenderApplicationInsertParams} from '../../types/graphql/jobTenders';\nimport {MicroserviceProps} from '../../types/micro-service-props';\nimport {ScreenProps} from '../../types/screen-props';\nimport {parseDateForBackend, parseToDate} from '../../utils/dateUtils';\nimport {\n  ConfirmModalContent,\n  ModalContentWrapper,\n  Row,\n  RowFullWidth,\n  TriangleIcon,\n} from '../JobTenderApplicationModal/styles';\n\nconst tenderApplicationSchema = yup.object().shape({\n  type: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string().required(), title: yup.string().required()})\n    .required('Ovo polje je obavezno'),\n  status: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string().required(), title: yup.string().required()})\n    .required('Ovo polje je obavezno'),\n  date_of_application: yup.date().required('Ovo polje je obavezno').nullable(),\n  first_name: yup.string().required('Ovo polje je obavezno'),\n  last_name: yup.string().required('Ovo polje je obavezno'),\n  official_personal_id: yup.string().required('Ovo polje je obavezno'),\n  date_of_birth: yup\n    .date()\n    .required('Ovo polje je obavezno')\n    .test('more than 18 year old', 'Kandidat mora biti punoljetan', value => {\n      if (!value) return false;\n      const today = new Date();\n      const birthDate = new Date(value);\n      const age = today.getFullYear() - birthDate.getFullYear();\n      return age >= 18;\n    }),\n  citizenship: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string(), title: yup.string()})\n    .required('Ovo polje je obavezno'),\n  user_profile: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.number(), title: yup.string()})\n    .when('type', {\n      is: (value: DropdownDataString) => value && value.id === 'internal',\n      then: schema => schema.required('Ovo polje je obavezno'),\n      otherwise: schema => schema.optional(),\n    }),\n  evaluation: yup.object(),\n});\n\nexport interface JobTenderApplicationModalModalProps extends ScreenProps {\n  selectedItem?: JobTenderApplication;\n  open: boolean;\n  onClose: () => void;\n  refetchList: () => void;\n  countries?: any[];\n  alert: any;\n  context: MicroserviceProps;\n  jobTender?: JobTender;\n  applicationIds: number[];\n}\n\nexport const JobTenderApplicationModal: React.FC<JobTenderApplicationModalModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  refetchList,\n  countries,\n  context,\n  jobTender,\n  applicationIds,\n}) => {\n  const [selectedUserId, setSelectedIdUser] = useState<number>(0);\n  const [confirmationModal, setConfirmationModal] = useState<boolean>(false);\n\n  const {data: userData} = useBasicInfoGet(selectedUserId);\n\n  const {userProfiles} = useUserProfiles({\n    page: 1,\n    size: 1000,\n  });\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n    watch,\n    setValue,\n  } = useForm({\n    defaultValues: {type: {id: 'internal', title: 'Interni'}},\n    resolver: yupResolver(tenderApplicationSchema),\n  });\n\n  const {status, type, user_profile} = watch();\n\n  const {mutate, loading: isSaving} = useJobTenderApplicationsInsert();\n\n  const onSubmit = (values: any) => {\n    if (isSaving) return;\n\n    const data: JobTenderApplicationInsertParams = {\n      type: values.type.id,\n      date_of_application: parseDateForBackend(values?.date_of_application) ?? '',\n      status: values?.status?.title,\n      job_tender_id: jobTender?.id ?? 0,\n      active: true,\n    };\n\n    if (values?.id) data.id = values?.id;\n    if (data.type === 'external') {\n      // data.evaluation = values?.evaluation?.id;\n      data.first_name = values.first_name;\n      data.last_name = values.last_name;\n      data.citizenship = values?.citizenship?.id;\n      data.date_of_birth = parseDateForBackend(values?.date_of_birth) ?? '';\n      data.official_personal_id = values?.official_personal_id;\n    } else {\n      data.user_profile_id = values?.user_profile?.id;\n    }\n\n    try {\n      if (data.status === 'Izabran' && data.type === 'external') {\n        navigateToUserCreation(data);\n      } else {\n        mutate(\n          data,\n          () => {\n            context.alert.success('Uspješno sačuvano.');\n            refetchList();\n            onClose();\n            reset();\n          },\n          () => {\n            context.alert.error('Greška. Promjene nisu sačuvane.');\n            onClose();\n            reset();\n          },\n        );\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const userOptions = useMemo(() => {\n    let availableEmployees = userProfiles\n      ?.filter(item => !applicationIds.includes(item.id))\n      .map(item => ({...item, title: `${item.first_name} ${item.last_name}`}));\n\n    if (jobTender?.type?.title !== 'Javni oglas za izbor kandidata za sudije') {\n      availableEmployees = availableEmployees.filter((item: any) => item.is_judge);\n    } else {\n      availableEmployees = availableEmployees.filter((item: any) => !item.is_judge);\n    }\n\n    return availableEmployees || [];\n  }, [userProfiles, applicationIds, jobTender]);\n\n  const toggleConfirmModal = () => {\n    setConfirmationModal(prev => !prev);\n  };\n\n  const nationality = watch('citizenship');\n  const navigateToUserCreation = (applicantData: JobTenderApplicationInsertParams) => {\n    const {first_name, last_name, date_of_birth, evaluation, citizenship, official_personal_id} = watch();\n\n    context.navigation.navigate('/hr/employees/add-new', {\n      state: {\n        user: {\n          first_name,\n          last_name,\n          date_of_birth,\n          evaluation,\n          nationality,\n          official_personal_id,\n          is_judge: true,\n          is_president: type?.title === 'Javni oglas za predsjednika suda',\n          organization_unit_id: jobTender?.organization_unit?.id,\n        },\n        application: applicantData,\n      },\n    });\n  };\n\n  // Choosing an internal user to populate the corresponding fields.\n  useEffect(() => {\n    if (userData) {\n      reset({\n        ...watch(),\n        first_name: userData.first_name,\n        last_name: userData.last_name,\n        official_personal_id: userData.official_personal_id,\n        date_of_birth: parseToDate(userData.date_of_birth) ?? undefined,\n        citizenship: countryOptions?.find(c => c.id === userData.citizenship) || undefined,\n        user_profile: {id: userData.id, title: `${userData.first_name} ${userData.last_name}`},\n      });\n    }\n  }, [userData]);\n\n  useEffect(() => {\n    if (selectedItem) {\n      reset({\n        ...selectedItem,\n        date_of_application: parseToDate(selectedItem?.date_of_application),\n        date_of_birth: parseToDate(selectedItem?.date_of_birth) ?? undefined,\n        status: selectedItem?.status\n          ? applicationStatusOptions.find(st => st.title === selectedItem?.status)\n          : undefined,\n        type: selectedItem?.type ? applicationTypeOptions.find(st => st.id === selectedItem?.type) : undefined,\n        evaluation: selectedItem?.evaluation\n          ? evaluationTypeOptions.find(st => st.id === selectedItem?.evaluation)\n          : undefined,\n        citizenship: selectedItem?.citizenship\n          ? countryOptions?.find(st => st.id === selectedItem.citizenship)\n          : undefined,\n      });\n    }\n  }, [selectedItem]);\n\n  useEffect(() => {\n    if (status?.id === 'accepted' && type?.id === 'external') {\n      setConfirmationModal(true);\n    }\n  }, [status]);\n\n  useEffect(() => {\n    if (type?.id === 'external') {\n      setValue('user_profile', undefined as any);\n      setSelectedIdUser(0);\n    }\n  }, [type]);\n\n  useEffect(() => {\n    if (user_profile) {\n      const item = userOptions.find(user => user.id === user_profile.id);\n\n      if (item) {\n        setSelectedIdUser(item.id);\n      }\n    }\n  }, [user_profile]);\n\n  const countryOptions = useMemo(() => {\n    return countries?.map(country => {\n      return {\n        id: country.alpha3,\n        title: country.name,\n      };\n    });\n  }, [countries]);\n\n  return (\n    <>\n      <Modal\n        open={open}\n        onClose={onClose}\n        leftButtonText=\"Otkaži\"\n        rightButtonText=\"Sačuvaj\"\n        rightButtonOnClick={handleSubmit(onSubmit)}\n        buttonLoading={isSaving}\n        content={\n          <ModalContentWrapper>\n            <Row>\n              <Controller\n                name=\"type\"\n                control={control}\n                render={({field: {name, value, onChange}}) => (\n                  <Dropdown\n                    label=\"TIP KANDIDATA:\"\n                    name={name}\n                    options={applicationTypeOptions}\n                    value={value}\n                    onChange={onChange}\n                    error={errors.type?.message}\n                    isDisabled={!!selectedItem?.id}\n                  />\n                )}\n              />\n              <Controller\n                name=\"user_profile\"\n                control={control}\n                render={({field: {name, value, onChange}}) => (\n                  <Dropdown\n                    label=\"PRETRAGA:\"\n                    name={name}\n                    options={userOptions}\n                    isSearchable={true}\n                    value={value as any}\n                    onChange={onChange}\n                    isDisabled={!!selectedItem?.id || type?.id === 'external'}\n                    error={errors.user_profile?.message}\n                    placeholder=\"Unesite ime\"\n                  />\n                )}\n              />\n            </Row>\n            <Row>\n              <Input\n                {...register('first_name', {required: 'Ovo polje je obavezno'})}\n                label=\"IME:\"\n                disabled={type?.id === 'internal'}\n                error={errors.first_name?.message as string}\n              />\n\n              <Input\n                {...register('last_name', {required: 'Ovo polje je obavezno'})}\n                label=\"PREZIME:\"\n                disabled={type?.id === 'internal'}\n                error={errors.last_name?.message as string}\n              />\n            </Row>\n            <Row>\n              <Input\n                {...register('official_personal_id', {required: 'Ovo polje je obavezno'})}\n                label=\"BROJ LIČNE KARTE:\"\n                error={errors.official_personal_id?.message as string}\n                disabled={type?.id === 'internal'}\n              />\n\n              <Controller\n                name=\"date_of_birth\"\n                control={control}\n                rules={{required: 'Ovo polje je obavezno'}}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    onChange={onChange}\n                    label=\"DATUM ROĐENJA:\"\n                    name={name}\n                    selected={value}\n                    error={errors.date_of_birth?.message as string}\n                    disabled={type?.id === 'internal'}\n                  />\n                )}\n              />\n            </Row>\n            <RowFullWidth>\n              <Controller\n                name=\"citizenship\"\n                rules={type?.id !== 'internal' ? {required: 'Ovo polje je obavezno'} : {}}\n                control={control}\n                render={({field: {onChange, name, value}}) => {\n                  return (\n                    <Dropdown\n                      onChange={onChange}\n                      value={value as any}\n                      name={name}\n                      style={{width: '100%'}}\n                      label=\"NACIONALNOST:\"\n                      options={countryOptions || []}\n                      error={errors.citizenship?.message as string}\n                      isDisabled={type?.id === 'internal'}\n                      isSearchable\n                    />\n                  );\n                }}\n              />\n            </RowFullWidth>\n            <RowFullWidth>\n              <Controller\n                name=\"evaluation\"\n                control={control}\n                render={({field: {onChange, name, value}}) => {\n                  return (\n                    <Dropdown\n                      onChange={onChange}\n                      value={value as any}\n                      name={name}\n                      style={{width: '100%'}}\n                      label=\"OCJENA:\"\n                      options={evaluationTypeOptions || []}\n                      isDisabled\n                    />\n                  );\n                }}\n              />\n            </RowFullWidth>\n            <Row>\n              <Controller\n                name=\"date_of_application\"\n                control={control}\n                rules={{required: 'Ovo polje je obavezno'}}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    onChange={onChange}\n                    label=\"DATUM PRIJAVE:\"\n                    name={name}\n                    selected={value}\n                    error={errors.date_of_application?.message as string}\n                  />\n                )}\n              />\n              <Controller\n                name=\"status\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => {\n                  return (\n                    <Dropdown\n                      onChange={onChange}\n                      value={value as any}\n                      name={name}\n                      label=\"STATUS:\"\n                      options={applicationStatusOptions || []}\n                      error={errors.status?.message as string}\n                      placeholder=\"Odaberite status\"\n                    />\n                  );\n                }}\n              />\n            </Row>\n          </ModalContentWrapper>\n        }\n        title={'DODAJTE NOVOG KANDIDATA'}\n      />\n      <Modal\n        open={confirmationModal}\n        onClose={toggleConfirmModal}\n        width={450}\n        leftButtonText=\"Otkaži\"\n        rightButtonText=\"Nastavi\"\n        leftButtonOnClick={toggleConfirmModal}\n        rightButtonOnClick={handleSubmit(onSubmit)}\n        content={\n          <ConfirmModalContent>\n            <TriangleIcon />\n            <Typography\n              content=\"Da li želite kreirati korisnički profil za ovog kandidata?\"\n              variant=\"bodyLarge\"\n              style={{fontWeight: 600}}\n            />\n            <Typography\n              content={'Ukoliko odaberete opciju nastavi, bićete upućeni na stranicu za dodavanje novog zaposlenog.'}\n              variant=\"bodySmall\"\n              style={{textAlign: 'center'}}\n            />\n          </ConfirmModalContent>\n        }\n      />\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/JobTenderApplicationModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/absentsModal/absentsModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1604,1607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1604,1607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2080,2083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2080,2083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3730,3733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3730,3733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4491,4494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4491,4494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5098,5101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5098,5101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":179,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5964,5967],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5964,5967],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Datepicker, Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport React, {useEffect, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {AbsenceTypeModalProps} from '../../screens/employees/absents/types';\nimport useGetOrganizationUnits from '../../services/graphql/organizationUnits/useGetOrganizationUnits';\nimport useInsertAbsence from '../../services/graphql/userProfile/absents/useInsertAbsence';\nimport {AbsenceParams, AbsenceType} from '../../types/graphql/absents';\nimport {parseDateForBackend, parseToDate} from '../../utils/dateUtils';\nimport {dropdownOptions} from './constants';\nimport {FileUploadWrapper, FormGroup, ModalContentWrapper, UploadedFileContainer, UploadedFileWrapper} from './styles';\n\nconst initialValues: AbsenceParams = {\n  id: null,\n  user_profile_id: 0,\n  absent_type_id: null,\n  target_organization_unit_id: null,\n  date_of_start: null,\n  date_of_end: null,\n  description: '',\n  file_id: null,\n};\n\nexport const AbsentModal: React.FC<AbsenceTypeModalProps> = ({\n  selectedItem,\n  absenceTypes,\n  open,\n  onClose,\n  userProfileId,\n  alert,\n}) => {\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  const [absenceChildTypes, setAbsenceChildTypes] = useState<AbsenceType[]>([]);\n  const [isVacation, setIsVacation] = useState<boolean | null>(null);\n  const [selectedAbsenceTypeId, setSelectedAbsenceTypeId] = useState(null);\n\n  const handleUpload = (files: FileList) => {\n    const fileList = Array.from(files);\n    setUploadedFiles(fileList);\n  };\n\n  const handleTypeChange = (selectedValue: any) => {\n    if (selectedValue.id === 1) {\n      setIsVacation(true);\n      setAbsenceChildTypes([...absenceTypes.filter(item => item.accounting_days_off)]);\n    } else {\n      setIsVacation(false);\n      setAbsenceChildTypes([...absenceTypes.filter(item => !item.accounting_days_off)]);\n    }\n  };\n\n  const {organizationUnits} = useGetOrganizationUnits(undefined, {allOption: true});\n\n  const {mutate, loading: isSaving} = useInsertAbsence();\n\n  const handleSave = (values: any) => {\n    if (isSaving) return;\n    const payload = {\n      id: values?.id || 0,\n      user_profile_id: userProfileId,\n      date_of_start: parseDateForBackend(values?.date_of_start),\n      date_of_end: parseDateForBackend(values?.date_of_end),\n      absent_type_id: isVacation ? absenceChildTypes[0]?.id : values?.absent_type?.id,\n      description: values?.description,\n      target_organization_unit_id: values?.target_organization_unit?.id || null,\n      file_id: values?.file_id || null,\n    };\n\n    mutate(\n      payload,\n      () => {\n        onClose(true);\n        alert.success('Uspješno sačuvano.');\n        reset(initialValues);\n      },\n      () => {\n        alert.error('Greška. Promjene nisu sačuvane.');\n      },\n    );\n  };\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm<AbsenceParams>({defaultValues: initialValues});\n\n  useEffect(() => {\n    if (selectedItem) {\n      reset({\n        ...selectedItem,\n        date_of_end: parseToDate(selectedItem.date_of_end),\n        date_of_start: parseToDate(selectedItem?.date_of_start),\n      });\n      if (selectedItem.id !== 0) {\n        if (selectedItem?.absent_type.accounting_days_off) {\n          setAbsenceChildTypes([...absenceTypes.filter(item => item.accounting_days_off)]);\n          setIsVacation(true);\n        } else {\n          setAbsenceChildTypes([...absenceTypes.filter(item => !item.accounting_days_off)]);\n          handleAbsenceTypeChange(selectedItem?.absent_type.title);\n          setIsVacation(false);\n        }\n      }\n    }\n  }, [selectedItem, reset]);\n\n  const handleAbsenceTypeChange = (selectedValue: any) => {\n    setSelectedAbsenceTypeId(selectedValue);\n  };\n\n  const VacationValue = () => {\n    if (isVacation) {\n      return dropdownOptions[1];\n    } else if (isVacation === false) {\n      return dropdownOptions[2];\n    } else {\n      return dropdownOptions[0];\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset(initialValues);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(handleSave)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <FormGroup>\n            <Dropdown\n              label=\"VRSTA ZAHTJEVA:\"\n              options={dropdownOptions.slice(1)}\n              value={VacationValue() as any}\n              onChange={handleTypeChange}\n              placeholder=\"Birajte vrstu\"\n              name=\"vacation\"\n            />\n          </FormGroup>\n          {!isVacation && (\n            <FormGroup>\n              <Controller\n                name=\"absent_type\"\n                control={control}\n                rules={{required: 'Ovo polje je obavezno'}}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    label=\"VRSTA:\"\n                    name={name}\n                    options={absenceChildTypes}\n                    value={value as any}\n                    onChange={selectedValue => {\n                      handleAbsenceTypeChange(selectedValue.title);\n                      onChange(selectedValue);\n                    }}\n                    error={errors.absent_type?.message}\n                    placeholder=\"Birajte vrstu\"\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n          {!isVacation && selectedAbsenceTypeId === 'Upućivanje u drugi državni organ' && (\n            <FormGroup>\n              <Controller\n                name=\"target_organization_unit\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    label=\"DRŽAVNI ORGAN:\"\n                    name={name}\n                    options={organizationUnits}\n                    value={value as any}\n                    onChange={onChange}\n                    error={errors.target_organization_unit?.message}\n                    placeholder=\"Birajte državni organ\"\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n          <FormGroup>\n            <Controller\n              name=\"date_of_start\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"POČETAK TRAJANJA:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_start?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Controller\n              name=\"date_of_end\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"KRAJ TRAJANJA (Uključujuci taj dan):\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_end?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Input {...register('description')} label=\"OPIS:\" placeholder=\"Unesite opis...\" textarea />\n          </FormGroup>\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={handleUpload}\n              note={<Typography variant=\"bodySmall\" content=\"Validacija\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n          {uploadedFiles.length > 0 && (\n            <UploadedFileWrapper>\n              {uploadedFiles.map((file, index) => (\n                <UploadedFileContainer key={index}>\n                  <Typography variant=\"bodySmall\" content={file.name} />\n                </UploadedFileContainer>\n              ))}\n            </UploadedFileWrapper>\n          )}\n        </ModalContentWrapper>\n      }\n      title={'ZAHTJEVI'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/absentsModal/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/absentsModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/confirmationsModal/confirmationsModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Form' is defined but never used.","line":4,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2144,2147],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2144,2147],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4082,4085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4082,4085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4630,4633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4630,4633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Datepicker, Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Controller, Form, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {ConfirmationsModalProps} from '../../screens/employees/confirmations/types';\nimport useResolutionInsert from '../../services/graphql/userProfile/resolution/useResolutionInsert';\nimport {DropdownDataNumber} from '../../types/dropdownData';\nimport {parseDateForBackend, parseToDate} from '../../utils/dateUtils';\nimport {FileUploadWrapper, FormGroup, ModalContentWrapper, UploadedFileContainer, UploadedFileWrapper} from './styles';\nimport useSettingsDropdownOverview from '../../services/graphql/settingsDropdown/useSettingsDropdownOverview';\nimport {resolutionTypes} from '../education/modals/constants';\nimport {yesOrNoOptionsString} from '../../constants';\n\nconst confirmationSchema = yup.object().shape({\n  resolution_purpose: yup.string(),\n  date_of_start: yup.date().required('Ovo polje je obavezno'),\n  resolution_type: yup.object().required('Ovo polje je obavezno'),\n  is_affect: yup.object().default(undefined).shape({id: yup.string(), title: yup.string()}),\n});\n\nexport const ConfirmationsModal: React.FC<ConfirmationsModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  userProfileId,\n  alert,\n}) => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({\n    resolver: yupResolver(confirmationSchema),\n  });\n\n  const {data: types} = useSettingsDropdownOverview({entity: resolutionTypes.resolution_types});\n\n  const resolutionTypesOptions = useMemo(() => {\n    return types?.slice(1, 3).filter(type => ({id: type?.id as number, title: type?.title} || []));\n  }, [types]);\n\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n\n  const handleUpload = (files: FileList) => {\n    const fileList = Array.from(files);\n    setUploadedFiles(fileList);\n  };\n\n  const {mutate: saveUserProfileResolution, loading: isSaving} = useResolutionInsert();\n\n  const handleSave = (value: any) => {\n    if (isSaving) return;\n\n    const payload = {\n      ...value,\n      id: value?.id || 0,\n      user_profile_id: Number(userProfileId),\n      date_of_start: parseDateForBackend(value?.date_of_start),\n      date_of_end: null,\n      file_id: value?.file_id || 0,\n      resolution_purpose: value?.resolution_purpose || '',\n      resolution_type_id: value?.resolution_type.id || null,\n      is_affect: value?.is_affect?.id === 'Da' ? true : false,\n    };\n\n    delete payload.created_at;\n    delete payload.updated_at;\n    delete payload.resolution_type;\n    delete payload.user_profile;\n\n    saveUserProfileResolution(\n      payload,\n      () => {\n        onClose(true);\n        alert.success('Uspješno sačuvano.');\n      },\n      () => {\n        onClose(true);\n        alert.error('Greška. Promjene nisu sačuvane.');\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (selectedItem) {\n      reset({\n        ...selectedItem,\n        date_of_end: parseToDate(selectedItem?.date_of_end),\n        date_of_start: parseToDate(selectedItem?.date_of_start),\n        is_affect: {id: selectedItem?.is_affect ? 'Da' : 'Ne', title: selectedItem?.is_affect ? 'Da' : 'Ne'},\n      });\n    }\n  }, [selectedItem]);\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        reset();\n        onClose();\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(handleSave)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <FormGroup>\n            {resolutionTypesOptions && (\n              <Controller\n                name=\"resolution_type\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    label=\"VRSTA:\"\n                    name={name}\n                    options={resolutionTypesOptions as DropdownDataNumber[]}\n                    value={value as any}\n                    onChange={onChange}\n                    error={errors.resolution_type?.message}\n                    placeholder=\"Birajte vrstu\"\n                  />\n                )}\n              />\n            )}\n          </FormGroup>\n          <FormGroup>\n            <Controller\n              name=\"is_affect\"\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"PRAVOSNAŽNOST:\"\n                    options={yesOrNoOptionsString}\n                    error={errors.is_affect?.message}\n                    placeholder=\"Izaberite pravosnažnost:\"\n                  />\n                );\n              }}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Controller\n              name=\"date_of_start\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"DATUM RJEŠENJA/POTVRDE:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_start?.message}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Input {...register('resolution_purpose')} label=\"SVRHA:\" placeholder=\"Unesite opis...\" textarea />\n          </FormGroup>\n\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={handleUpload}\n              note={<Typography variant=\"bodySmall\" content=\"Validacija\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n\n          {!!uploadedFiles.length && (\n            <UploadedFileWrapper>\n              {uploadedFiles.map((file, index) => (\n                <UploadedFileContainer key={index}>\n                  <Typography variant=\"bodySmall\" content={file.name} />\n                </UploadedFileContainer>\n              ))}\n            </UploadedFileWrapper>\n          )}\n        </ModalContentWrapper>\n      }\n      title={'SVRHA POTVRDE I RJEŠENJA'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/confirmationsModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/contractEndModal/contractEndModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[380,383],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[380,383],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Modal} from 'client-library';\nimport React from 'react';\nimport {ContractEndModalContent, CustomText, TriangleIcon} from './styles';\nimport useTerminateEmployment from '../../services/graphql/terminateEmployment/useTerminateEmployment';\nimport {MicroserviceProps} from '../../types/micro-service-props';\n\ninterface ContractEndProps {\n  open: boolean;\n  onClose: (action?: any) => void;\n  profileId: number;\n  context: MicroserviceProps;\n}\nexport const ContractEndModal: React.FC<ContractEndProps> = ({open, onClose, profileId, context}) => {\n  const {refetch} = useTerminateEmployment(profileId);\n\n  const handleTerminateEmployment = () => {\n    refetch();\n    onClose(true);\n    context.navigation.navigate(`/hr/employees/details/${profileId}/experience`);\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose(true);\n      }}\n      width={450}\n      leftButtonText=\"Prekini radni odnos\"\n      rightButtonText=\"Odustani\"\n      leftButtonOnClick={() => handleTerminateEmployment()}\n      rightButtonOnClick={onClose}\n      content={\n        <ContractEndModalContent>\n          <TriangleIcon />\n          <CustomText content=\"Da li ste sigurni da želite prekinuti radni odnos zaposlenom?\" variant=\"bodyLarge\" />\n        </ContractEndModalContent>\n      }\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/contractEndModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/academicEducationModal.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":26,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":26,"endColumn":13,"fix":{"range":[1147,1159],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":27,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":27,"endColumn":13,"fix":{"range":[1176,1188],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":28,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":28,"endColumn":11,"fix":{"range":[1275,1285],"text":"        "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3452,3455],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3452,3455],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4076,4079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4076,4079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4572,4575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4572,4575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import {Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {ModalProps} from '../../../screens/employees/education/types';\nimport useSettingsDropdownOverview from '../../../services/graphql/settingsDropdown/useSettingsDropdownOverview';\nimport useEducationInsert from '../../../services/graphql/userProfile/education/useEducationInsert';\nimport {UserProfileEducationFormValues} from '../../../types/graphql/userProfileGetEducation';\nimport {academicTitles, educationTypes, initialValues} from './constants';\nimport {FileUploadWrapper, FormGroup, ModalContentWrapper} from './styles';\n\nexport const AcademicEducationModal: React.FC<ModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  alert,\n  refetchList,\n  navigation,\n}) => {\n  const {data: types} = useSettingsDropdownOverview({entity: educationTypes.education_academic_types});\n  const typesOptions = useMemo(() => types?.map(type => ({id: type.id as number, title: type.title})) || [], [types]);\n\n  const item = useMemo(\n    () =>\n      selectedItem\n        ? {\n            ...selectedItem,\n            academic_title: {id: selectedItem.academic_title, title: selectedItem.academic_title},\n          }\n        : initialValues,\n    [selectedItem],\n  );\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: selectedItem});\n\n  const {mutate, loading: isSaving} = useEducationInsert();\n\n  useEffect(() => {\n    item && reset(item);\n  }, [item]);\n\n  const onSubmit = async (values: UserProfileEducationFormValues) => {\n    if (isSaving) return;\n\n    const data = {\n      id: values.id,\n      title: values.title,\n      date_of_certification: null,\n      price: values.price,\n      date_of_start: null,\n      date_of_end: null,\n      expertise_level: values.expertise_level,\n      certificate_issuer: values.certificate_issuer,\n      description: values.description,\n      file_id: values.file_id,\n      academic_title: values.academic_title?.id || '',\n      type_id: values.type?.id || 0,\n      user_profile_id: Number(navigation.location.pathname.split('/')[4]),\n      score: '',\n    };\n\n    try {\n      mutate(\n        data,\n        () => {\n          alert.success('Uspješno sačuvano.');\n          refetchList && refetchList();\n          onClose();\n        },\n        () => {\n          alert.error('Greška. Promjene nisu sačuvane.');\n          onClose();\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <FormGroup>\n            <Input\n              {...register('certificate_issuer', {required: 'Ovo polje je obavezno'})}\n              label=\"INSTITUCIJA:\"\n              error={errors.certificate_issuer?.message as string}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Controller\n              name=\"type\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"STEPEN ŠKOLSKOG OBRAZOVANJA:\"\n                    options={typesOptions}\n                    error={errors.type?.message as string}\n                  />\n                );\n              }}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Controller\n              name=\"academic_title\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"STEPEN STRUČNE OSPOSOBLJENOSTI:\"\n                  options={academicTitles}\n                  error={errors.academic_title?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <FileUploadWrapper>\n              <FileUpload\n                icon={<></>}\n                style={{width: '100%'}}\n                variant=\"secondary\"\n                onUpload={(item: any) => console.log(item)}\n                note={<Typography variant=\"bodySmall\" content=\"Obrazovni sertifikat\" />}\n                buttonText=\"Učitaj\"\n              />\n            </FileUploadWrapper>\n          </FormGroup>\n        </ModalContentWrapper>\n      }\n      title={'DODAJTE NOVO AKADEMSKO OBRAZOVANJE'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/functionalAcknowledgmentsModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3842,3845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3842,3845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Datepicker, Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {ModalProps} from '../../../screens/employees/education/types';\nimport useSettingsDropdownOverview from '../../../services/graphql/settingsDropdown/useSettingsDropdownOverview';\nimport useEducationInsert from '../../../services/graphql/userProfile/education/useEducationInsert';\nimport {UserProfileEducationFormValues} from '../../../types/graphql/userProfileGetEducation';\nimport {educationTypes, initialValues} from './constants';\nimport {FileUploadWrapper, ModalContentWrapper, Row} from './styles';\nimport {parseDateForBackend, parseToDate} from '../../../utils/dateUtils';\n\nexport const FunctionalAcknowledgmentModal: React.FC<ModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  alert,\n  refetchList,\n  navigation,\n}) => {\n  const {data: types} = useSettingsDropdownOverview({entity: educationTypes.education_functional_types});\n  const typesOptions = useMemo(() => types?.map(type => ({id: type.id as number, title: type.title})) || [], [types]);\n\n  const item = useMemo(() => selectedItem || initialValues, [selectedItem]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n    watch,\n  } = useForm({defaultValues: item});\n\n  const {mutate, loading: isSaving} = useEducationInsert();\n\n  useEffect(() => {\n    item &&\n      reset({...item, date_of_start: parseToDate(item.date_of_start), date_of_end: parseToDate(item.date_of_end)});\n  }, [item]);\n\n  const onSubmit = async (values: UserProfileEducationFormValues) => {\n    if (isSaving) return;\n\n    const data = {\n      id: values.id,\n      title: values.title,\n      date_of_certification: null,\n      price: Number(values.price),\n      date_of_start: parseDateForBackend(values?.date_of_start),\n      date_of_end: parseDateForBackend(values?.date_of_end),\n      expertise_level: values?.expertise_level,\n      certificate_issuer: values.certificate_issuer,\n      description: values.description,\n      file_id: values.file_id,\n      academic_title: values.academic_title?.id || '',\n      type_id: values.type?.id || 0,\n      user_profile_id: Number(navigation.location.pathname.split('/')[4]),\n      score: '',\n    };\n\n    try {\n      mutate(\n        data,\n        () => {\n          alert.success('Uspješno sačuvano.');\n          refetchList && refetchList();\n          onClose();\n          reset(initialValues);\n        },\n        () => {\n          alert.error('Greška. Promjene nisu sačuvane.');\n          onClose();\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    } finally {\n      reset(initialValues);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset(initialValues);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <Row>\n            <Input\n              {...register('expertise_level', {required: 'Ovo polje je obavezno'})}\n              label=\"FUNKCIONALNA ZNANJA:\"\n              error={errors.expertise_level?.message as string}\n            />\n            <Input\n              {...register('certificate_issuer', {required: 'Ovo polje je obavezno'})}\n              label=\"IZVOĐAČ:\"\n              error={errors.certificate_issuer?.message as string}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"type\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"OCJENA:\"\n                  options={typesOptions}\n                  error={errors.type?.message as string}\n                />\n              )}\n            />\n            <Input\n              {...register('price', {required: 'Ovo polje je obavezno'})}\n              label=\"KOTIZACIJA:\"\n              leftContent={<Typography content={<div>&euro;</div>} />}\n              style={{maxWidth: '300px'}}\n              error={errors.price?.message as string}\n              value={watch('price')}\n              type=\"number\"\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"date_of_start\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"POČETAK:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_start?.message as string}\n                />\n              )}\n            />\n            <Controller\n              name=\"date_of_end\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"KRAJ:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_end?.message as string}\n                />\n              )}\n            />\n          </Row>\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={item => console.log(item)}\n              note={<Typography variant=\"bodySmall\" content=\"Funkcionalni sertifikat\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n        </ModalContentWrapper>\n      }\n      title={'DODAJTE NOVA FUNKCIONALNA ZNANJA'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/judicalStateExamsModal.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":27,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":27,"endColumn":13,"fix":{"range":[1217,1229],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":28,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":28,"endColumn":13,"fix":{"range":[1246,1258],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":29,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":29,"endColumn":15,"fix":{"range":[1276,1290],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":30,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":30,"endColumn":15,"fix":{"range":[1324,1338],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":31,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":31,"endColumn":13,"fix":{"range":[1375,1387],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":32,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":32,"endColumn":11,"fix":{"range":[1390,1400],"text":"        "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3506,3509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3506,3509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import {Datepicker, Dropdown, FileUpload, Modal, Typography, Input} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {ModalProps} from '../../../screens/employees/education/types';\nimport useSettingsDropdownOverview from '../../../services/graphql/settingsDropdown/useSettingsDropdownOverview';\nimport useEducationInsert from '../../../services/graphql/userProfile/education/useEducationInsert';\nimport {UserProfileEducationFormValues} from '../../../types/graphql/userProfileGetEducation';\nimport {educationTypes, initialValues} from './constants';\nimport {FileUploadWrapper, FormGroup, ModalContentWrapper} from './styles';\nimport {parseDateForBackend, parseToDate} from '../../../utils/dateUtils';\n\nexport const JudicalAndStateExamsModal: React.FC<ModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  alert,\n  refetchList,\n  navigation,\n}) => {\n  const {data: types} = useSettingsDropdownOverview({entity: educationTypes.education_exam_types});\n  const typesOptions = useMemo(() => types?.map(type => ({id: type.id as number, title: type.title})) || [], [types]);\n\n  const item = useMemo(\n    () =>\n      selectedItem\n        ? {\n            ...selectedItem,\n            academic_title: {\n              id: selectedItem?.academic_title,\n              title: selectedItem?.academic_title,\n            },\n          }\n        : initialValues,\n    [selectedItem],\n  );\n\n  const {\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n    register,\n    watch,\n  } = useForm({defaultValues: initialValues});\n\n  const {mutate, loading: isSaving} = useEducationInsert();\n\n  useEffect(() => {\n    item && reset({...item, date_of_certification: parseToDate(item.date_of_certification)});\n  }, [item]);\n\n  const onSubmit = async (values: UserProfileEducationFormValues) => {\n    if (isSaving) return;\n\n    const data = {\n      id: values.id,\n      title: values.title,\n      date_of_certification: parseDateForBackend(values.date_of_certification),\n      price: values.price,\n      date_of_start: null,\n      date_of_end: null,\n      expertise_level: values.expertise_level,\n      certificate_issuer: values.certificate_issuer,\n      description: values.description,\n      file_id: values.file_id,\n      academic_title: values.academic_title?.id || '',\n      type_id: values.type?.id || 0,\n      user_profile_id: Number(navigation.location.pathname.split('/')[4]),\n      score: values?.score,\n    };\n\n    try {\n      mutate(\n        data,\n        () => {\n          alert.success('Uspješno sačuvano.');\n          refetchList && refetchList();\n          onClose();\n        },\n        () => {\n          alert.error('Greška. Promjene nisu sačuvane.');\n          onClose();\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    } finally {\n      reset(initialValues);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset(initialValues);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <FormGroup>\n            <Controller\n              name=\"type\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"VRSTA ISPITA\"\n                  options={typesOptions}\n                  error={errors.type?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Input {...register('score')} label=\"BROJ BODOVA:\" type=\"number\" value={watch('score')} />\n          </FormGroup>\n          <FormGroup>\n            <Controller\n              name=\"date_of_certification\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"DATUM POLAGANJA:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_certification?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup>\n            <FileUploadWrapper>\n              <FileUpload\n                icon={<></>}\n                style={{width: '100%'}}\n                variant=\"secondary\"\n                onUpload={item => console.log(item)}\n                note={<Typography variant=\"bodySmall\" content=\"Obrazovni sertifikat\" />}\n                buttonText=\"Učitaj\"\n              />\n            </FileUploadWrapper>\n          </FormGroup>\n        </ModalContentWrapper>\n      }\n      title={'DODAJTE NOVI PRAVOSUDNI/DRŽAVNI ISPIT'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/languageAcknowledgmentModal.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":28,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":28,"endColumn":13,"fix":{"range":[1056,1068],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":29,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":29,"endColumn":13,"fix":{"range":[1085,1097],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":30,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":30,"endColumn":15,"fix":{"range":[1116,1130],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":31,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":31,"endColumn":15,"fix":{"range":[1170,1184],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":32,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":32,"endColumn":13,"fix":{"range":[1228,1240],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":33,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":33,"endColumn":11,"fix":{"range":[1243,1253],"text":"        "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1517,1520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1517,1520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3104,3107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3104,3107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3683,3686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3683,3686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import {Dropdown, FileUpload, Modal} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {ModalProps} from '../../../screens/employees/education/types';\nimport useSettingsDropdownOverview from '../../../services/graphql/settingsDropdown/useSettingsDropdownOverview';\nimport useEducationInsert from '../../../services/graphql/userProfile/education/useEducationInsert';\nimport {educationTypes, initialValues, languageAcknowledgmentLevels} from './constants';\nimport {ModalContentWrapper, Row} from './styles';\n\nexport const LanguageAcknowledgmentModal: React.FC<ModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  alert,\n  refetchList,\n  navigation,\n}) => {\n  const {data: languages} = useSettingsDropdownOverview({entity: educationTypes.education_language_types});\n  const languagesOptions = useMemo(\n    () => languages?.map(type => ({id: type.id as number, title: type.title})) || [],\n    [languages],\n  );\n\n  const item = useMemo(\n    () =>\n      selectedItem\n        ? {\n            ...selectedItem,\n            expertise_level: {\n              id: selectedItem.expertise_level || '',\n              title: selectedItem?.expertise_level || '',\n            },\n          }\n        : initialValues,\n    [selectedItem],\n  );\n\n  const {\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: item});\n\n  const {mutate, loading: isSaving} = useEducationInsert();\n\n  const onSubmit = async (values: any) => {\n    if (isSaving) return;\n\n    const data = {\n      id: values.id,\n      title: values.title,\n      date_of_certification: null,\n      price: values.price,\n      date_of_start: null,\n      date_of_end: null,\n      expertise_level: values.expertise_level.id,\n      certificate_issuer: values.certificate_issuer,\n      description: values.description,\n      file_id: values.file_id,\n      academic_title: values.academic_title?.id || '',\n      type_id: values.type?.id || 0,\n      user_profile_id: Number(navigation.location.pathname.split('/')[4]),\n      score: '',\n    };\n\n    try {\n      mutate(\n        data,\n        () => {\n          alert?.success('Uspješno sačuvano');\n          refetchList && refetchList();\n          onClose();\n        },\n        () => {\n          alert.error('Greška. Promjene nisu sačuvane.');\n          onClose();\n        },\n      );\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    item && reset(item);\n  }, [item]);\n\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      style={{width: '560px'}}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <Row>\n            <Controller\n              name=\"type\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"ZNANJE STRANOG JEZIKA:\"\n                  isSearchable\n                  options={languagesOptions}\n                  error={errors.type?.message as string}\n                />\n              )}\n            />\n            <Controller\n              name=\"expertise_level\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"STEPEN:\"\n                  options={languageAcknowledgmentLevels}\n                  error={errors.expertise_level?.message as string}\n                />\n              )}\n            />\n            <FileUpload\n              icon={<></>}\n              style={{border: 'none', padding: '0px', width: 'auto'}}\n              variant=\"primary\"\n              onUpload={item => console.log(item)}\n              buttonText=\"Učitaj\"\n            />\n          </Row>\n        </ModalContentWrapper>\n      }\n      title={'DODAJTE NOVI JEZIK'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/tables/academicEducationTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/tables/functionalAcknowledgementsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/tables/judicalAndStateExamsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/tables/languageAcknowledgementsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/tables/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/employeeDetails/employeeDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'detailsRef' is assigned a value but never used.","line":32,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":19},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":48,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":48,"endColumn":7,"fix":{"range":[2003,2009],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":49,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":49,"endColumn":9,"fix":{"range":[2028,2036],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":50,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":50,"endColumn":7,"fix":{"range":[2058,2064],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":51,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":51,"endColumn":9,"fix":{"range":[2086,2094],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":52,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":52,"endColumn":7,"fix":{"range":[2137,2143],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":53,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":53,"endColumn":9,"fix":{"range":[2161,2169],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":54,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":54,"endColumn":7,"fix":{"range":[2213,2219],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":55,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":55,"endColumn":9,"fix":{"range":[2238,2246],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":56,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":56,"endColumn":7,"fix":{"range":[2291,2297],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":57,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":57,"endColumn":9,"fix":{"range":[2320,2328],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":58,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":58,"endColumn":7,"fix":{"range":[2369,2375],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":59,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":59,"endColumn":9,"fix":{"range":[2401,2409],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":60,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":60,"endColumn":7,"fix":{"range":[2450,2456],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":61,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":61,"endColumn":9,"fix":{"range":[2478,2486],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":62,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":62,"endColumn":7,"fix":{"range":[2534,2540],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":63,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":63,"endColumn":9,"fix":{"range":[2560,2568],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":64,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":64,"endColumn":7,"fix":{"range":[2614,2620],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":65,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":65,"endColumn":9,"fix":{"range":[2636,2644],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":66,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":66,"endColumn":7,"fix":{"range":[2682,2688],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":67,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":67,"endColumn":9,"fix":{"range":[2697,2705],"text":"      "}}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":20,"fixableWarningCount":0,"source":"import {Tab} from '@oykos-development/devkit-react-ts-styled-components';\nimport React, {useEffect, useMemo, useRef, useState} from 'react';\nimport useAppContext from '../../context/useAppContext';\nimport Absents from '../../screens/employees/absents/absents';\nimport {BasicInfo} from '../../screens/employees/basicInfo/basicInfo';\nimport {ConfirmationsPage} from '../../screens/employees/confirmations/confirmations';\nimport {employeeTabs} from '../../screens/employees/constants';\nimport {EducationPage} from '../../screens/employees/education/education';\nimport {EvaluationsPage} from '../../screens/employees/evaluations/evaluations';\nimport {ExperiencePage} from '../../screens/employees/experience/experience';\nimport {FamilyPage} from '../../screens/employees/family/family';\nimport Foreigners from '../../screens/employees/foreigners/foreigners';\nimport {SalaryParams} from '../../screens/employees/salaryParams/salaryParams';\nimport {getRouteName} from '../../utils/getRouteName';\nimport {EmployeeDetailsBox, StyledTabs} from './styles';\n\nconst getCurrentTab = (pathname: string) => {\n  const path = pathname.split('/');\n  const name = path[path.length - 1];\n  return employeeTabs.find(tab => tab.routeName === name)?.id;\n};\n\nconst EmployeeDetails: React.FC = () => {\n  const context = useAppContext();\n  const [activeTab, setActiveTab] = useState(getCurrentTab(context.navigation.location.pathname) || 1);\n  const {\n    navigation: {\n      navigate,\n      location: {pathname},\n    },\n  } = context;\n  const detailsRef = useRef<HTMLDivElement>(null);\n\n  const employeesPath = pathname && pathname.split('/')[pathname.split('/').length - 1];\n\n  const onTabChange = (tab: Tab) => {\n    setActiveTab(tab.id as number);\n    const routeName = getRouteName(tab.title as string);\n\n    const pathname = context.navigation.location.pathname.split('/');\n    pathname.pop();\n\n    navigate(`${pathname.join('/')}/${routeName}`);\n  };\n\n  const employeesRoute = useMemo(() => {\n    switch (employeesPath) {\n      case 'basic-info':\n        return <BasicInfo />;\n      case 'salary-params':\n        return <SalaryParams context={context} />;\n      case 'education':\n        return <EducationPage context={context} />;\n      case 'experience':\n        return <ExperiencePage context={context} />;\n      case 'family-members':\n        return <FamilyPage context={context} />;\n      case 'foreigner-permits':\n        return <Foreigners context={context} />;\n      case 'confirmations':\n        return <ConfirmationsPage context={context} />;\n      case 'evaluations':\n        return <EvaluationsPage context={context} />;\n      case 'absents':\n        return <Absents context={context} />;\n      default:\n        return <></>;\n    }\n  }, [employeesPath, context]);\n\n  useEffect(() => {\n    setActiveTab(getCurrentTab(context.navigation.location.pathname) || 1);\n  }, [context.navigation.location.pathname]);\n\n  // TODO: find a better way of handling this\n  if (employeesPath === 'employees') {\n    return null;\n  }\n\n  return (\n    <EmployeeDetailsBox>\n      <StyledTabs\n        tabs={employeeTabs}\n        activeTab={activeTab}\n        onChange={onTabChange}\n        //TODO: change in devkit/library\n        style={{borderWidth: '1px', borderRadius: '0.5em 0.5em 0 0', whiteSpace: 'nowrap'}}\n      />\n      {employeesRoute}\n    </EmployeeDetailsBox>\n  );\n};\n\nexport default EmployeeDetails;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/employeeDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/employeesList/employeesList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[827,830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[827,830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[989,992],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[989,992],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":49,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":49,"endColumn":9,"fix":{"range":[1820,1828],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":50,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":50,"endColumn":9,"fix":{"range":[1879,1887],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":51,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":51,"endColumn":9,"fix":{"range":[1896,1904],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":52,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":52,"endColumn":7,"fix":{"range":[1951,1957],"text":"    "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2097,2100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2097,2100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3290,3293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3290,3293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import {Button, Divider, Pagination, SearchIcon, Table, Theme} from 'client-library';\nimport React, {ChangeEvent, RefObject, useEffect, useRef, useState} from 'react';\nimport {statusOptions} from '../../constants';\nimport {EmployeeListFilters} from '../../screens/employees';\nimport {tableHeads} from '../../screens/employees/constants';\nimport useGetJobPositions from '../../services/graphql/jobPositions/useGetJobPositions';\nimport useGetOrganizationUnits from '../../services/graphql/organizationUnits/useGetOrganizationUnits';\nimport {UserProfile} from '../../types/graphql/userProfiles';\nimport {scrollToTheNextElement} from '../../utils/scrollToTheNextElement';\nimport {Controls, FilterDropdown, FilterInput, Filters, Header, MainTitle, OverviewBox} from './styles';\n\nexport interface EmployeesListProps {\n  navigation?: any;\n  toggleEmployeeImportModal: () => void;\n  onPageChange: (page: number) => void;\n  search: string;\n  filters: EmployeeListFilters;\n  onFilterChange: (value: any, name: string) => void;\n  onSearch: (e: ChangeEvent<HTMLInputElement>) => void;\n  parentRef: RefObject<HTMLDivElement>;\n  loading: boolean;\n  data: {\n    items: UserProfile[];\n    total: number;\n  };\n}\n\nconst EmployeesList: React.FC<EmployeesListProps> = ({\n  navigation,\n  onPageChange,\n  data,\n  search,\n  filters,\n  onFilterChange,\n  onSearch,\n  parentRef,\n  loading,\n}) => {\n  const [selectedRowId, setSelectedRowId] = useState(0);\n  const overviewRef = useRef<HTMLDivElement>(null);\n  const state = navigation.location.state;\n  const isDetails = navigation.location.pathname.split('/').length === 6;\n\n  const {organizationUnits} = useGetOrganizationUnits(undefined, {allOption: true});\n  const {jobPositions} = useGetJobPositions('');\n\n  const userProfileList = data.items\n    ? data?.items?.map((item: UserProfile) => ({\n        full_name: `${item.first_name} ${item.last_name}`,\n        ...item,\n        active: item.active ? 'Aktivan' : 'Neaktivan',\n      }))\n    : [];\n\n  const jobPositionOptions = [\n    {id: 0, title: 'Sva radna mjesta'},\n    ...(jobPositions ? jobPositions.map((jobPosition: any) => ({id: jobPosition.id, title: jobPosition.title})) : []),\n  ];\n\n  useEffect(() => {\n    if (state?.scroll || isDetails) {\n      scrollToTheNextElement(parentRef, overviewRef);\n    }\n  }, [isDetails]);\n\n  return (\n    <OverviewBox ref={overviewRef}>\n      <MainTitle variant=\"bodyMedium\" content=\"PREGLED SVIH ZAPOSLENIH\" />\n      <Divider color={Theme?.palette?.gray200} height=\"1px\" />\n      <Header>\n        <Filters>\n          <FilterDropdown\n            label=\"FILTER ORGANIZACIONIH JEDINICA:\"\n            options={organizationUnits}\n            onChange={value => onFilterChange(value, 'organization_unit_id')}\n            value={filters.organization_unit_id}\n            name=\"organization_unit_id\"\n            placeholder=\"Odaberite organizacionu jedinicu\"\n          />\n\n          <FilterDropdown\n            label=\"RADNO MJESTO:\"\n            options={jobPositionOptions}\n            onChange={value => onFilterChange(value, 'job_position_id')}\n            value={filters.job_position_id}\n            name=\"job_position_id\"\n            placeholder=\"Odaberite radno mjesto\"\n          />\n\n          <FilterDropdown\n            label=\"STATUS:\"\n            options={statusOptions as any}\n            onChange={value => onFilterChange(value, 'is_active')}\n            value={filters.is_active}\n            name=\"is_active\"\n            placeholder=\"Odaberite status\"\n          />\n\n          <FilterInput\n            onChange={onSearch}\n            label=\"PRETRAGA PO IMENU I PREZIMENU:\"\n            value={search}\n            rightContent={<SearchIcon />}\n            placeholder=\"Unesite ime i prezime\"\n          />\n        </Filters>\n        <Controls>\n          <Button\n            content=\"Dodaj zaposlenog\"\n            variant=\"secondary\"\n            style={{width: 170}}\n            onClick={() => {\n              navigation.navigate('/hr/employees/add-new');\n            }}\n          />\n        </Controls>\n      </Header>\n      <Table\n        tableHeads={tableHeads}\n        data={userProfileList}\n        style={{marginBottom: 22}}\n        isLoading={loading}\n        selectedRowId={selectedRowId}\n        onRowClick={(row: UserProfile) => {\n          navigation.navigate(`/hr/employees/details/${row.id}/basic-info`);\n          scrollToTheNextElement(parentRef, overviewRef);\n          setSelectedRowId(row.id);\n        }}\n      />\n      <Pagination\n        pageCount={Math.ceil(data.total / 10)}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={2}\n        pageRangeDisplayed={3}\n      />\n    </OverviewBox>\n  );\n};\n\nexport default EmployeesList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/employeesList/styles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Table' is defined but never used.","line":1,"column":57,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":62}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Typography, Dropdown, Breadcrumbs, Tabs, Input, Table} from 'client-library';\nimport styled from 'styled-components';\nimport SectionBox from '../../shared/sectionBox';\n\nexport const Header = styled.div`\n  display: flex;\n  margin-block: 22px;\n  align-items: center;\n  flex-wrap: wrap;\n  row-gap: 30px;\n  column-gap: 10px;\n`;\n\nexport const Controls = styled.div`\n  display: flex;\n`;\n\nexport const Filters = styled.div`\n  display: flex;\n  gap: 8px;\n  flex-grow: 1;\n  flex-wrap: wrap;\n`;\n\n//TODO: on devkit and/or storybook, make dropdown to be at least the width of its label ??\nexport const FilterDropdown = styled(Dropdown)`\n  width: 300px;\n`;\n\nexport const FilterInput = styled(Input)`\n  width: 300px;\n`;\n\nexport const MainTitle = styled(Typography)`\n  margin-bottom: 10px;\n  font-weight: 600;\n`;\n\nexport const OverviewBox = styled(SectionBox)`\n  margin-top: 25px;\n`;\n\nexport const ScreenWrapper = styled.div`\n  background-color: #f8f8f8;\n  padding: 28px 40px;\n  height: calc(100vh - 157px);\n  overflow-y: auto;\n  box-sizing: border-box;\n\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nexport const StyledBreadcrumbs = styled(Breadcrumbs)`\n  padding: 0;\n  margin: 0;\n`;\n\nexport const StyledTabs = styled(Tabs)`\n  /* width: 100%; */\n  overflow-x: auto;\n`;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/evaluationModal/evaluationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2014,2017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2014,2017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2070,2073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2070,2073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4239,4242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4239,4242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4805,4808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4805,4808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Datepicker, Dropdown, FileUpload, Modal, Typography} from 'client-library';\nimport React, {useEffect, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {yesOrNoOptionsString} from '../../constants';\nimport {EvaluationModalProps} from '../../screens/employees/evaluations/types';\nimport useEvaluationInsert from '../../services/graphql/userProfile/evaluation/useEvaluationInsert';\nimport {DropdownDataNumber} from '../../types/dropdownData';\nimport {parseDateForBackend, parseToDate} from '../../utils/dateUtils';\nimport {FileUploadWrapper, FormWrapper, Row} from './styles';\n\nconst evaluationSchema = yup.object().shape({\n  date_of_evaluation: yup.date().required('Ovo polje je obavezno'),\n  is_relevant: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string(), title: yup.string()})\n    .required('Ovo polje je obavezno'),\n  score: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string(), title: yup.string()})\n    .required('Ovo polje je obavezno'),\n  user_profile_id: yup.number().required('Ovo polje je obavezno'),\n});\n\nexport const EvaluationModal: React.FC<EvaluationModalProps> = ({\n  alert,\n  refetchList,\n  selectedItem,\n  open,\n  onClose,\n  userProfileId,\n  evaluationTypes,\n}) => {\n  const [evaluationTypesOption, setEvaluationTypesOption] = useState<DropdownDataNumber[]>([]);\n\n  const {\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({\n    resolver: yupResolver(evaluationSchema),\n    defaultValues: {user_profile_id: Number(userProfileId) ?? null},\n  });\n\n  useEffect(() => {\n    if (Array.isArray(evaluationTypes) && evaluationTypes.length > 0) {\n      const newData = evaluationTypes.map(item => ({id: item.id || 0, title: item.title || ''}));\n      setEvaluationTypesOption(newData);\n    }\n  }, [evaluationTypes]);\n\n  const {mutate, loading: isSaving} = useEvaluationInsert();\n\n  const onSubmit = async (data: any) => {\n    if (isSaving) return;\n\n    const payload: any = {\n      user_profile_id: data?.user_profile_id,\n      score: data?.score.title,\n      is_relevant: data?.is_relevant?.id === 'Da' ? true : false,\n      date_of_evaluation: parseDateForBackend(data?.date_of_evaluation),\n      file_id: data?.file_id,\n      evaluation_type_id: data?.score.id,\n      evaluator: '',\n    };\n\n    if (selectedItem) {\n      payload.id = selectedItem.id ? selectedItem.id : 0;\n    }\n\n    await mutate(\n      payload,\n      () => {\n        refetchList();\n        alert.success('Uspješno sačuvano.');\n        onClose();\n        reset();\n      },\n      () => {\n        alert.error('Greška. Promjene nisu sačuvane.');\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (selectedItem) {\n      reset({\n        ...selectedItem,\n        is_relevant: {id: selectedItem?.is_relevant ? 'Da' : 'Ne', title: selectedItem?.is_relevant ? 'Da' : 'Ne'},\n        date_of_evaluation: parseToDate(selectedItem?.date_of_evaluation),\n        score: {id: selectedItem?.evaluation_type.id, title: selectedItem?.evaluation_type.title},\n        user_profile_id: Number(userProfileId),\n      });\n    }\n  }, [selectedItem]);\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset();\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <FormWrapper>\n          <Row>\n            <Controller\n              name=\"date_of_evaluation\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  selected={value ? new Date(value) : ''}\n                  name={name}\n                  label=\"DATUM:\"\n                  error={errors.date_of_evaluation?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"is_relevant\"\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"PRAVOSNAŽNOST:\"\n                    options={yesOrNoOptionsString}\n                    error={errors.is_relevant?.message}\n                  />\n                );\n              }}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"score\"\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"OCJENA:\"\n                    options={evaluationTypesOption}\n                    error={errors.is_relevant?.message}\n                  />\n                );\n              }}\n            />\n          </Row>\n\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={(item: File | FileList) => console.log(item)}\n              note={<Typography variant=\"bodySmall\" content=\"Validacija\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n        </FormWrapper>\n      }\n      title={'DODAJTE NOVO ZAPOSLENJE'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/evaluationModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/experienceModal/experienceModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3381,3384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3381,3384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4935,4938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4935,4938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5947,5950],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5947,5950],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Datepicker, Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport React, {useEffect} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {yesOrNoOptionsString} from '../../constants';\nimport {ExperienceModalProps} from '../../screens/employees/experience/types';\nimport {formatData} from '../../screens/employees/experience/utils';\nimport useGetOrganizationUnits from '../../services/graphql/organizationUnits/useGetOrganizationUnits';\nimport useExperienceInsert from '../../services/graphql/userProfile/experience/useExperienceInsert';\nimport {DropdownDataString} from '../../types/dropdownData';\nimport {calculateExperience, parseToDate} from '../../utils/dateUtils';\nimport {FileUploadWrapper, FormWrapper, Row} from './styles';\n\nconst experienceSchema = yup.object().shape({\n  relevant: yup\n    .object()\n    .default(undefined)\n    .required('Ovo polje je obavezno')\n    .shape({id: yup.string().required(), title: yup.string().required()}),\n  amount_of_experience: yup.number().required('Ovo polje je obavezno'),\n  amount_of_insured_experience: yup\n    .number()\n    .transform(value => (!value || isNaN(value) ? null : value))\n    .nullable()\n    .required('Ovo polje je obavezno'),\n  date_of_end: yup\n    .date()\n    .required('Ovo polje je obavezno')\n    .min(yup.ref('date_of_start'), 'Kraj radnog odnosa ne može biti prije početka radnog odnosa.')\n    .nullable(),\n  date_of_start: yup.date().required('Ovo polje je obavezno').nullable(),\n  organization_unit: yup.string().when('relevant', {\n    is: (value: DropdownDataString) => value && value.id === 'Ne',\n    then: schema => schema.required('Ovo polje je obavezno'),\n    otherwise: schema => schema.optional(),\n  }),\n  organization_unit_id: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string().required(), title: yup.string().required()})\n    .when('relevant', {\n      is: (value: DropdownDataString) => value && value.id === 'Da',\n      then: schema => schema.required('Ovo polje je obavezno'),\n      otherwise: schema => schema.optional(),\n    }),\n  user_profile_id: yup.number().required(),\n});\n\nexport const ExperienceModal: React.FC<ExperienceModalProps> = ({\n  refetchList,\n  selectedItem,\n  open,\n  onClose,\n  userProfileId,\n  alert,\n}) => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: {errors},\n    reset,\n    setValue,\n  } = useForm({resolver: yupResolver(experienceSchema), defaultValues: {user_profile_id: userProfileId}});\n\n  const {mutate, loading: isSaving} = useExperienceInsert();\n  const {organizationUnits} = useGetOrganizationUnits(undefined, {allOption: true});\n\n  const {relevant, date_of_start, date_of_end, organization_unit, organization_unit_id} = watch();\n\n  useEffect(() => {\n    if (selectedItem) {\n      reset({\n        ...selectedItem,\n        relevant: {id: selectedItem?.relevant ? 'Da' : 'Ne', title: selectedItem?.relevant ? 'Da' : 'Ne'},\n        organization_unit_id: organizationUnits.find(orgUnit => orgUnit.id === selectedItem?.organization_unit_id),\n        date_of_start: parseToDate(selectedItem?.date_of_start),\n        date_of_end: parseToDate(selectedItem?.date_of_end),\n        user_profile_id: userProfileId,\n      });\n    }\n  }, [selectedItem]);\n\n  const onSubmit = async (data: any) => {\n    if (isSaving) return;\n\n    const payload = formatData(data, !selectedItem);\n\n    try {\n      await mutate(\n        payload,\n        () => {\n          alert.success('Uspješno sačuvano.');\n          refetchList && refetchList();\n          onClose();\n        },\n        () => {\n          alert.error('Greška. Promjene nisu sačuvane.');\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const isOrgUnitDisabled = relevant?.id === 'Da' || !relevant;\n\n  useEffect(() => {\n    if (date_of_end && date_of_start) {\n      const calculatedExperience = calculateExperience(date_of_start, date_of_end);\n      setValue('amount_of_experience', calculatedExperience);\n    }\n\n    if (organization_unit && isOrgUnitDisabled) {\n      setValue('organization_unit', '');\n    }\n\n    if (organization_unit_id && !isOrgUnitDisabled) {\n      setValue('organization_unit_id', {id: '', title: ''});\n    }\n  }, [date_of_end, date_of_start, isOrgUnitDisabled]);\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset();\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <FormWrapper>\n          <Row>\n            <Controller\n              name=\"relevant\"\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"SUDSTVO:\"\n                    options={yesOrNoOptionsString}\n                    error={errors.relevant?.message}\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"date_of_start\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"POČETAK RADNOG ODNOSA:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_start?.message}\n                />\n              )}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"organization_unit_id\"\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"JEDINICA:\"\n                    options={organizationUnits}\n                    isDisabled={!isOrgUnitDisabled}\n                    error={errors.organization_unit_id?.message}\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"date_of_end\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"KRAJ RADNOG ODNOSA:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_end?.message}\n                />\n              )}\n            />\n          </Row>\n          <Row>\n            <Input\n              {...register('organization_unit')}\n              label=\"ORGANIZACIJA/INSTITUCIJA:\"\n              error={errors.organization_unit?.message}\n              disabled={isOrgUnitDisabled}\n            />\n            <Input\n              {...register('amount_of_insured_experience')}\n              label=\"PRIJAVLJENI STAŽ (MJESECI):\"\n              type=\"number\"\n              value={watch('amount_of_insured_experience')?.toString()}\n            />\n          </Row>\n\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={item => console.log(item)}\n              note={<Typography variant=\"bodySmall\" content=\"Dokaz o zaposlenju\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n        </FormWrapper>\n      }\n      title={'DODAJTE NOVO ZAPOSLENJE'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/experienceModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/familyMemberModal/familyMemberModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3428,3431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3428,3431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4425,4428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4425,4428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5044,5047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5044,5047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5681,5684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5681,5684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6395,6398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6395,6398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7326,7329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7326,7329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":241,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7892,7895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7892,7895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":257,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8407,8410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8407,8410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":275,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8959,8962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8959,8962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":285,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9400,9403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9400,9403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":295,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":295,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9764,9767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9764,9767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":318,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":318,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10569,10572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10569,10572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Datepicker, Dropdown, Input, Modal} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {nationalMinorities} from '../../constants';\nimport {FamilyMemberModalProps} from '../../screens/employees/family/types';\nimport {formatData} from '../../screens/employees/family/utils';\nimport useFamilyInsert from '../../services/graphql/userProfile/family/useFamilyInsert';\nimport {UserProfileFamilyParams} from '../../types/graphql/userProfileGetFamilyTypes';\nimport {cityData, employeeRelationshipDropdownData} from '../../utils/constants';\nimport {FormWrapper, Row} from './styles';\nimport {parseToDate} from '../../utils/dateUtils';\n\nconst initialValues: UserProfileFamilyParams = {\n  id: 0,\n  user_profile_id: 0,\n  first_name: '',\n  last_name: '',\n  date_of_birth: null,\n  country_of_birth: null,\n  city_of_birth: '',\n  nationality: null,\n  citizenship: null,\n  address: '',\n  father_name: '',\n  mother_name: '',\n  mother_birth_last_name: '',\n  official_personal_id: '',\n  gender: '',\n  insurance_coverage: '',\n  handicapped_person: false,\n  employee_relationship: '',\n  national_minority: null,\n};\n\nexport const FamilyMemberModal: React.FC<FamilyMemberModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  countries,\n  userProfileId,\n  alert,\n  refetch,\n}) => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: {errors, dirtyFields},\n    reset,\n    resetField,\n  } = useForm({defaultValues: initialValues});\n\n  const {mutate, loading: isSaving} = useFamilyInsert();\n\n  const country_of_birth = watch('country_of_birth');\n  const countryIsMontenegro = country_of_birth?.id === 'mne';\n\n  const countryOptions = useMemo(() => {\n    return (\n      countries?.map(country => {\n        return {\n          id: country.alpha3,\n          title: country.name,\n        };\n      }) || []\n    );\n  }, [countries]);\n\n  useEffect(() => {\n    if (selectedItem) {\n      reset({\n        ...selectedItem,\n        handicapped_person: {\n          id: selectedItem?.handicapped_person ? 'Da' : 'Ne',\n          title: selectedItem?.handicapped_person ? 'Da' : 'Ne',\n        },\n        insurance_coverage: {\n          id: selectedItem?.insurance_coverage === 'Ne' ? 'Ne' : 'Da',\n          title: selectedItem?.insurance_coverage === 'Ne' ? 'Ne' : 'Da',\n        },\n        employee_relationship: {id: selectedItem?.employee_relationship, title: selectedItem?.employee_relationship},\n        country_of_birth: countryOptions?.find(country => country.id === selectedItem?.country_of_birth),\n        citizenship: countryOptions?.find(country => country.id === selectedItem?.citizenship),\n        gender: {id: selectedItem?.gender, title: selectedItem?.gender},\n        date_of_birth: parseToDate(selectedItem?.date_of_birth),\n        national_minority: nationalMinorities?.find(nm => nm.id === selectedItem.national_minority),\n        nationality: countryOptions?.find(c => c.title === selectedItem.nationality),\n        city_of_birth:\n          selectedItem.country_of_birth !== 'mne'\n            ? selectedItem.city_of_birth\n            : cityData.find(city => city.id === selectedItem.city_of_birth),\n      });\n    }\n  }, [selectedItem]);\n\n  useEffect(() => {\n    if (countryIsMontenegro && dirtyFields.country_of_birth) {\n      resetField('city_of_birth', {defaultValue: ''});\n    }\n  }, [country_of_birth]);\n\n  const onSubmit = (data: any) => {\n    if (isSaving) return;\n\n    const payload = formatData(data);\n    mutate(\n      {...payload, user_profile_id: userProfileId || 0},\n      () => {\n        alert.success('Uspješno sačuvano.');\n        refetch();\n        onClose();\n      },\n      () => {\n        alert.error('Greška. Promjene nisu sačuvane.');\n        onClose();\n      },\n    );\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <FormWrapper>\n          <Row>\n            <Controller\n              name=\"employee_relationship\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"SRODSTVO:\"\n                    options={employeeRelationshipDropdownData}\n                    error={errors.employee_relationship?.message}\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"country_of_birth\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    isSearchable\n                    label=\"DRŽAVA ROĐENJA:\"\n                    options={countryOptions}\n                    error={errors.country_of_birth?.message}\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"insurance_coverage\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"KORISNIK OSIGURANJA:\"\n                    options={[\n                      {id: 'Da', title: 'Da'},\n                      {id: 'Ne', title: 'Ne'},\n                    ]}\n                    error={errors.insurance_coverage?.message}\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"handicapped_person\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"LICE SA INVALIDITETOM:\"\n                    options={[\n                      {id: 'Da', title: 'Da'},\n                      {id: 'Ne', title: 'Ne'},\n                    ]}\n                    error={errors.handicapped_person?.message}\n                  />\n                );\n              }}\n            />\n          </Row>\n          <Row>\n            <Input\n              {...register('first_name', {required: 'Ovo polje je obavezno'})}\n              label=\"IME:\"\n              error={errors.first_name?.message}\n            />\n            <Controller\n              name=\"citizenship\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"DRŽAVLJANSTVO:\"\n                    options={countryOptions}\n                    error={errors.citizenship?.message}\n                    isSearchable\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"nationality\"\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"NACIONALNOST:\"\n                    options={countryOptions}\n                    isSearchable\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"national_minority\"\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"NACIONALNA MANJINA:\"\n                    options={nationalMinorities || []}\n                  />\n                );\n              }}\n            />\n          </Row>\n          <Row>\n            <Input\n              {...register('last_name', {required: 'Ovo polje je obavezno'})}\n              label=\"PREZIME:\"\n              error={errors.last_name?.message}\n            />\n            <Controller\n              name=\"city_of_birth\"\n              rules={{\n                validate: (value: any) =>\n                  (!value && country_of_birth?.id === 'MNE') || country_of_birth?.title === null\n                    ? 'Ovo polje je obavezno'\n                    : true,\n              }}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return countryIsMontenegro ? (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"OPŠTINA:\"\n                    options={cityData}\n                    error={errors.city_of_birth?.message}\n                    isSearchable\n                  />\n                ) : (\n                  <Input\n                    {...register('city_of_birth', {\n                      validate: (value: any) =>\n                        (!value && countryIsMontenegro) || country_of_birth?.title === ''\n                          ? 'Ovo polje je obavezno'\n                          : true,\n                    })}\n                    label=\"OPŠTINA:\"\n                    error={errors.city_of_birth?.message}\n                  />\n                );\n              }}\n            />\n\n            <Input {...register('address')} label=\"ADRESA:\" />\n          </Row>\n          <Row>\n            <Controller\n              name=\"gender\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"POL:\"\n                    options={[\n                      {id: 'Muški', title: 'Muški'},\n                      {id: 'Ženski', title: 'Ženski'},\n                    ]}\n                    error={errors.gender?.message}\n                  />\n                );\n              }}\n            />\n            <Input\n              {...register('father_name', {required: 'Ovo polje je obavezno'})}\n              label=\"IME OCA:\"\n              error={errors.father_name?.message}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"date_of_birth\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"DATUM ROĐENJA:\"\n                  name={name}\n                  selected={value ? new Date(value) : ''}\n                  error={errors.date_of_birth?.message}\n                />\n              )}\n            />\n            <Input\n              {...register('mother_name', {required: 'Ovo polje je obavezno'})}\n              label=\"IME MAJKE:\"\n              error={errors.mother_name?.message}\n            />\n          </Row>\n          <Row>\n            <Input\n              {...register('official_personal_id', {required: 'Ovo polje je obavezno'})}\n              label=\"JMBG:\"\n              error={errors.official_personal_id?.message}\n            />\n            <Input {...register('mother_birth_last_name')} label=\"PREZIME PO ROĐENJU:\" />\n          </Row>\n        </FormWrapper>\n      }\n      title={'DODAJTE ČLANA PORODICE'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/familyMemberModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/importEmployeeModal/importEmployeeModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobPositionTable/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobPositionTable/jobPositionTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3470,3473],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3470,3473],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5785,5788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5785,5788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":185,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":185,"endColumn":9,"fix":{"range":[5868,5876],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":186,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":186,"endColumn":11,"fix":{"range":[5897,5907],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":187,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":187,"endColumn":13,"fix":{"range":[5961,5973],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":188,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":188,"endColumn":13,"fix":{"range":[6050,6062],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":189,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":189,"endColumn":15,"fix":{"range":[6071,6085],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":190,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":190,"endColumn":17,"fix":{"range":[6132,6148],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":191,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":191,"endColumn":19,"fix":{"range":[6160,6178],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":192,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":192,"endColumn":19,"fix":{"range":[6196,6214],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":193,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":193,"endColumn":19,"fix":{"range":[6256,6274],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":194,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":194,"endColumn":19,"fix":{"range":[6326,6344],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":195,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":195,"endColumn":21,"fix":{"range":[6392,6412],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":196,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":196,"endColumn":23,"fix":{"range":[6422,6444],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":197,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":197,"endColumn":23,"fix":{"range":[6458,6480],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":198,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":198,"endColumn":23,"fix":{"range":[6492,6514],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":199,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":199,"endColumn":23,"fix":{"range":[6534,6556],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":200,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":200,"endColumn":23,"fix":{"range":[6585,6607],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":201,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":201,"endColumn":23,"fix":{"range":[6632,6654],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":202,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":202,"endColumn":23,"fix":{"range":[6678,6700],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":203,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":203,"endColumn":21,"fix":{"range":[6767,6787],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":204,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":204,"endColumn":19,"fix":{"range":[6790,6808],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":205,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":205,"endColumn":17,"fix":{"range":[6811,6827],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":206,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":206,"endColumn":15,"fix":{"range":[6830,6844],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":207,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":207,"endColumn":13,"fix":{"range":[6851,6863],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":208,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":208,"endColumn":11,"fix":{"range":[6866,6876],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":209,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":209,"endColumn":11,"fix":{"range":[6879,6889],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":210,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":210,"endColumn":9,"fix":{"range":[6896,6904],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":211,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":211,"endColumn":11,"fix":{"range":[6925,6935],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":212,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":212,"endColumn":13,"fix":{"range":[6989,7001],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":213,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":213,"endColumn":15,"fix":{"range":[7008,7022],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":214,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":214,"endColumn":15,"fix":{"range":[7108,7122],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":215,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":215,"endColumn":15,"fix":{"range":[7131,7145],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":216,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":216,"endColumn":15,"fix":{"range":[7186,7200],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":217,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":217,"endColumn":13,"fix":{"range":[7266,7278],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":218,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":218,"endColumn":11,"fix":{"range":[7281,7291],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":219,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":219,"endColumn":11,"fix":{"range":[7294,7304],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":220,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":220,"endColumn":9,"fix":{"range":[7311,7319],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":221,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":221,"endColumn":11,"fix":{"range":[7343,7353],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":222,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":222,"endColumn":13,"fix":{"range":[7407,7419],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":223,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":223,"endColumn":15,"fix":{"range":[7426,7440],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":224,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":224,"endColumn":15,"fix":{"range":[7529,7543],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":225,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":225,"endColumn":15,"fix":{"range":[7629,7643],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":226,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":226,"endColumn":13,"fix":{"range":[7712,7724],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":227,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":227,"endColumn":11,"fix":{"range":[7727,7737],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":228,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":228,"endColumn":11,"fix":{"range":[7740,7750],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":229,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":229,"endColumn":9,"fix":{"range":[7757,7765],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":230,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":230,"endColumn":11,"fix":{"range":[7785,7795],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":231,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":231,"endColumn":13,"fix":{"range":[7849,7861],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":232,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":232,"endColumn":15,"fix":{"range":[7868,7882],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":233,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":233,"endColumn":15,"fix":{"range":[7967,7981],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":234,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":234,"endColumn":15,"fix":{"range":[7990,8004],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":235,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":235,"endColumn":15,"fix":{"range":[8045,8059],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":236,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":236,"endColumn":13,"fix":{"range":[8124,8136],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":237,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":237,"endColumn":11,"fix":{"range":[8139,8149],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":238,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":238,"endColumn":11,"fix":{"range":[8152,8162],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":239,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":239,"endColumn":9,"fix":{"range":[8169,8177],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":240,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":240,"endColumn":11,"fix":{"range":[8195,8205],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":241,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":241,"endColumn":13,"fix":{"range":[8291,8303],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":242,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":242,"endColumn":15,"fix":{"range":[8309,8323],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":243,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":243,"endColumn":17,"fix":{"range":[8403,8419],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":244,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":244,"endColumn":19,"fix":{"range":[8445,8463],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":245,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":245,"endColumn":21,"fix":{"range":[8475,8495],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":246,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":246,"endColumn":21,"fix":{"range":[8513,8533],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":247,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":247,"endColumn":21,"fix":{"range":[8582,8602],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":248,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":248,"endColumn":23,"fix":{"range":[8634,8656],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 22 spaces but found 24.","line":249,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":249,"endColumn":25,"fix":{"range":[8666,8690],"text":"                      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 22 spaces but found 24.","line":250,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":250,"endColumn":25,"fix":{"range":[8704,8728],"text":"                      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 22 spaces but found 24.","line":251,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":251,"endColumn":25,"fix":{"range":[8746,8770],"text":"                      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":251,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8788,8791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8788,8791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":251,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8834,8837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8834,8837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 22 spaces but found 24.","line":252,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":252,"endColumn":25,"fix":{"range":[8839,8863],"text":"                      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":253,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":253,"endColumn":23,"fix":{"range":[8876,8898],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":254,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":254,"endColumn":21,"fix":{"range":[8901,8921],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":255,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":255,"endColumn":19,"fix":{"range":[8924,8942],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":256,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":256,"endColumn":17,"fix":{"range":[8945,8961],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":257,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":257,"endColumn":15,"fix":{"range":[8988,9002],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":258,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":258,"endColumn":15,"fix":{"range":[9005,9019],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":259,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":259,"endColumn":17,"fix":{"range":[9046,9062],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":260,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":260,"endColumn":19,"fix":{"range":[9077,9095],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":261,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":261,"endColumn":21,"fix":{"range":[9143,9163],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":262,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":262,"endColumn":23,"fix":{"range":[9172,9194],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 22 spaces but found 24.","line":263,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":263,"endColumn":25,"fix":{"range":[9242,9266],"text":"                      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 22 spaces but found 24.","line":264,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":264,"endColumn":25,"fix":{"range":[9327,9351],"text":"                      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 24 spaces but found 26.","line":265,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":265,"endColumn":27,"fix":{"range":[9368,9394],"text":"                        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 24 spaces but found 26.","line":266,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":266,"endColumn":27,"fix":{"range":[9427,9453],"text":"                        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 22 spaces but found 24.","line":267,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":267,"endColumn":25,"fix":{"range":[9500,9524],"text":"                      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":268,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":268,"endColumn":23,"fix":{"range":[9527,9549],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":269,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":269,"endColumn":21,"fix":{"range":[9565,9585],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":270,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":270,"endColumn":19,"fix":{"range":[9588,9606],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":271,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":271,"endColumn":17,"fix":{"range":[9610,9626],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":272,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":272,"endColumn":15,"fix":{"range":[9642,9656],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":273,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":273,"endColumn":13,"fix":{"range":[9659,9671],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":274,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":274,"endColumn":11,"fix":{"range":[9678,9688],"text":"        "}}],"suppressedMessages":[],"errorCount":90,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":90,"fixableWarningCount":0,"source":"import {\n  CheckIcon,\n  Dropdown,\n  EditIconTwo,\n  Input,\n  MinusCircleIcon,\n  TableHead,\n  Theme,\n  TrashIcon,\n  Typography,\n  XIcon,\n} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {DeleteModal} from '../../shared/deleteModal/deleteModal';\nimport {DropdownDataNumber} from '../../types/dropdownData';\nimport {JobPosition} from '../../types/graphql/jobPositions';\nimport {ActiveEmployee, SectorJobPosition} from '../../types/graphql/systematizationsTypes';\nimport {jobPositionTableHeads} from './constants';\nimport {EmployeeDropdownWrapper, EmployeeItem, EmployeeList, StyledTable} from './styles';\nimport {JobPositionTableProps} from './types';\nimport {UserProfile} from '../../types/graphql/userProfiles';\nimport {requiredError} from '../../constants';\nimport useAppContext from '../../context/useAppContext';\nimport useInsertJobPositionInOrgUnit from '../../services/graphql/jobPositionsInOrgUnit/useOrganizationUnitInsertJobPosition';\nimport useDeleteJobPositionInOrgUnit from '../../services/graphql/jobPositionsInOrgUnit/useDeleteJobPositionInOrgUnit';\n\n// !!! You will see that one prop inside of jobPositions is names job_positions instead of job_position, that is a typo in the backend\n\nexport const JobPositionTable: React.FC<JobPositionTableProps> = ({\n  data,\n  sectorID,\n  systematizationID,\n  refetchDetails,\n  jobPositionData = [],\n  allEmployees = [],\n  activeEmployees = [],\n  cancel,\n  isInactive,\n}) => {\n  const {mutate: insertJobPosition} = useInsertJobPositionInOrgUnit();\n  const {mutate: deleteJobPosition} = useDeleteJobPositionInOrgUnit();\n\n  const {\n    register,\n    formState: {errors, isValid},\n    control,\n    reset,\n    watch,\n    setValue,\n    clearErrors,\n    trigger,\n  } = useForm();\n\n  const {jobPositions} = watch();\n\n  const {alert} = useAppContext();\n\n  const jobPositionOptions = jobPositionData\n    ?.filter((item: JobPosition) => !item.is_judge)\n    .map((item: JobPosition) => ({id: item.id, title: item.title}));\n\n  const [editTableRow, setEditTableRow] = useState<null | number>(null);\n  const [deleteItemId, setDeleteItemId] = useState<null | number>(null);\n\n  const selectRow = (id: number) => {\n    setEditTableRow(id);\n  };\n\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const deleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setDeleteItemId(id);\n  };\n\n  const onRemoveEmployee = (id: number) => {\n    if (!editTableRow) return;\n\n    setValue(\n      `jobPositions[${editTableRow}].employees`,\n      jobPositions[editTableRow].employees.filter((i: ActiveEmployee) => i.id !== id),\n    );\n  };\n\n  const handleDelete = () => {\n    deleteJobPosition(\n      Number(deleteItemId),\n      () => {\n        refetchDetails();\n        setShowDeleteModal(false);\n        setDeleteItemId(null);\n\n        alert.success('Uspješno obrisano.');\n      },\n      () => {\n        alert.error('Greška. Brisanje nije moguće.');\n      },\n    );\n  };\n\n  const handleSave = async (data: SectorJobPosition) => {\n    trigger(`jobPositions[${data.id}]`);\n\n    if (isValid || Object.keys(errors).length === 0) {\n      const payload = {\n        id: data.id ? data.id : 0,\n        systematization_id: systematizationID,\n        parent_organization_unit_id: sectorID,\n        job_position_id: data?.job_positions?.id,\n        available_slots: +data?.available_slots,\n        employees: data.employees?.map((item: any) => item.id),\n        description: data.description,\n        requirements: data.requirements,\n      };\n\n      insertJobPosition(\n        payload,\n        () => {\n          refetchDetails();\n          alert.success('Radna pozicija uspješno sačuvana.');\n          clearErrors();\n        },\n        () => {\n          alert.error('Greška. Promjene nisu sačuvane.');\n        },\n      );\n\n      setEditTableRow(null);\n    }\n  };\n\n  useEffect(() => {\n    const initialData: {[key: string]: SectorJobPosition} = {};\n\n    data?.forEach((item: SectorJobPosition) => {\n      if (item.id === 0) setEditTableRow(0);\n\n      initialData[item.id] = {\n        id: item.id,\n        description: item?.description,\n        requirements: item?.requirements,\n        serial_number: item?.serial_number || '',\n        job_positions: item?.job_positions,\n        employees: item?.employees,\n        available_slots: item?.available_slots,\n      };\n    });\n\n    reset({jobPositions: initialData});\n  }, [data, jobPositionData]);\n\n  const onChangeEmployees = (value: DropdownDataNumber, position: SectorJobPosition) => {\n    const index = activeEmployees.findIndex(item => item.id === value.id);\n    const is_judge_president = jobPositionData.find(item => item.id === position?.id)?.is_judge_president;\n\n    if (index > -1 && !is_judge_president) {\n      alert.error(\n        `Zaposleni ${activeEmployees[index].full_name} već pokriva radno mjesto ${activeEmployees[index]?.job_position?.title} u odjeljenju ${activeEmployees[index]?.sector}!`,\n      );\n    } else {\n      setValue(`jobPositions[${position?.id}].employees`, [value, ...position.employees]);\n    }\n  };\n\n  // adding renderContents method to each of the tableHeads to render the corresponding input field\n  const updatedTableHeads = useMemo(() => {\n    const tableHeads = jobPositionTableHeads;\n\n    const activeEmployeeIds = activeEmployees.map((employee: ActiveEmployee) => employee?.id);\n\n    const employeeOptions = allEmployees\n      ?.filter(emp => !emp.is_judge && !emp.is_judge_president)\n      .map((item: UserProfile) => ({\n        id: item.id,\n        title: `${item.first_name} ${item.last_name}`,\n      }));\n\n    const options = employeeOptions.filter(employee => !activeEmployeeIds.includes(employee.id));\n\n    const positionErrors = errors.jobPositions as any;\n\n    tableHeads.forEach((head: TableHead) => {\n      switch (head.accessor) {\n        case 'job_position':\n          head.renderContents = (_, position: JobPosition) => {\n            const isDisabled = position?.id !== editTableRow || Number(position.id) > 0;\n            return (\n              <div key={`item-job-position-${position.id}`}>\n                <Controller\n                  control={control}\n                  rules={{required: requiredError, min: 1}}\n                  name={`jobPositions[${position.id}].job_positions`}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      value={value}\n                      name={name}\n                      onChange={onChange}\n                      options={jobPositionOptions}\n                      style={{width: '235px'}}\n                      isDisabled={isDisabled}\n                      error={positionErrors?.[`${position.id}`]?.job_positions?.message}\n                    />\n                  )}\n                />\n              </div>\n            );\n          };\n          break;\n        case 'requirements':\n          head.renderContents = (_, position: JobPosition) => (\n            <Input\n              {...register(`jobPositions[${position.id}].requirements`, {required: requiredError})}\n              textarea\n              disabled={position?.id !== editTableRow}\n              error={positionErrors?.[`${position.id}`]?.requirements?.message}\n            />\n          );\n          break;\n        case 'available_slots':\n          head.renderContents = (_, position: JobPosition) => (\n            <Input\n              {...register(`jobPositions[${position.id}].available_slots`, {required: requiredError})}\n              disabled={position?.id !== editTableRow || isInactive || position.is_judge_president}\n              error={positionErrors?.[`${position.id}`]?.available_slots?.message}\n            />\n          );\n          break;\n        case 'description':\n          head.renderContents = (_, position: JobPosition) => (\n            <Input\n              {...register(`jobPositions[${position.id}].description`, {required: requiredError})}\n              textarea\n              disabled={position?.id !== editTableRow}\n              error={positionErrors?.[`${position.id}`]?.description?.message}\n            />\n          );\n          break;\n        case 'employees':\n          head.renderContents = (value: DropdownDataNumber[], position: SectorJobPosition) => (\n            <div>\n              {position?.id === editTableRow && value.length < position?.available_slots && (\n                <EmployeeDropdownWrapper>\n                  <Controller\n                    control={control}\n                    name={`jobPositions[${position?.id}].employees`}\n                    render={({field: {value}}) => (\n                      <Dropdown\n                        value={value}\n                        options={options}\n                        onChange={(value: any) => onChangeEmployees(value, position) as any}\n                        isSearchable\n                      />\n                    )}\n                  />\n                </EmployeeDropdownWrapper>\n              )}\n              {Array.isArray(value) && (\n                <EmployeeList>\n                  {value?.map((employee: DropdownDataNumber) => {\n                    return (\n                      <EmployeeItem key={`employee-${employee?.id}`}>\n                        <Typography variant=\"bodyMedium\" content={employee.title} />\n                        <MinusCircleIcon\n                          stroke={Theme?.palette?.gray500}\n                          onClick={() => onRemoveEmployee(employee?.id)}\n                        />\n                      </EmployeeItem>\n                    );\n                  })}\n                </EmployeeList>\n              )}\n            </div>\n          );\n      }\n    });\n\n    return tableHeads;\n  }, [jobPositionOptions, allEmployees, activeEmployees, errors]);\n\n  return (\n    <>\n      <StyledTable\n        tableHeads={updatedTableHeads}\n        data={jobPositions ? Object.values(jobPositions) : []}\n        tableActions={[\n          {\n            name: 'edit',\n            onClick: item => selectRow(item.id),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            shouldRender: item => editTableRow !== item.id && !isInactive,\n          },\n          {name: 'save', onClick: handleSave, icon: <CheckIcon />, shouldRender: item => editTableRow === item.id},\n          {\n            name: 'delete',\n            onClick: item => deleteIconClick(item.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} style={{height: 18}} />,\n            shouldRender: item => editTableRow !== item.id && !isInactive,\n          },\n          {\n            name: 'cancel',\n            onClick: () => {\n              if (cancel) cancel();\n              setEditTableRow(null);\n            },\n            icon: <XIcon />,\n            shouldRender: item => editTableRow === item.id,\n          },\n        ]}\n      />\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobPositionTable/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobPositionTable/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderApplicationsList/jobTenderApplicationsList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[932,935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[932,935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3405,3408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3405,3408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {EditIconTwo, Pagination, Table, Theme, Typography, PlusIcon, TrashIcon} from 'client-library';\nimport React, {useMemo, useState} from 'react';\nimport {DeleteModal} from '../../shared/deleteModal/deleteModal';\nimport {PlusButton, TableHeader} from './styles';\nimport {applicationsTableHeads} from '../../screens/jobTenders/constants';\nimport {JobTender, JobTenderApplication} from '../../types/graphql/jobTenders';\nimport useJobTenderApplications from '../../services/graphql/jobTenders/useJobTenderApplicationOverview';\nimport useJobTendersDeleteApplication from '../../services/graphql/jobTenders/useJobTenderApplicationDelete';\nimport {ScreenProps} from '../../types/screen-props';\nimport {JobTenderApplicationModal} from '../JobTenderApplicationModal/JobTenderApplicationModal';\nimport {MicroserviceProps} from '../../types/micro-service-props';\n\nexport interface JobTenderDetailsListProps extends ScreenProps {\n  alert: any;\n  context: MicroserviceProps;\n  jobTender?: JobTender;\n}\n\nconst JobTenderApplicationsList: React.FC<JobTenderDetailsListProps> = ({alert, context, jobTender, ...props}) => {\n  const [showModal, setShowModal] = useState(false);\n  const [editItemId, setEditItemId] = useState(0);\n  const [page, setPage] = useState(1);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [deleteItemID, setDeleteItemID] = useState(0);\n  const {\n    data: applications,\n    refreshData,\n    loading,\n  } = useJobTenderApplications({page, size: 10, job_tender_id: jobTender?.id}, {skip: !jobTender?.id});\n\n  const {mutate: deleteJobTenderApplication} = useJobTendersDeleteApplication();\n\n  const tableData = applications?.items.map((item: JobTenderApplication) => ({\n    ...item,\n    full_name: `${item.first_name} ${item.last_name}`,\n  }));\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const handleCloseDeleteModal = () => {\n    setDeleteItemID(0);\n    setShowDeleteModal(false);\n  };\n\n  const handleDelete = () => {\n    deleteJobTenderApplication(\n      deleteItemID,\n      () => {\n        refreshData();\n        context.alert.success('Uspješno obrisano.');\n      },\n      () => {\n        context.alert.error('Greška. Brisanje nije moguće');\n      },\n    );\n\n    setDeleteItemID(0);\n    setShowDeleteModal(false);\n  };\n\n  const handleEdit = (id: number) => {\n    setEditItemId(id ?? 0);\n    setShowModal(true);\n  };\n\n  const toggleApplicationModal = (id?: number) => {\n    setShowModal(prev => !prev);\n\n    handleEdit(id || 0);\n  };\n\n  const editItem = applications?.items?.find((item: JobTenderApplication) => item.id === editItemId);\n\n  const canAddNewApplicants =\n    jobTender?.number_of_vacant_seats &&\n    jobTender?.number_of_vacant_seats >\n      tableData.filter((application: JobTenderApplication) => application.status === 'Izabran').length;\n\n  return (\n    <>\n      <TableHeader>\n        <Typography variant=\"bodyMedium\" content=\"Kandidati za ovaj oglas\" />\n        {canAddNewApplicants === true && (\n          <PlusButton onClick={() => toggleApplicationModal()}>\n            <PlusIcon width=\"12px\" height=\"12px\" stroke={Theme.palette.primary500} />\n          </PlusButton>\n        )}\n      </TableHeader>\n      <Table\n        tableHeads={applicationsTableHeads}\n        data={tableData || []}\n        style={{marginBottom: 22}}\n        isLoading={loading}\n        onRowClick={() =>\n          applications.items.find((item: any) => item.status === 'Na čekanju' && toggleApplicationModal(item.id))\n        }\n        tableActions={[\n          {\n            name: 'edit',\n            onClick: item => toggleApplicationModal(item.id),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            shouldRender: () => !!canAddNewApplicants,\n          },\n          {\n            name: 'delete',\n            onClick: item => {\n              setShowDeleteModal(true);\n              setDeleteItemID(item.id);\n            },\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: () => !!canAddNewApplicants,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={applications.total / 10}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={2}\n        previousLabel=\"Previous\"\n        nextLabel=\"Next\"\n        pageRangeDisplayed={3}\n      />\n      <DeleteModal\n        open={showDeleteModal}\n        onClose={() => {\n          handleCloseDeleteModal();\n        }}\n        handleDelete={handleDelete}\n      />\n      {showModal && (\n        <JobTenderApplicationModal\n          context={context}\n          countries={context?.countries || []}\n          selectedItem={editItem}\n          open={showModal}\n          onClose={() => setShowModal(false)}\n          alert={alert}\n          refetchList={refreshData}\n          jobTender={jobTender}\n          applicationIds={applications.items.map((item: JobTenderApplication) => item.id)}\n          {...props}\n        />\n      )}\n    </>\n  );\n};\nexport default JobTenderApplicationsList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderApplicationsList/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderInfo/jobTenderInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderInfo/styles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Theme' is defined but never used.","line":2,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import styled from 'styled-components';\nimport {Typography, Theme} from 'client-library';\n\nexport const Container = styled.div``;\nexport const InfoPreview = styled.div`\n  display: flex;\n`;\n\nexport const Details = styled.div`\n  display: flex;\n  gap: 20px;\n  margin-block: 22px;\n`;\n\nexport const Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const StyledLabel = styled(Typography)`\n  text-transform: uppercase;\n  font-weight: bold;\n  margin-right: 1rem;\n`;\n\nexport const StyledValue = styled(Typography)``;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 22px;\n`;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderModal/jobTenderModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":2,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2558,2561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2558,2561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4005,4008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4005,4008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4505,4508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4505,4508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Datepicker, Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport useJobTenderInsert from '../../services/graphql/jobTenders/useJobTenderInsert';\nimport {JobTendersModalProps} from '../../types/graphql/jobTenders';\nimport {FileUploadWrapper, ModalContentWrapper, Row} from '../education/modals/styles';\nimport {parseDateForBackend, parseToDate} from '../../utils/dateUtils';\nimport * as yup from 'yup';\nimport {yupResolver} from '@hookform/resolvers/yup';\n\nconst jobTenderSchema = yup.object().shape({\n  type: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.number(), title: yup.string()})\n    .required('Ovo polje je obavezno'),\n  organization_unit_id: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string(), title: yup.string()})\n    .required('Ovo polje je obavezno'),\n  date_of_start: yup.date().required('Ovo polje je obavezno'),\n  date_of_end: yup\n    .date()\n    .required('Ovo polje je obavezno')\n    .min(yup.ref('date_of_start'), 'Datum mora biti veći od datuma početka'),\n  serial_number: yup.string().required('Ovo polje je obavezno'),\n  id: yup.number(),\n  number_of_vacant_seats: yup.number().nullable(),\n});\n\nconst initialValues = {\n  id: 0,\n  organization_unit_id: undefined,\n  date_of_start: undefined,\n  date_of_end: undefined,\n  serial_number: '',\n  type: undefined,\n  description: '',\n  file_id: 0,\n  number_of_vacant_seats: 0,\n};\n\nexport const JobTenderModal: React.FC<JobTendersModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  organizationUnitsList,\n  jobTenderTypeOptions,\n  alert,\n  refetch,\n}) => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n    watch,\n    setValue,\n  } = useForm({resolver: yupResolver(jobTenderSchema)});\n\n  const {mutate, loading: isSaving} = useJobTenderInsert();\n\n  useEffect(() => {\n    if (selectedItem) {\n      reset({\n        ...selectedItem,\n        date_of_end: parseToDate(selectedItem.date_of_end),\n        date_of_start: parseToDate(selectedItem.date_of_start),\n        organization_unit_id: organizationUnitsList.find(org => org.id === selectedItem.organization_unit?.id),\n      });\n    }\n  }, [selectedItem]);\n\n  const {type} = watch();\n\n  const isNumOfVacantSeatsDisabled = type?.title === 'Javni oglas za predsjednika suda';\n\n  useEffect(() => {\n    if (isNumOfVacantSeatsDisabled) {\n      setValue('number_of_vacant_seats', null);\n    }\n  }, [type]);\n\n  const onSubmit = (values: any) => {\n    if (isSaving) return;\n\n    try {\n      mutate(\n        {\n          id: values.id,\n          organization_unit_id: values?.organization_unit_id?.id,\n          type: values?.type?.id,\n          description: '',\n          serial_number: values.serial_number,\n          date_of_start: parseDateForBackend(values?.date_of_start),\n          date_of_end: parseDateForBackend(values?.date_of_end),\n          file_id: values?.file_id,\n          number_of_vacant_seats: values?.number_of_vacant_seats,\n        },\n        () => {\n          alert.success('Uspješno sačuvano.');\n          refetch();\n          onClose();\n          reset(initialValues);\n        },\n        () => {\n          alert.success('Uspješno sačuvano.');\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset(initialValues);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <Row>\n            <Controller\n              name=\"type\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"TIP OGLASA:\"\n                  name={name}\n                  options={jobTenderTypeOptions}\n                  value={value as any}\n                  onChange={onChange}\n                  error={errors.type?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"organization_unit_id\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"ORGANIZACIONA JEDINICA:\"\n                  name={name}\n                  options={organizationUnitsList.slice(1)}\n                  value={value as any}\n                  onChange={onChange}\n                  error={errors.organization_unit_id?.message}\n                />\n              )}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"date_of_start\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"DATUM OBJAVE:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_start?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"date_of_end\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"OGLAS JE VALIDAN DO:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_end?.message}\n                />\n              )}\n            />\n          </Row>\n          <Row>\n            <Input {...register('serial_number')} label=\"BROJ OGLASA:\" error={errors.serial_number?.message} />\n            <Input\n              {...register('number_of_vacant_seats')}\n              label=\"BROJ UPRAŽNJENIH MJESTA:\"\n              type=\"number\"\n              value={watch('number_of_vacant_seats')?.toString()}\n              disabled={isNumOfVacantSeatsDisabled}\n            />\n          </Row>\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={item => console.log(item)}\n              note={<Typography variant=\"bodySmall\" content=\"Dokument oglasa\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n        </ModalContentWrapper>\n      }\n      title={selectedItem?.id ? 'IZMJENITE OGLAS' : 'DODAJTE NOVI OGLAS'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTendersList/jobTendersList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[896,899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[896,899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[928,931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[928,931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[961,964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[961,964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2027,2030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2027,2030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2070,2073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2070,2073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2333,2336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2333,2336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2389,2392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2389,2392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2676,2679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2676,2679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2783,2786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2783,2786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {Button, Divider, EditIconTwo, Pagination, Table, Theme, TrashIcon} from 'client-library';\nimport {FC, useState} from 'react';\nimport {JobTendersListFilters} from '../../screens/jobTenders';\nimport {tableHeads} from '../../screens/jobTenders/constants';\nimport {DeleteModal} from '../../shared/deleteModal/deleteModal';\nimport {JobTender, JobTendersResponse} from '../../types/graphql/jobTenders';\nimport {MicroserviceProps} from '../../types/micro-service-props';\nimport {Controls, FilterDropdown, Filters, Header, MainTitle, OverviewBox} from './styles';\nimport {statusOptions} from '../../constants';\n\nexport interface JobTendersListProps {\n  navigate: (path: string) => void;\n  toggleJobTenderImportModal: (item?: JobTender) => void;\n  onPageChange: (page: number) => void;\n  data: JobTendersResponse['data']['jobTenders_Overview'];\n  dropdownJobTenderType: any[];\n  organizationUnitsList: any[];\n  onFilterChange: (value: any, name: string) => void;\n  filters: JobTendersListFilters;\n  deleteJobTender: (id: number) => void;\n  context: MicroserviceProps;\n  loading: boolean;\n}\n\nconst JobTendersList: FC<JobTendersListProps> = ({\n  navigate,\n  toggleJobTenderImportModal,\n  onPageChange,\n  data,\n  dropdownJobTenderType,\n  organizationUnitsList,\n  onFilterChange,\n  filters,\n  deleteJobTender,\n  context,\n  loading,\n}) => {\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [deleteItemID, setDeleteItemID] = useState(0);\n\n  const handleCloseDeleteModal = () => {\n    setDeleteItemID(0);\n    setShowDeleteModal(false);\n  };\n\n  const handleDelete = () => {\n    deleteJobTender(deleteItemID);\n    setDeleteItemID(0);\n    setShowDeleteModal(false);\n  };\n\n  return (\n    <OverviewBox>\n      <MainTitle variant=\"bodyMedium\" content=\"PREGLED SVIH OGLASA\" />\n      {/*TODO: theme color */}\n      <Divider color=\"#615959\" height=\"1px\" />\n      <Header>\n        <Filters>\n          <FilterDropdown\n            label=\"TIP OGLASA:\"\n            options={dropdownJobTenderType as any}\n            value={filters.type_id as any}\n            name=\"type_id\"\n            onChange={value => onFilterChange(value, 'type_id')}\n            placeholder=\"Tip oglasa\"\n          />\n          <FilterDropdown\n            label=\"ORGANIZACIONA JEDINICA:\"\n            options={organizationUnitsList as any}\n            value={filters.organization_unit_id as any}\n            name=\"organization_unit_id\"\n            onChange={value => onFilterChange(value, 'organization_unit_id')}\n            placeholder=\"Odaberite organizacionu jedinicu\"\n          />\n          <FilterDropdown\n            label=\"STATUS:\"\n            options={statusOptions as any}\n            onChange={value => onFilterChange(value, 'active')}\n            value={filters?.active as any}\n            name=\"active\"\n            placeholder=\"Odaberite status\"\n          />\n        </Filters>\n        <Controls>\n          <Button\n            content=\"Dodaj novi oglas\"\n            variant=\"secondary\"\n            style={{width: 170}}\n            onClick={() => toggleJobTenderImportModal()}\n          />\n        </Controls>\n      </Header>\n      <Table\n        tableHeads={tableHeads}\n        data={data.items || []}\n        style={{marginBottom: 22}}\n        isLoading={loading}\n        onRowClick={(item: JobTender) => {\n          navigate(`/hr/job-tenders/job-tenders-list/${item.id}`);\n          context.breadcrumbs.add({\n            name: `${item.type?.title} - ${item.serial_number}`,\n            to: `/hr/job-tenders/job-tenders-list/${item.id}`,\n          });\n        }}\n        tableActions={[\n          {\n            name: 'edit',\n            onClick: item => toggleJobTenderImportModal(item),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n          },\n          {\n            name: 'delete',\n            onClick: item => {\n              setShowDeleteModal(true);\n              setDeleteItemID(item.id);\n            },\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={data.total / 10}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={2}\n        pageRangeDisplayed={3}\n      />\n      <DeleteModal\n        open={showDeleteModal}\n        onClose={() => {\n          handleCloseDeleteModal();\n        }}\n        handleDelete={handleDelete}\n      />\n    </OverviewBox>\n  );\n};\n\nexport default JobTendersList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTendersList/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/judgeNormModal/judgeNormModal.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":54,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":54,"endColumn":11,"fix":{"range":[1898,1908],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":55,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":55,"endColumn":11,"fix":{"range":[1925,1935],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":59,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":59,"endColumn":11,"fix":{"range":[2110,2120],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":60,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":60,"endColumn":9,"fix":{"range":[2223,2231],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2602,2605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2602,2605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4189,4192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4189,4192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4228,4231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4228,4231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5000,5003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5000,5003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5039,5042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5039,5042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Dropdown, Input, Modal} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {ModalProps} from '../../screens/employees/education/types';\nimport {topicOptions} from '../../screens/judges/constants';\nimport useJudgeNormsInsert from '../../services/graphql/judges/useJudgeNormInsert';\nimport {JudgeNormForm} from '../../types/graphql/judges';\nimport {parseDateForBackend} from '../../utils/dateUtils';\nimport {ModalContentWrapper, Row} from '../education/modals/styles';\n\nconst initialValues: JudgeNormForm = {\n  id: 0,\n  title: '',\n  user_profile_id: null,\n  number_of_norm_decrease: null,\n  number_of_items: null,\n  number_of_items_solved: null,\n  evaluation_id: null,\n  relocation_id: null,\n  date_of_evaluation: null,\n  date_of_evaluation_validity: null,\n  topic: null,\n};\n\nconst schema = yup.object().shape({\n  user_profile_id: yup.object().required('Ovo polje je obavezno'),\n  number_of_norm_decrease: yup\n    .number()\n    .transform(value => (Number.isNaN(value) ? null : value))\n    .nullable()\n    .required('Ovo polje je obavezno')\n    .min(0, 'Najmanji broj je 0')\n    .max(100, 'Najveći broj je 100'),\n  topic: yup.object().required('Ovo polje je obavezno'),\n  number_of_items: yup\n    .number()\n    .transform(value => (Number.isNaN(value) ? null : value))\n    .nullable()\n    .required('Ovo polje je obavezno'),\n  title: yup.string().required('Ovo polje je obavezno'),\n  number_of_items_solved: yup\n    .number()\n    .transform(value => (Number.isNaN(value) ? null : value))\n    .nullable()\n    .required('Ovo polje je obavezno'),\n});\n\nconst JudgeNormModal: React.FC<ModalProps> = ({alert, refetchList, open, onClose, selectedItem, dropdownData}) => {\n  const item = useMemo(() => {\n    return selectedItem\n      ? {\n          ...selectedItem,\n          user_profile_id:\n            selectedItem.user_profile_id != 0\n              ? dropdownData?.find(user => user.id === selectedItem.user_profile_id)\n              : undefined,\n          topic: selectedItem.topic ? topicOptions?.find(item => item.title === selectedItem.topic) : undefined,\n        }\n      : initialValues;\n  }, [selectedItem]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n    watch,\n  } = useForm({resolver: yupResolver(schema)});\n\n  const {mutate, loading: isSaving} = useJudgeNormsInsert();\n\n  useEffect(() => {\n    if (item) {\n      reset(item);\n    }\n  }, [item]);\n\n  const onSubmit = async (values: any) => {\n    if (isSaving) return;\n\n    try {\n      await mutate(\n        {\n          id: values?.id,\n          title: values?.title,\n          user_profile_id: values?.user_profile_id?.id,\n          topic: values?.topic?.title,\n          number_of_norm_decrease: values?.number_of_norm_decrease || 1,\n          number_of_items: values?.number_of_items || 1,\n          number_of_items_solved: values?.number_of_items_solved || 1,\n          evaluation_id: null,\n          relocation_id: values?.relocation?.id || 1,\n          date_of_evaluation: parseDateForBackend(values?.date_of_start),\n          date_of_evaluation_validity: parseDateForBackend(values?.date_of_end),\n        },\n        () => {\n          refetchList && refetchList();\n          reset();\n          alert.success('Uspješno sačuvano.');\n          onClose();\n        },\n        () => {\n          alert.error('Greška. Promjene nisu sačuvane.');\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset(item);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <Row>\n            <Controller\n              name=\"user_profile_id\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"SUDIJA:\"\n                  name={name}\n                  options={dropdownData as any}\n                  value={value as any}\n                  onChange={onChange}\n                  error={errors.user_profile_id?.message as string}\n                />\n              )}\n            />\n            <Input\n              {...register('number_of_norm_decrease')}\n              label=\"UMANJENJE NORME %:\"\n              error={errors.number_of_norm_decrease?.message as string}\n              type=\"number\"\n              value={watch('number_of_norm_decrease')?.toString()}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"topic\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"MATERIJA:\"\n                  name={name}\n                  options={topicOptions as any}\n                  value={value as any}\n                  onChange={onChange}\n                  error={errors.topic?.message as string}\n                />\n              )}\n            />\n            <Input\n              {...register('number_of_items')}\n              label=\"BROJ PREDMETA:\"\n              error={errors.number_of_items?.message as string}\n              type=\"number\"\n              value={watch('number_of_items')?.toString()}\n            />\n          </Row>\n          <Row>\n            <Input {...register('title')} label=\"NORMA:\" error={errors.title?.message as string} />\n            <Input\n              {...register('number_of_items_solved')}\n              label=\"RIJEŠENO PREDMETA:\"\n              error={errors.number_of_items_solved?.message as string}\n              type=\"number\"\n              value={watch('number_of_items_solved')?.toString()}\n            />\n          </Row>\n        </ModalContentWrapper>\n      }\n      title={selectedItem?.id ? 'IZMJENA NORME' : 'DODAJ NORMU'}\n    />\n  );\n};\n\nexport default JudgeNormModal;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/judgeNormModal/style.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/judgesList/judgesList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[583,586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[583,586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[608,611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[608,611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[658,661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[658,661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1701,1704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1701,1704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1986,1989],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1986,1989],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2034,2037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2034,2037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useMemo} from 'react';\nimport {Button, Divider, Pagination, Table} from 'client-library';\nimport {JudgesListFilters} from '../../screens/judges/judgeNorms/judges';\nimport {JudgeOverview} from '../../types/graphql/judges';\nimport {Controls, FilterDropdown, Filters, Header, MainTitle, OverviewBox} from './styles';\nimport {judgeTableHeads} from '../../screens/judges/judgeNorms/constants';\n\nexport interface JudgesListProps {\n  toggleJudgesNorms: (item?: JudgeOverview) => void;\n  onPageChange: (page: number) => void;\n  data: JudgeOverview[];\n  organizationUnitsList: any[];\n  usersUnitsList: any[];\n  total: number;\n  onFilterChange: (value: any, name: string) => void;\n  filters: JudgesListFilters;\n  addNorm: () => void;\n  loading: boolean;\n}\n\nconst JudgesList: React.FC<JudgesListProps> = ({\n  toggleJudgesNorms,\n  onPageChange,\n  data,\n  organizationUnitsList,\n  usersUnitsList,\n  total,\n  onFilterChange,\n  filters,\n  addNorm,\n  loading,\n}) => {\n  const list: JudgeOverview[] = useMemo(\n    () =>\n      data?.map((item: JudgeOverview) => ({\n        ...item,\n        evaluation_title: item?.norms[0]?.evaluation?.score ? item?.norms[0]?.evaluation?.score : '',\n        relocation_title: item?.norms[0]?.relocation?.location ? item?.norms[0]?.relocation?.location : '',\n      })),\n    [data],\n  );\n\n  return (\n    <OverviewBox>\n      <MainTitle variant=\"bodyMedium\" content=\"PREGLED SUDIJA I PREDSJEDNIKA\" />\n      {/*TODO: theme color */}\n      <Divider color=\"#615959\" height=\"1px\" />\n      <Header>\n        <Filters>\n          <FilterDropdown\n            label=\"ORGANIZACIONA JEDINICA:\"\n            options={organizationUnitsList}\n            value={filters.organization_unit as any}\n            name=\"organization_unit_id\"\n            onChange={value => onFilterChange(value, 'organization_unit')}\n            placeholder=\"Odaberite organizacionu jedinicu\"\n          />\n          <FilterDropdown\n            label=\"SUDIJA:\"\n            options={usersUnitsList as any}\n            value={filters.user_profile as any}\n            name=\"user_profile_id\"\n            onChange={value => onFilterChange(value, 'user_profile')}\n            placeholder=\"Odaberite sudiju\"\n            isSearchable\n          />\n        </Filters>\n        <Controls>\n          <Button content=\"Dodaj normu\" variant=\"secondary\" style={{width: 130}} onClick={() => addNorm()} />\n        </Controls>\n      </Header>\n      <Table\n        tableHeads={judgeTableHeads}\n        data={list}\n        style={{marginBottom: 22}}\n        isLoading={loading}\n        onRowClick={item => toggleJudgesNorms(item)}\n      />\n      <Pagination\n        pageCount={Math.ceil(total / 10)}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={2}\n        pageRangeDisplayed={3}\n      />\n    </OverviewBox>\n  );\n};\n\nexport default JudgesList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/judgesList/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/judgesNumbersList/judgesNumbersList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[903,906],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[903,906],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1016,1019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1016,1019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Button, Divider, EditIconTwo, Pagination, Table, Theme, TrashIcon, EyeIcon} from 'client-library';\nimport React, {useMemo, useState} from 'react';\nimport {judgesNumberResolutionTableHeads} from '../../screens/judges/judgeNorms/constants';\nimport {JudgesNumberListFilters} from '../../screens/judges/judgesNumberDecisions/judgesNumberDecision';\nimport useJudgeResolutionsDelete from '../../services/graphql/judges/useJudgeResolutionDelete';\nimport {DeleteModal} from '../../shared/deleteModal/deleteModal';\nimport {DropdownDataString} from '../../types/dropdownData';\nimport {JudgeResolution} from '../../types/graphql/judges';\nimport {Controls, Filters, Header, MainTitle, OverviewBox} from '../judgesList/styles';\n\nexport interface JudgesNumbersListProps {\n  data: JudgeResolution[];\n  total: number;\n  years: DropdownDataString[];\n  filters: JudgesNumberListFilters;\n  onFilterChange: (value: any, name: string) => void;\n  onPageChange: (page: number) => void;\n  navigate: (path: string) => void;\n  alert: any;\n  refetch: () => void;\n  loading: boolean;\n}\n\nconst JudgesNumbersList: React.FC<JudgesNumbersListProps> = ({\n  data,\n  total,\n  onPageChange,\n  navigate,\n  alert,\n  refetch,\n  loading,\n}) => {\n  const [deleteId, setDeleteId] = useState(0);\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const {mutate} = useJudgeResolutionsDelete();\n\n  const list: JudgeResolution[] = useMemo(\n    () =>\n      data?.map((item: JudgeResolution) => ({\n        ...item,\n      })),\n    [data],\n  );\n\n  const openDeleteModal = (id: number) => {\n    setDeleteId(id);\n    setDeleteModal(true);\n  };\n\n  const handleDelete = () => {\n    if (deleteId) {\n      mutate(\n        deleteId,\n        () => {\n          refetch();\n          alert.success('Uspješno obrisano.');\n          setDeleteModal(false);\n        },\n        () => {\n          alert.error('Greška. Brisanje nije moguće.');\n          setDeleteModal(false);\n        },\n      );\n    }\n  };\n\n  return (\n    <OverviewBox>\n      <MainTitle variant=\"bodyMedium\" content=\"PREGLED ODLUKA O BROJU SUDIJA I PREDSJEDNIKA\" />\n      <Divider color=\"#615959\" height=\"1px\" />\n      <Header>\n        <Filters></Filters>\n        <Controls>\n          <Button\n            content=\"Dodaj odluku\"\n            variant=\"secondary\"\n            style={{width: 130}}\n            onClick={() => navigate('/hr/judges/number-decision/new-decision')}\n          />\n        </Controls>\n      </Header>\n      <Table\n        tableHeads={judgesNumberResolutionTableHeads}\n        data={list}\n        style={{marginBottom: 22}}\n        isLoading={loading}\n        tableActions={[\n          {\n            name: 'edit',\n            onClick: row => navigate(`/hr/judges/number-decision/${row.id}`),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            shouldRender: (decision: JudgeResolution) => !!decision.active,\n          },\n          {\n            name: 'edit',\n            onClick: row => navigate(`/hr/judges/number-decision/${row.id}`),\n            icon: <EyeIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: (decision: JudgeResolution) => !decision.active,\n          },\n          {\n            name: 'delete',\n            onClick: item => openDeleteModal(item.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: (decision: JudgeResolution) => !decision.active,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={Math.ceil(total / 10)}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={2}\n        pageRangeDisplayed={3}\n      />\n      <DeleteModal open={deleteModal} onClose={() => setDeleteModal(false)} handleDelete={handleDelete} />\n    </OverviewBox>\n  );\n};\n\nexport default JudgesNumbersList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/landingPage/animation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/landingPage/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/newEmployeeSearch/newEmployeeSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/normsList/normsList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[822,825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[822,825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {EditIconTwo, Table, Theme, TrashIcon} from 'client-library';\nimport React, {useMemo, useState} from 'react';\nimport {Norms} from '../../types/graphql/judges';\nimport {FilterDropdown, Filters, Header, OverviewBox} from '../judgesList/styles';\nimport {DropdownDataString} from '../../types/dropdownData';\nimport {judgeNormsTableHeads} from '../../screens/judges/judgeNorms/constants';\nimport {topicOptions} from '../../screens/judges/constants';\n\ninterface NormsListProps {\n  data: Norms[];\n  toggleNormsModal: (item: Norms) => void;\n  handleDeleteIconClick: (id: number) => void;\n  loading: boolean;\n}\n\nconst NormsList: React.FC<NormsListProps> = ({data, toggleNormsModal, handleDeleteIconClick, loading}) => {\n  const [topic, setTopic] = useState<DropdownDataString | null>(null);\n\n  const onTopicChange = (value: any) => {\n    if (value.id === 'Sve') {\n      setTopic(null);\n      return;\n    }\n    setTopic(value);\n  };\n\n  const list = useMemo(() => {\n    const filteredData = topic ? data?.filter(norm => norm.topic === topic?.id) : data;\n    return filteredData?.map(item => ({\n      ...item,\n      number_of_items: Number(item.title) - Number(item.title) * (Number(item.number_of_norm_decrease) / 100),\n    }));\n  }, [data, topic]);\n\n  return (\n    <OverviewBox>\n      <Header>\n        <Filters>\n          <FilterDropdown\n            label=\"MATERIJA:\"\n            options={topicOptions}\n            value={topic}\n            name=\"topic\"\n            onChange={value => onTopicChange(value)}\n            placeholder=\"Odaberite materiju\"\n          />\n        </Filters>\n      </Header>\n      <Table\n        tableHeads={judgeNormsTableHeads}\n        data={list}\n        style={{marginBottom: 22}}\n        isLoading={loading}\n        tableActions={[\n          {\n            name: 'edit',\n            onClick: item => toggleNormsModal(item),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n          },\n          {\n            name: 'delete',\n            onClick: item => handleDeleteIconClick(item.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n    </OverviewBox>\n  );\n};\n\nexport default NormsList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/organizationUnitModal/organizationUnitModal.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":34,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":34,"endColumn":11,"fix":{"range":[940,950],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":35,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":35,"endColumn":11,"fix":{"range":[967,977],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":36,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":36,"endColumn":9,"fix":{"range":[1048,1056],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":38,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":38,"endColumn":11,"fix":{"range":[1068,1078],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":39,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":39,"endColumn":11,"fix":{"range":[1096,1106],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":40,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":40,"endColumn":9,"fix":{"range":[1177,1185],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1572,1575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1572,1575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2740,2743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2740,2743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import {Dropdown, Input, Modal} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport useAppContext from '../../context/useAppContext';\nimport useOrganizationUnitInsert from '../../services/graphql/organizationUnits/useInsertOrganizatonUnit';\nimport {OrganizationUnit} from '../../types/graphql/organizationUnits';\nimport {FormGroup, ModalContentWrapper} from './styles';\nimport {OrganizationUnitModalProps} from './types';\n\nconst initialValues: OrganizationUnit = {\n  id: 0,\n  parent_id: 0,\n  number_of_judges: 0,\n  title: '',\n  abbreviation: '',\n  description: '',\n  address: '',\n  color: '',\n  folder_id: 0,\n  icon: '',\n};\n\nexport const OrganizationalUnitModal: React.FC<OrganizationUnitModalProps> = ({\n  open,\n  onClose,\n  dropdownData,\n  organizationUnit,\n  selectedItem,\n  refetch,\n}) => {\n  const item = useMemo(() => {\n    return selectedItem\n      ? {\n          ...selectedItem,\n          parent_id: {id: organizationUnit?.id, title: organizationUnit?.title},\n        }\n      : {\n          ...initialValues,\n          parent_id: {id: organizationUnit?.id, title: organizationUnit?.title},\n        };\n  }, [selectedItem]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: item || initialValues});\n\n  const {alert} = useAppContext();\n\n  const {mutate, loading: isSaving} = useOrganizationUnitInsert();\n\n  useEffect(() => {\n    if (item) {\n      reset(item);\n    }\n  }, [item]);\n\n  const onSubmit = async (values: any) => {\n    if (isSaving) return;\n    const data = {\n      ...values,\n      parent_id: organizationUnit?.id,\n      number_of_judges: values?.number_of_judges || 0,\n      folder_id: values?.folder_id || 0,\n    };\n\n    delete data.job_positions_organization_units;\n\n    try {\n      mutate(\n        data,\n        () => {\n          alert.success('Uspješno sačuvano.');\n          refetch();\n          onClose();\n          reset(initialValues);\n        },\n        () => {\n          alert.error('Greška. Promjena nije sačuvana.');\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset(item);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <FormGroup>\n            <Controller\n              name=\"parent_id\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"PARENT:\"\n                  options={dropdownData || []}\n                  error={errors.parent_id?.message as string}\n                  isDisabled\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Input\n              {...register('title', {required: 'Ovo polje je obavezno'})}\n              label=\"NAZIV:\"\n              error={errors.title?.message as string}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Input\n              {...register('abbreviation', {required: 'Ovo polje je obavezno'})}\n              label=\"SKRAĆENICA:\"\n              error={errors.abbreviation?.message as string}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Input {...register('address')} label=\"ADRESA:\" />\n          </FormGroup>\n\n          <FormGroup>\n            <Input {...register('description')} textarea label=\"OPIS:\" />\n          </FormGroup>\n        </ModalContentWrapper>\n      }\n      title={'DODAJ NOVO ODJELJENJE'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/organizationUnitModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/organizationUnitModal/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[125,128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[125,128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[187,190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[187,190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {DropdownDataNumber} from '../../types/dropdownData';\n\nexport interface OrganizationUnitModalProps {\n  selectedItem?: any;\n  open: boolean;\n  onClose: () => void;\n  dropdownData?: any;\n  action?: string;\n  organizationUnit?: DropdownDataNumber;\n  refetch: () => void;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/permitEntryModal/permitEntryModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1227,1230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1227,1230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1908,1911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1908,1911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1924,1927],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1924,1927],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2154,2157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2154,2157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2800,2803],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2800,2803],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2903,2906],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2903,2906],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3312,3315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3312,3315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5248,5251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5248,5251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8632,8635],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8632,8635],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Checkbox, Datepicker, Dropdown, Input} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {cityData} from '../../constants';\nimport useInsertForeignerPermits from '../../services/graphql/foreignerPermits/useInsertForeignerPermit';\nimport {ForeignerPermit} from '../../types/graphql/foreignerPermits';\nimport {parseDateForBackend, parseToDate} from '../../utils/dateUtils';\nimport {CheckboxContainer, CheckboxLabel, ColumnTitle, Form, FormColumn, FormGroup, PermitModal} from './styles';\n\nconst permitSchema = yup.object().shape({\n  work_permit_number: yup.string().required('Ovo polje je obavezno'),\n  work_permit_issuer: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string(), title: yup.string()})\n    .required('Ovo polje je obavezno'),\n  work_permit_date_of_start: yup.date().required('Ovo polje je obavezno'),\n  work_permit_date_of_end: yup\n    .date()\n    .nullable()\n    .min(yup.ref('work_permit_date_of_start'), 'Datum isteka ne može biti prije datuma izdavanja')\n    .when('residence_permit_indefinite_length', {\n      is: (value: any) => !value,\n      then: schema => schema.required('Ovo polje je obavezno'),\n    }),\n  residence_permit_date_of_end: yup.date(),\n  residence_permit_number: yup.string().required('Ovo polje je obavezno'),\n  country_of_origin: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string(), title: yup.string()})\n    .required('Ovo polje je obavezno'),\n  user_profile_id: yup.number().required('Ovo polje je obavezno'),\n  residence_permit_indefinite_length: yup.boolean().required('Ovo polje je obavezno'),\n});\n\ninterface PermitEntryModalProps {\n  open: boolean;\n  onClose: () => void;\n  permitData?: ForeignerPermit;\n  id: number;\n  refetchList: () => void;\n  countries: any[];\n  alert: any;\n}\n\nconst PermitEntryModal: React.FC<PermitEntryModalProps> = ({\n  onClose,\n  open,\n  permitData,\n  id,\n  refetchList,\n  countries,\n  alert,\n}) => {\n  const countryOptions = useMemo(() => {\n    return countries?.map((country: any) => {\n      return {\n        id: country.alpha3,\n        title: country.name,\n      };\n    });\n  }, [countries]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: {errors},\n    reset,\n  } = useForm({\n    defaultValues: {user_profile_id: id ?? 0, residence_permit_indefinite_length: false},\n    resolver: yupResolver(permitSchema),\n  });\n\n  const indefinite = watch('residence_permit_indefinite_length');\n\n  const {mutate, loading: isSaving} = useInsertForeignerPermits();\n\n  useEffect(() => {\n    if (permitData) {\n      reset({\n        ...permitData,\n        country_of_origin: countryOptions.find((country: any) => country.id === permitData.country_of_origin),\n        work_permit_issuer: cityData.find((city: any) => city.id === permitData.work_permit_issuer),\n        work_permit_date_of_start: parseToDate(permitData.work_permit_date_of_start) ?? undefined,\n        work_permit_date_of_end: parseToDate(permitData.work_permit_date_of_end),\n        residence_permit_date_of_end: parseToDate(permitData.residence_permit_date_of_end) ?? undefined,\n      });\n    }\n  }, [permitData]);\n\n  const onSubmit = async (values: any) => {\n    if (isSaving) return;\n\n    const data = {\n      ...values,\n      work_permit_issuer: values.work_permit_issuer.id,\n      country_of_origin: values.country_of_origin.id,\n      user_profile_id: id,\n      work_permit_date_of_start: parseDateForBackend(values.work_permit_date_of_start),\n      work_permit_date_of_end: values.residence_permit_indefinite_length\n        ? null\n        : parseDateForBackend(values.work_permit_date_of_end),\n      residence_permit_date_of_end: parseDateForBackend(values.residence_permit_date_of_end),\n      residence_permit_file_id: values.residence_permit_file_id || 0,\n      work_permit_file_id: values.work_permit_file_id || 0,\n    };\n\n    try {\n      mutate(data, () => {\n        refetchList();\n        alert.success('Uspješno sačuvano.');\n        onClose();\n        reset();\n      });\n    } catch (e) {\n      alert.error('Greška. Promjene nisu sačuvane.');\n      console.log(e);\n    }\n  };\n\n  return (\n    <PermitModal\n      onClose={() => {\n        reset();\n        onClose();\n      }}\n      open={open}\n      title=\"DODAJTE DOZVOLU\"\n      style={{width: '1020px'}}\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <Form>\n          <FormColumn>\n            <ColumnTitle content=\"PODACI O RADNOJ DOZVOLI\" variant=\"bodySmall\" style={{fontWeight: 600}} />\n            <FormGroup>\n              <Input\n                {...register('work_permit_number')}\n                label=\"BROJ:\"\n                error={errors.work_permit_number?.message}\n                placeholder=\"Unesite broj radne dozvole\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Controller\n                name=\"work_permit_issuer\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"IZDAVALAC:\"\n                    options={cityData}\n                    error={errors.work_permit_issuer?.message}\n                    placeholder=\"Izaberite izdavaoca\"\n                  />\n                )}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Controller\n                name=\"work_permit_date_of_start\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    onChange={onChange}\n                    label=\"VAŽI OD:\"\n                    name={name}\n                    selected={value}\n                    error={errors.work_permit_date_of_start?.message}\n                  />\n                )}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Controller\n                name=\"work_permit_date_of_end\"\n                control={control}\n                render={({field: {onChange, name, value}}) => {\n                  return (\n                    <Datepicker\n                      onChange={onChange}\n                      label=\"VAŽI DO:\"\n                      name={name}\n                      selected={value}\n                      error={errors.work_permit_date_of_end?.message}\n                      disabled={indefinite}\n                    />\n                  );\n                }}\n              />\n            </FormGroup>\n\n            <Controller\n              name=\"residence_permit_indefinite_length\"\n              control={control}\n              render={({field: {name, value, onChange}}) => {\n                return (\n                  <CheckboxContainer>\n                    <Checkbox onChange={onChange} name={name} checked={value} />\n                    <CheckboxLabel content=\"Neograničeno Trajanje\" variant=\"bodySmall\" />\n                  </CheckboxContainer>\n                );\n              }}\n            />\n          </FormColumn>\n          <FormColumn>\n            <ColumnTitle content=\"PODACI O BORAVIŠNOJ VIZI\" variant=\"bodySmall\" style={{fontWeight: 600}} />\n            <FormGroup>\n              <Input\n                {...register('residence_permit_number')}\n                label=\"BROJ PASOŠA:\"\n                error={errors.residence_permit_number?.message}\n                placeholder=\"Unesite broj pasoša\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Controller\n                name=\"residence_permit_date_of_end\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    onChange={onChange}\n                    label=\"VAŽI DO:\"\n                    name={name}\n                    selected={value}\n                    error={errors.residence_permit_date_of_end?.message}\n                  />\n                )}\n              />\n            </FormGroup>\n          </FormColumn>\n          <FormColumn>\n            <ColumnTitle content=\"REZIDENTSTVO\" variant=\"bodySmall\" style={{fontWeight: 600}} />\n            <FormGroup>\n              <Controller\n                name=\"country_of_origin\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    label=\"DRŽAVA:\"\n                    name={name}\n                    options={countryOptions}\n                    error={errors.country_of_origin?.message}\n                    placeholder=\"Izaberite državu\"\n                    isSearchable\n                  />\n                )}\n              />\n            </FormGroup>\n          </FormColumn>\n        </Form>\n      }\n    />\n  );\n};\n\nexport default PermitEntryModal;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/permitEntryModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/revisionModal/revisionModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'revisionPriorityOptions' is defined but never used.","line":4,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownDataNumber' is defined but never used.","line":14,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1212,1215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1212,1215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2309,2312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2309,2312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2601,2604],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2601,2604],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3014,3017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3014,3017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3170,3173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3170,3173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4594,4597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4594,4597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4770,4773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4770,4773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4925,4928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4925,4928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5072,5075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5072,5075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5224,5227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5224,5227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6689,6692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6689,6692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":215,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7415,7418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7415,7418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7506,7509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7506,7509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":234,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8133,8136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8133,8136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":252,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":252,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8811,8814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8811,8814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":288,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10226,10229],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10226,10229],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":305,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":305,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10838,10841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10838,10841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Datepicker, Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport React, {useEffect} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {quarterOptions, revisionPriorityOptions} from '../../constants';\nimport useGetOrganizationUnits from '../../services/graphql/organizationUnits/useGetOrganizationUnits';\nimport useRevisionDetails from '../../services/graphql/revision/useRevisionDetails';\nimport useRevisionInsert from '../../services/graphql/revision/useRevisionInsert';\nimport useRevisionOverview from '../../services/graphql/revision/useRevisionOverview';\nimport useSettingsDropdownOverview from '../../services/graphql/settingsDropdown/useSettingsDropdownOverview';\nimport useSuppliersOverview from '../../services/graphql/suppliers/useGetSuppliersOverview';\nimport {revisionInsertItem} from '../../types/graphql/revisionInsert';\nimport {Column, FileUploadWrapper, FormGroup, ModalForm, ModalSection, Row} from './styles';\nimport {FormGroupFullWidth} from '../revisionTipsModal/styles';\nimport {DropdownDataNumber} from '../../types/dropdownData';\n\ninterface revisionProps {\n  open: boolean;\n  onClose: () => void;\n  refetchList: () => void;\n  alert: any;\n  id: number;\n  planId: number;\n}\n\nconst InitialValues = {\n  id: null,\n  title: '',\n  plan_id: 0,\n  serial_number: '',\n  date_of_revision: '',\n  revision_priority: '',\n  revision_quartal: '',\n  internal_revision_subject_id: [],\n  external_revision_subject_id: null,\n  revisor_id: null,\n  revision_type_id: null,\n};\n\nexport const RevisionModal: React.FC<revisionProps> = ({open, onClose, alert, refetchList, id, planId}) => {\n  const {revisionDetails} = useRevisionDetails(id);\n  const {mutate, loading: isSaving} = useRevisionInsert();\n  const {suppliers} = useSuppliersOverview();\n  const {organizationUnits} = useGetOrganizationUnits(undefined);\n  const {data} = useRevisionOverview({\n    page: 1000,\n    size: 1000,\n    plan_id: planId,\n    internal_revision_subject_id: 0,\n    revision_type_id: 0,\n    revisor_id: 0,\n  });\n\n  const {data: revisionTypes} = useSettingsDropdownOverview({entity: 'revision_types'});\n\n  const revisionsList = revisionTypes?.map(unit => {\n    return {\n      id: unit.id,\n      title: unit.title,\n    };\n  });\n\n  const revisorsList = data?.revisors?.map((unit: any) => {\n    return {\n      id: unit.id,\n      title: unit.title,\n    };\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors},\n    control,\n    reset,\n    watch,\n    setValue,\n  } = useForm({defaultValues: revisionDetails || InitialValues});\n\n  const onSubmit = (values: any) => {\n    if (isSaving) return;\n\n    const data: revisionInsertItem = {\n      id: values?.id,\n      title: values?.title || null,\n      plan_id: planId,\n      serial_number: values?.serial_number || null,\n      date_of_revision: values?.date_of_revision || null,\n      revision_quartal: values?.revision_quartal.id || null,\n      internal_revision_subject_id: values?.internal_revision_subject_id?.map((item: any) => item.value),\n      external_revision_subject_id: values?.external_revision_subject_id?.id || null,\n      revisor_id: values?.revisor_id?.map((item: any) => item.value),\n      revision_type_id: values?.revision_type_id.id || null,\n    };\n\n    mutate(\n      data,\n      () => {\n        refetchList();\n        onClose();\n        reset(InitialValues);\n        alert.success(revisionDetails?.item?.id ? 'Revizija uspješno sačuvan.' : 'Revizija je uspešno dodat.');\n      },\n      () => {\n        alert.error(\n          revisionDetails?.item.id\n            ? 'Došlo je do greške prilikom izmjene revizije.'\n            : 'Došlo je do greške prilikom dodavanja revizije.',\n        );\n      },\n    );\n  };\n\n  const internalSubject = watch('internal_revision_subject_id');\n  const externalSubject = watch('external_revision_subject_id');\n\n  useEffect(() => {\n    if (internalSubject) {\n      setValue('external_revision_subject_id', null);\n    }\n  }, [internalSubject, setValue]);\n\n  useEffect(() => {\n    if (externalSubject) {\n      setValue('internal_revision_subject_id', null);\n    }\n  }, [externalSubject, setValue]);\n\n  useEffect(() => {\n    if (revisionDetails && revisionDetails.item && id && revisionDetails.status === 'success') {\n      reset({\n        id: revisionDetails.item.id,\n        title: revisionDetails.item.title,\n        plan_id: revisionDetails.item.plan_id,\n        serial_number: revisionDetails.item.serial_number,\n        date_of_revision: revisionDetails.item.date_of_revision,\n        revision_quartal: quarterOptions.find(\n          (quarterOptions: any) => quarterOptions.id === revisionDetails.item.revision_quartal,\n        ),\n        internal_revision_subject_id: revisionDetails.item.internal_revision_subject.map((item: any) => ({\n          value: item.id,\n          label: item.title,\n        })),\n        external_revision_subject_id: suppliers.find(\n          (suppliers: any) => suppliers.id === revisionDetails.item.external_revision_subject.id,\n        ),\n        revisor_id: revisionDetails.item.revisor.map((item: any) => ({\n          value: item.id,\n          label: item.title,\n        })),\n        revision_type_id: revisionsList?.find(\n          (revisionsList: any) => revisionsList.title === revisionDetails.item.revision_type.title,\n        ),\n      });\n    }\n  }, [revisionDetails]);\n\n  return (\n    <Modal\n      onClose={() => onClose()}\n      open={open}\n      title={'DODAJ REVIZIJU'}\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      width={650}\n      content={\n        <ModalForm>\n          <ModalSection>\n            <Row>\n              <FormGroup>\n                <Input\n                  {...register('title', {required: 'Ovo polje je obavezno'})}\n                  label=\"NAZIV REVIZIJE\"\n                  placeholder=\"Unesite naziv\"\n                  error={errors.title?.message as string}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  {...register('serial_number', {required: 'Ovo polje je obavezno'})}\n                  label=\"BROJ REVIZIJE\"\n                  placeholder=\"Unesite broj\"\n                  error={errors.title?.message as string}\n                />\n              </FormGroup>\n            </Row>\n\n            <Column>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"internal_revision_subject_id\"\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={organizationUnits}\n                      error={errors.internal_revision_subject_id?.message as string}\n                      placeholder=\"Izaberite subjekt\"\n                      label=\"SUBJEKT REVIZIJE (interna):\"\n                      isMulti\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"external_revision_subject_id\"\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={suppliers as any}\n                      error={errors.external_revision_subject_id?.message as string}\n                      placeholder=\"Izaberite subjekt\"\n                      label=\"SUBJEKT REVIZIJE (eksterna):\"\n                    />\n                  )}\n                />\n              </FormGroup>\n            </Column>\n            <Row>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"revisor_id\"\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={revisorsList || []}\n                      error={errors.revisor_id?.message as string}\n                      placeholder=\"Izaberite revizora\"\n                      label=\"REVIZOR\"\n                      isMulti\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"revision_type_id\"\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={revisionsList || []}\n                      error={errors.revision_type_id?.message as string}\n                      placeholder=\"Izaberite vrstu revizije\"\n                      label=\"VRSTA REVIZIJE\"\n                    />\n                  )}\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Controller\n                  name=\"date_of_revision\"\n                  control={control}\n                  rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {onChange, name, value}}) => (\n                    <Datepicker\n                      onChange={onChange}\n                      label=\"DATUM REVIZIJE:\"\n                      name={name}\n                      selected={value ? new Date(value) : ''}\n                      error={errors.date_of_revision?.message as string}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroupFullWidth>\n                <Controller\n                  control={control}\n                  name=\"revision_quartal\"\n                  rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={quarterOptions}\n                      error={errors.revision_quartal?.message as string}\n                      placeholder=\"Izaberite kvartal\"\n                      label=\"KVARTAL ZA SPROVOĐENJE REVIZIJE:\"\n                    />\n                  )}\n                />\n              </FormGroupFullWidth>\n            </Row>\n          </ModalSection>\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={(item: any) => console.log(item)}\n              note={<Typography variant=\"bodySmall\" content=\"Upload dokumenta\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n        </ModalForm>\n      }\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/revisionModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/revisionPlanModal/revisionPlanModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[576,579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[576,579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1155,1158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1155,1158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Dropdown, Input} from 'client-library';\nimport React, {useEffect} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport useRevisionPlanDetails from '../../services/graphql/revisionsPlans/useRevisionPlanDetails';\nimport useRevisionPlanInsert from '../../services/graphql/revisionsPlans/useRevisionPlanInsert';\nimport {yearsForDropdown} from '../../utils/constants';\nimport {FormGroup, ModalForm, ModalSection, RevisionModal} from './styles';\n\ninterface RevisionPlanProps {\n  open: boolean;\n  onClose: () => void;\n  refetchList: () => void;\n  alert: any;\n  id: number;\n}\n\nconst InitialValues = {\n  name: '',\n  year: '',\n};\n\nexport const RevisionPlanModal: React.FC<RevisionPlanProps> = ({open, onClose, alert, refetchList, id}) => {\n  const {data: planDetails} = useRevisionPlanDetails(id);\n  const {mutate, loading: isSaving} = useRevisionPlanInsert();\n\n  const yearOptions = yearsForDropdown(1).map(year => ({id: year.id, title: year.title}));\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors},\n    control,\n    reset,\n  } = useForm({defaultValues: planDetails || InitialValues});\n\n  const onSubmit = (values: any) => {\n    if (isSaving) return;\n\n    const data = {\n      ...values,\n      name: values?.name,\n      year: values?.year.id.toString(),\n    };\n\n    mutate(\n      data,\n      () => {\n        refetchList();\n        onClose();\n        reset(InitialValues);\n        alert.success(planDetails.item.id ? 'Plan uspješno sačuvan.' : 'Plan je uspešno dodat.');\n      },\n      () => {\n        alert.error(\n          planDetails.item.id\n            ? 'Došlo je do greške prilikom izmjene plana.'\n            : 'Došlo je do greške prilikom dodavanja plana.',\n        );\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (planDetails && planDetails.item && id && planDetails.status === 'success') {\n      reset({\n        name: planDetails.item.name,\n        id: planDetails.item.id,\n        year: yearOptions.find(yearOption => yearOption.title === planDetails?.item.year),\n      });\n    }\n  }, [planDetails]);\n\n  return (\n    <RevisionModal\n      onClose={() => onClose()}\n      open={open}\n      title={'DODAJ PLAN'}\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      content={\n        <ModalForm>\n          <ModalSection>\n            <FormGroup>\n              <Controller\n                control={control}\n                name=\"year\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                render={({field: {name, value, onChange}}) => (\n                  <Dropdown\n                    name={name}\n                    value={value}\n                    onChange={onChange}\n                    options={yearOptions || []}\n                    error={errors.year?.message as string}\n                    placeholder=\"Izaberite godinu\"\n                    label=\"GODINA\"\n                  />\n                )}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                {...register('name', {required: 'Ovo polje je obavezno'})}\n                label=\"NAZIV PLANA\"\n                placeholder=\"Unesite naziv\"\n                error={errors.name?.message as string}\n              />\n            </FormGroup>\n          </ModalSection>\n        </ModalForm>\n      }\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/revisionPlanModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/revisionTipsModal/revisionTipsModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1046,1049],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1046,1049],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1743,1746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1743,1746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1830,1833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1830,1833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2274,2277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2274,2277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2383,2386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2383,2386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4232,4235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4232,4235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4734,4737],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4734,4737],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5045,5048],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5045,5048],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5203,5206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5203,5206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5377,5380],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5377,5380],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":219,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8161,8164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8161,8164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":254,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9526,9529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9526,9529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":291,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":291,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10837,10840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10837,10840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":307,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11524,11527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11524,11527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":327,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":327,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12311,12314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12311,12314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":343,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":343,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12979,12982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12979,12982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Datepicker, Dropdown, Input, FileUpload, Typography} from 'client-library';\nimport React, {useEffect, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {revisionDeadlineOptions, revisionPriorityOptions, revisionStatusOptions} from '../../constants';\nimport useRevisionTipsDetails from '../../services/graphql/revisionTips/useRevisionTipsDetails';\nimport useRevisionTipsInsert from '../../services/graphql/revisionTips/useRevisionTipsInsert';\nimport useRevisionTipsOverview from '../../services/graphql/revisionTips/useRevisionTipsOverview';\nimport {DropdownDataString} from '../../types/dropdownData';\nimport {MicroserviceProps} from '../../types/micro-service-props';\nimport {parseDate, parseDateForBackend} from '../../utils/dateUtils';\nimport {\n  FileUploadWrapper,\n  FormGroup,\n  FormGroupFullWidth,\n  ModalForm,\n  ModalSection,\n  ModalSectionTitle,\n  RevisionModal,\n  Row,\n} from './styles';\n\ninterface revisionPlanProps {\n  open: boolean;\n  onClose: () => void;\n  refetchList: () => void;\n  alert: any;\n  id: number;\n  revisionId: number;\n  context: MicroserviceProps;\n}\n\nconst InitialValues = {\n  user_profile_id: null,\n  date_of_accept: '',\n  due_date: null,\n  date_of_reject: '',\n  date_of_execution: '',\n  recommendation: '',\n  revision_priority: '',\n};\n\nexport const RevisionTipsModal: React.FC<revisionPlanProps> = ({\n  open,\n  onClose,\n  alert,\n  refetchList,\n  id,\n  revisionId,\n  context,\n}) => {\n  const {data: revisionTipsDetails} = useRevisionTipsDetails(id);\n  const {mutate, loading: isSaving} = useRevisionTipsInsert();\n  const {data} = useRevisionTipsOverview({page: 1000, size: 1000, revision_id: revisionId});\n  const [dateOfImplementation, setDateOfImplementation] = useState<any>();\n  const [secondDateOfImplementation, setSecondDateOfImplementation] = useState<any>();\n\n  const location = context?.navigation?.location;\n  const dateOfRevision = location?.state?.dateOfRevision;\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors},\n    control,\n    reset,\n    watch,\n  } = useForm({defaultValues: revisionTipsDetails || InitialValues});\n\n  const implementationMonthSpan = watch('due_date');\n  const secondMonthSpan = watch('new_due_date');\n\n  const revisorsList = data?.revisors?.map((unit: any) => {\n    return {\n      id: unit.id,\n      title: unit.title,\n    };\n  });\n\n  const onSubmit = (values: any) => {\n    if (isSaving) return;\n\n    const data = {\n      ...values,\n      responsible_person: values?.responsible_person || '',\n      date_of_accept: parseDateForBackend(values?.date_of_accept) ?? undefined,\n      due_date: values?.due_date.id ?? undefined,\n      date_of_reject: parseDateForBackend(values?.date_of_reject) ?? undefined,\n      date_of_execution: parseDateForBackend(dateOfImplementation) ?? undefined,\n      new_date_of_execution: parseDateForBackend(secondDateOfImplementation) ?? undefined,\n      recommendation: values?.recommendation || '',\n      revision_id: revisionId,\n      status: values.status?.id || '',\n      documents: values.documents || '',\n      reasons_for_non_executing: values.reasons_for_non_executing || '',\n      user_profile_id: values?.user_profile_id?.id || null,\n      new_due_date: values?.new_due_date?.id,\n      revision_priority: values?.revision_priority.id || null,\n      end_date: parseDateForBackend(values?.end_date) ?? undefined,\n    };\n\n    mutate(\n      data,\n      () => {\n        refetchList();\n        onClose();\n        reset(InitialValues);\n        alert.success(revisionTipsDetails.item.id ? 'Preporuka uspješno sačuvana.' : 'Preporuka je uspešno dodata.');\n      },\n      () => {\n        alert.error(\n          revisionTipsDetails.item.id\n            ? 'Došlo je do greške prilikom izmjene preporuke.'\n            : 'Došlo je do greške prilikom dodavanja preporuke.',\n        );\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (revisionTipsDetails && revisionTipsDetails.item && id && revisionTipsDetails.status === 'success') {\n      reset({\n        id: id,\n        responsible_person: revisionTipsDetails.item.responsible_person,\n        date_of_accept: revisionTipsDetails.item.date_of_accept,\n        due_date: revisionDeadlineOptions.find(\n          (revisionDeadlineOptions: any) => revisionDeadlineOptions.id === revisionTipsDetails.item.due_date,\n        ),\n        date_of_reject: revisionTipsDetails.item.date_of_reject,\n        date_of_execution: revisionTipsDetails.item.date_of_execution,\n        new_date_of_execution: revisionTipsDetails.item.new_date_of_execution,\n        recommendation: revisionTipsDetails.item.recommendation,\n        revision_id: revisionTipsDetails.item.revision_id,\n        status: revisionStatusOptions.find(\n          (revisionStatusOptions: any) => revisionStatusOptions.id === revisionTipsDetails.item.status,\n        ),\n        documents: revisionTipsDetails.item.documents,\n        reasons_for_non_executing: revisionTipsDetails.item.reasons_for_non_executing,\n        new_due_date: revisionDeadlineOptions.find(\n          (revisionDeadlineOptions: any) => revisionDeadlineOptions.id === revisionTipsDetails.item.new_due_date,\n        ),\n        user_profile_id: revisorsList.find(\n          (revisorsList: any) => revisorsList.id === revisionTipsDetails.item.user_profile.id,\n        ),\n        revision_priority: revisionPriorityOptions.find(\n          (revisionPriorityOptions: any) => revisionPriorityOptions.id === revisionTipsDetails.item.revision_priority,\n        ),\n        end_date: revisionTipsDetails.item.end_date,\n      });\n    }\n  }, [revisionTipsDetails]);\n\n  const calculateDateOfImplementation = (revisionDate: string, monthSpan: DropdownDataString | null) => {\n    const parsedDateOfRevision = new Date(revisionDate);\n    const monthsToAdd = Number(monthSpan);\n    parsedDateOfRevision.setMonth(parsedDateOfRevision.getMonth() + monthsToAdd);\n    return parsedDateOfRevision;\n  };\n\n  useEffect(() => {\n    if (dateOfRevision && implementationMonthSpan) {\n      const formattedDate = calculateDateOfImplementation(dateOfRevision, implementationMonthSpan.id);\n      setDateOfImplementation(formattedDate);\n    }\n\n    if (implementationMonthSpan && secondMonthSpan) {\n      const formattedSecondDate = calculateDateOfImplementation(dateOfImplementation, secondMonthSpan.id);\n      setSecondDateOfImplementation(formattedSecondDate);\n    }\n  }, [dateOfRevision, implementationMonthSpan, secondMonthSpan]);\n\n  return (\n    <RevisionModal\n      onClose={() => onClose()}\n      open={open}\n      title={'PREPORUKE'}\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      content={\n        <ModalForm>\n          <ModalSection>\n            <ModalSectionTitle content=\"PREPORUKE REVIZIJE:\" variant=\"bodyMedium\" />\n            <Row>\n              <FormGroup>\n                <Input\n                  {...register('responsible_person', {\n                    required: 'Ovo polje je obavezno',\n                  })}\n                  error={errors.responsible_person?.message as string}\n                  placeholder=\"Unesite odgovorno lice\"\n                  label=\"ODGOVORNO LICE ZA PROVOĐENJE PREPORUKE:\"\n                />\n              </FormGroup>\n              <FormGroup>\n                <Controller\n                  name=\"date_of_accept\"\n                  control={control}\n                  render={({field: {onChange, name, value}}) => (\n                    <Datepicker\n                      onChange={onChange}\n                      label=\"DATUM PRIHVATANJA AKCIONOG PLANA:\"\n                      name={name}\n                      selected={value ? new Date(value) : ''}\n                    />\n                  )}\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"due_date\"\n                  rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={revisionDeadlineOptions}\n                      error={errors.due_date?.message as string}\n                      placeholder=\"Izaberite rok\"\n                      label=\"ROK SPROVOĐENJA PREPORUKE:\"\n                      isDisabled={revisionTipsDetails?.item?.new_due_date && true}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Controller\n                  name=\"date_of_reject\"\n                  control={control}\n                  render={({field: {onChange, name, value}}) => (\n                    <Datepicker\n                      onChange={onChange}\n                      label=\"DATUM NEPRIHVATANJA PREPORUKE:\"\n                      name={name}\n                      selected={value ? new Date(value) : ''}\n                    />\n                  )}\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"revision_priority\"\n                  rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={revisionPriorityOptions}\n                      error={errors.revision_priority?.message as string}\n                      placeholder=\"Izaberite prioritet revizije\"\n                      label=\"PRIORITET REVIZIJE:\"\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  {...register('date_of_execution')}\n                  label=\"DATUM SPROVOĐENJA PREPORUKE:\"\n                  value={dateOfImplementation && parseDate(dateOfImplementation)}\n                  disabled\n                />\n              </FormGroup>\n            </Row>\n\n            <FormGroupFullWidth>\n              <Input\n                {...register('recommendation', {\n                  required: 'Ovo polje je obavezno',\n                })}\n                textarea\n                label=\"PREPORUKA:\"\n                placeholder=\"Unesite preporuku\"\n                error={errors.recommendation?.message as string}\n              />\n            </FormGroupFullWidth>\n\n            <FileUploadWrapper>\n              <FileUpload\n                icon={<></>}\n                style={{width: '100%'}}\n                variant=\"secondary\"\n                onUpload={(item: any) => console.log(item)}\n                note={<Typography variant=\"bodySmall\" content=\"Upload dokumenta\" />}\n                buttonText=\"Učitaj\"\n              />\n            </FileUploadWrapper>\n            {id > 0 && (\n              <ModalSection>\n                <ModalSectionTitle content=\"SPROVOĐENJE REVIZIJE:\" variant=\"bodyMedium\" />\n                <Row>\n                  <FormGroup>\n                    <Controller\n                      control={control}\n                      name=\"status\"\n                      render={({field: {name, value, onChange}}) => (\n                        <Dropdown\n                          name={name}\n                          value={value as any}\n                          onChange={onChange}\n                          options={revisionStatusOptions}\n                          label=\"STATUS SPROVOĐENJA:\"\n                        />\n                      )}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Input {...register('documents')} label=\"REF. DOKUMENTA:\" />\n                  </FormGroup>\n                </Row>\n                <Row>\n                  <FormGroup>\n                    <Controller\n                      control={control}\n                      name=\"user_profile_id\"\n                      render={({field: {name, value, onChange}}) => (\n                        <Dropdown\n                          name={name}\n                          value={value as any}\n                          onChange={onChange}\n                          options={revisorsList || []}\n                          placeholder=\"Izaberite revizora\"\n                          label=\"IMPLEMENTACIJU PREPORUKE POTVRDIO:\"\n                        />\n                      )}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Controller\n                      control={control}\n                      name=\"new_due_date\"\n                      render={({field: {name, value, onChange}}) => (\n                        <Dropdown\n                          name={name}\n                          value={value as any}\n                          onChange={onChange}\n                          options={revisionDeadlineOptions}\n                          label=\"NOVI ROK SPROVOĐENJA PREPORUKE:\"\n                        />\n                      )}\n                    />\n                  </FormGroup>\n                </Row>\n\n                <Row>\n                  <FormGroup>\n                    <Input\n                      {...register('new_date_of_execution')}\n                      label=\"NOVI DATUM:\"\n                      value={secondDateOfImplementation && parseDate(secondDateOfImplementation)}\n                      disabled\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Controller\n                      name=\"end_date\"\n                      control={control}\n                      render={({field: {onChange, name, value}}) => (\n                        <Datepicker\n                          onChange={onChange}\n                          label=\"PREPORUKA SPROVEDENA:\"\n                          name={name}\n                          selected={value ? new Date(value) : ''}\n                        />\n                      )}\n                    />\n                  </FormGroup>\n                </Row>\n                <FormGroupFullWidth>\n                  <Input {...register('reasons_for_non_executing')} label=\"RAZLOZI NESPROVOĐENJA:\" />\n                </FormGroupFullWidth>\n              </ModalSection>\n            )}\n          </ModalSection>\n        </ModalForm>\n      }\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/revisionTipsModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/vacationModal/VacationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1183,1186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1183,1186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1776,1779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1776,1779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2780,2783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2780,2783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {VacationModalProps} from '../../screens/employees/absents/types';\nimport useVacationInsert from '../../services/graphql/userProfile/vacation/useVacationInsert';\nimport {yearsForDropdown} from '../../utils/constants';\nimport {FileUploadWrapper, FormGroup, ModalContentWrapper, UploadedFileContainer, UploadedFileWrapper} from './styles';\nimport {UserProfileVacationParams} from '../../types/graphql/profileVacationTypes';\n\nconst initialValues: UserProfileVacationParams = {\n  id: null,\n  user_profile_id: null,\n  file_id: null,\n  number_of_days: null,\n  year: null,\n  resolution_purpose: '',\n};\n\nexport const VacationModal: React.FC<VacationModalProps> = ({selectedItem, open, onClose, userProfileId, alert}) => {\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n\n  const handleUpload = (files: FileList) => {\n    const fileList = Array.from(files);\n    setUploadedFiles(fileList);\n  };\n\n  const {mutate, loading} = useVacationInsert();\n\n  const handleSave = (values: any) => {\n    const payload = {\n      id: values.id,\n      user_profile_id: userProfileId,\n      year: values.year.id || 0,\n      file_id: values.file_id,\n      number_of_days: values.number_of_days,\n      resolution_purpose: values.resolution_purpose,\n    };\n\n    mutate(\n      payload,\n      () => {\n        onClose(true);\n        alert.success('Uspješno sačuvano.');\n        reset();\n      },\n      () => {\n        alert.error('Greška. Promjene nisu sačuvane.');\n      },\n    );\n  };\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm<any>({defaultValues: initialValues});\n\n  useEffect(() => {\n    reset({...selectedItem, year: yearOptions.find(yearOption => yearOption.id === selectedItem?.year)});\n  }, [selectedItem]);\n\n  const yearOptions = useMemo(() => [...yearsForDropdown().map(year => ({id: +year.id, title: +year.title}))], []);\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset(initialValues);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(handleSave)}\n      buttonLoading={loading}\n      content={\n        <ModalContentWrapper>\n          <FormGroup>\n            <Controller\n              name=\"year\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"GODINA:\"\n                  name={name}\n                  options={yearOptions}\n                  value={value as any}\n                  onChange={onChange}\n                  error={errors.year?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Input\n              {...register('number_of_days', {required: 'Ovo polje je obavezno'})}\n              label=\"UKUPAN BROJ DANA:\"\n              error={errors.number_of_days?.message as string}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Input {...register('resolution_purpose')} label=\"OPIS:\" textarea />\n          </FormGroup>\n\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={handleUpload}\n              note={<Typography variant=\"bodySmall\" content=\"Validacija\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n\n          {uploadedFiles.length > 0 && (\n            <UploadedFileWrapper>\n              {uploadedFiles.map((file, index) => (\n                <UploadedFileContainer key={index}>\n                  <Typography variant=\"bodySmall\" content={file.name} />\n                </UploadedFileContainer>\n              ))}\n            </UploadedFileWrapper>\n          )}\n        </ModalContentWrapper>\n      }\n      title={'Rješenje o godišnjem odmoru'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/vacationModal/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/vacationModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/context/appContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/context/useAppContext.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/index.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":15,"column":3,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":15,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":21,"column":5,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":21,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":25,"column":3,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":25,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":28,"column":5,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":28,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/router.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/404.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/absents/absents.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1997,2000],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1997,2000],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2225,2228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2225,2228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4564,4567],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4564,4567],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4612,4615],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4612,4615],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Divider} from '@oykos-development/devkit-react-ts-styled-components';\nimport {Button, Dropdown, EditIconTwo, Table, Theme, TrashIcon, Typography} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {AbsentModal} from '../../../components/absentsModal/absentsModal';\nimport {VacationModal} from '../../../components/vacationModal/VacationModal';\nimport useAbsentDelete from '../../../services/graphql/userProfile/absents/useDeleteAbsence';\nimport useGetAbsence from '../../../services/graphql/userProfile/absents/useGetAbsence';\nimport useGetAbsenceTypes from '../../../services/graphql/userProfile/absents/useGetAbsentsType';\nimport useResolutionDelete from '../../../services/graphql/userProfile/resolution/useResolutionDelete';\nimport useVacationGet from '../../../services/graphql/userProfile/vacation/useVacationGet';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {Absence, AbsenceParams} from '../../../types/graphql/absents';\nimport {UserProfileVacationParams, YearVacationType} from '../../../types/graphql/profileVacationTypes';\nimport {MicroserviceProps} from '../../../types/micro-service-props';\nimport {yearsForDropdownFilter} from '../../../utils/constants';\nimport {tableHeadsAbsence, tableHeadsVacation, tableHeadsYearVacation} from './constants';\nimport {\n  ButtonWrapper,\n  Container,\n  Subtitle,\n  SuperTitle,\n  TableHeader,\n  TableTitle,\n  Title,\n  VacationContainer,\n  VacationWrapper,\n  YearContainer,\n  YearWrapper,\n} from './styles';\n\nconst Absents: React.FC<{context: MicroserviceProps}> = ({context}) => {\n  const years = yearsForDropdownFilter();\n  const userProfileID = context.navigation.location.pathname.split('/')[4];\n  const {absence, refetch, summary} = useGetAbsence(userProfileID);\n  const {vacationData, refetchUserVacation} = useVacationGet(userProfileID);\n  const [firstTableData, setFirstTableData] = useState<Absence[]>([]);\n  const [secondTableData, setSecondTableData] = useState<any[]>([]);\n  const [showModal, setShowModal] = useState(false);\n  const [showVacationModal, setShowVacationModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n  const [form, setForm] = useState<any>();\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const {absenceTypes, loading} = useGetAbsenceTypes();\n  const {mutate} = useAbsentDelete();\n  const {mutate: vacationDelete} = useResolutionDelete();\n  const [editItem, setEditItem] = useState<Absence | undefined>();\n  const [editItemVacation, setEditItemVacation] = useState<YearVacationType | undefined>();\n  const [showDeleteVacationModal, setShowDeleteVacationModal] = useState<boolean>(false);\n\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const handleAddVacation = () => {\n    setShowVacationModal(true);\n  };\n\n  const handleDelete = async () => {\n    mutate(\n      selectedItemId,\n      () => {\n        refetch();\n        context.alert.success('Uspješno obrisano.');\n        setShowDeleteModal(false);\n        setSelectedItemId(0);\n      },\n      () => {\n        context.alert.error('Greška. Brisanje nije moguće.');\n      },\n    );\n  };\n\n  const handleDeleteVacation = async () => {\n    vacationDelete(\n      selectedItemId,\n      () => {\n        refetchUserVacation();\n        refetch();\n        context.alert.success('Uspješno obrisano.');\n        setShowDeleteVacationModal(false);\n        setSelectedItemId(0);\n      },\n      () => {\n        context.alert.error('Greška. Brisanje nije moguće.');\n      },\n    );\n  };\n\n  const handleCloseAbsentsModal = (shouldRefetch?: boolean) => {\n    setShowModal(false);\n    setSelectedItemId(0);\n    setEditItem(undefined);\n    shouldRefetch && refetch();\n  };\n\n  const handleCloseVacationModal = (shouldRefetch: boolean) => {\n    setShowVacationModal(false);\n    setSelectedItemId(0);\n    setEditItemVacation(undefined);\n    refetch();\n    shouldRefetch && refetchUserVacation();\n  };\n\n  const handleEdit = (item: AbsenceParams) => {\n    setShowModal(true);\n    setEditItem(absence?.find(tableItem => tableItem.id === item.id));\n  };\n\n  const handleEditVacation = (item: UserProfileVacationParams) => {\n    setShowVacationModal(true);\n    setEditItemVacation(vacationData?.find(tableItem => tableItem.id === item.id));\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedItemId(id);\n  };\n\n  const handleDeleteVacationIconClick = (id: number) => {\n    setShowDeleteVacationModal(true);\n    setSelectedItemId(id);\n  };\n\n  const handleChange = (value: any, name: string) => {\n    setForm((prevState: any) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const filterFirstTableData = () => {\n    if (absence) {\n      const filteredData = [...absence].filter(absent => !absent?.absent_type?.accounting_days_off);\n      setFirstTableData(filteredData);\n      return filteredData;\n    } else {\n      setFirstTableData([]);\n      return [];\n    }\n  };\n\n  const filterSecondTableData = () => {\n    if (absence) {\n      const filteredData = absence.filter(item => item?.absent_type?.accounting_days_off);\n      const combinedData = [...filteredData];\n      setSecondTableData(combinedData);\n      return combinedData;\n    } else {\n      setSecondTableData([]);\n      return [];\n    }\n  };\n\n  const filteredFirstTableData = useMemo(() => {\n    return (\n      firstTableData?.filter((item: Absence) => {\n        const yearMatches = !form?.year?.id || item.date_of_start.includes(form.year.id);\n        return yearMatches;\n      }) || []\n    );\n  }, [firstTableData, form?.year?.id]);\n\n  const filteredSecondTableData = useMemo(() => {\n    return (\n      secondTableData?.filter((item: Absence) => {\n        const yearMatches = !form?.year?.id || item.date_of_start.includes(form.year.id);\n        return yearMatches;\n      }) || []\n    );\n  }, [secondTableData, form?.year?.id]);\n\n  const filterVacationData = () => {\n    if (!form) {\n      return vacationData || [];\n    }\n    const isAllYearSelected = form?.year.id.toString() === '';\n    const filteredData = vacationData?.filter(item => {\n      return isAllYearSelected || item.year === form.year.id;\n    });\n\n    return filteredData || [];\n  };\n\n  useEffect(() => {\n    filterFirstTableData();\n    filterSecondTableData();\n  }, [absence, vacationData]);\n\n  return (\n    <Container>\n      <VacationWrapper>\n        <VacationContainer>\n          <SuperTitle variant=\"bodySmall\" content={`${summary?.current_available_days}` || null}></SuperTitle>\n          <Title variant=\"bodySmall\" content=\"DOSTUPNI DANI GODIŠNJEG ODMORA\" />\n          <Subtitle variant=\"bodySmall\" content=\"TEKUĆA GODINA\" />\n        </VacationContainer>\n        <VacationContainer>\n          <SuperTitle variant=\"bodySmall\" content={`${summary?.past_available_days}` || null}></SuperTitle>\n          <Title variant=\"bodySmall\" content=\"DOSTUPNI DANI GODIŠNJEG ODMORA\" />\n          <Subtitle variant=\"bodySmall\" content=\"PRETHODNA GODINA\" />\n        </VacationContainer>\n        <VacationContainer>\n          <SuperTitle variant=\"bodySmall\" content={`${summary?.used_days}` || ''}></SuperTitle>\n          <Title variant=\"bodySmall\" content=\"ISKORIŠTENI DANI U TEKUĆOJ GODINI\" />\n          <Subtitle variant=\"bodySmall\" content=\"\" />\n        </VacationContainer>\n        <VacationContainer>\n          <SuperTitle\n            variant=\"bodySmall\"\n            content={`${summary ? summary?.current_available_days + summary?.past_available_days : ''}`}></SuperTitle>\n          <Title variant=\"bodySmall\" content=\"UKUPNO RASPOLOŽIVIH DANA \" />\n          <Subtitle variant=\"bodySmall\" content=\"TEKUĆA + PRETHODNA\" />\n        </VacationContainer>\n      </VacationWrapper>\n      <TableHeader>\n        <YearWrapper>\n          <YearContainer>\n            <Dropdown\n              label={<Typography variant=\"bodySmall\" content=\"GODINA:\" />}\n              options={years}\n              name=\"year\"\n              value={form?.year || null}\n              placeholder=\"Odaberite godinu:\"\n              onChange={handleChange}\n            />\n          </YearContainer>\n        </YearWrapper>\n\n        <ButtonWrapper>\n          <Button\n            variant=\"secondary\"\n            content={<Typography variant=\"bodyMedium\" content=\"Rješenje o godišnjem odmoru\" />}\n            onClick={handleAddVacation}\n          />\n          <Button\n            variant=\"secondary\"\n            content={<Typography variant=\"bodyMedium\" content=\"Zahtjevi\" />}\n            onClick={handleAdd}\n            style={{marginLeft: '10px'}}\n          />\n        </ButtonWrapper>\n      </TableHeader>\n      <div>\n        <div>\n          <TableTitle content=\"GODIŠNJI ODMORI\" variant=\"bodyMedium\" />\n          <Divider height=\"1px\" style={{marginBottom: '30px'}} />\n        </div>\n        <Table\n          tableHeads={tableHeadsYearVacation}\n          data={filterVacationData() || []}\n          isLoading={loading}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEditVacation(item),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteVacationIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n      </div>\n\n      <div>\n        <div>\n          <TableTitle content=\"ODMORI\" variant=\"bodyMedium\" />\n          <Divider height=\"1px\" style={{marginBottom: '30px'}} />\n        </div>\n        <Table\n          tableHeads={tableHeadsVacation}\n          data={filteredSecondTableData || []}\n          isLoading={loading}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n      </div>\n      <div>\n        <div>\n          <TableTitle content=\"ODSUTNOST\" variant=\"bodyMedium\" />\n          <Divider height=\"1px\" />\n        </div>\n        <Table\n          tableHeads={tableHeadsAbsence}\n          data={filteredFirstTableData || []}\n          isLoading={loading}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n      </div>\n      {showModal && (\n        <AbsentModal\n          open={showModal}\n          onClose={refetch => handleCloseAbsentsModal(refetch)}\n          selectedItem={editItem}\n          userProfileId={Number(userProfileID)}\n          alert={context.alert}\n          absenceTypes={absenceTypes || []}\n          key={editItem ? editItem.id : 'new'}\n        />\n      )}\n      {showVacationModal && (\n        <VacationModal\n          open={showVacationModal}\n          onClose={refetch => handleCloseVacationModal(refetch)}\n          selectedItem={editItemVacation}\n          userProfileId={Number(userProfileID)}\n          alert={context.alert}\n          key={editItemVacation ? editItemVacation.id : 'new'}\n        />\n      )}\n\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n      <DeleteModal\n        open={showDeleteVacationModal}\n        handleDelete={handleDeleteVacation}\n        onClose={() => setShowDeleteVacationModal(false)}\n      />\n    </Container>\n  );\n};\n\nexport default Absents;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/absents/constants.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[288,291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[288,291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[527,530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[527,530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[728,731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[728,731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dayOfWeek' is assigned a value but never used.","line":35,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1412,1415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1412,1415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1668,1671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1668,1671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'row' is defined but never used.","line":62,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1853,1856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1853,1856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3037,3040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3037,3040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {TableHead, Typography} from 'client-library';\nimport {parseDate} from '../../../utils/dateUtils';\n\nexport const tableHeadsAbsence: TableHead[] = [\n  {\n    title: 'Godina',\n    accessor: 'date_of_start',\n    type: 'custom',\n    renderContents: (_, item: any) => {\n      return <Typography variant=\"bodyMedium\" content={parseDate(item.date_of_start)} />;\n    },\n    width: '15%',\n  },\n  {\n    title: 'Vrsta zahtjeva',\n    accessor: 'absent_type',\n    type: 'custom',\n    renderContents: (item: any) => {\n      return <Typography variant=\"bodyMedium\" content={item.title} />;\n    },\n    width: '30%',\n  },\n  {\n    title: 'Dana',\n    accessor: '',\n    type: 'custom',\n    renderContents: (_, row: any) => {\n      const startDate = new Date(row.date_of_start);\n      const endDate = new Date(row.date_of_end);\n\n      let numberOfDays = 0;\n\n      for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {\n        const dayOfWeek = d.getDay();\n        numberOfDays += 1;\n      }\n\n      return <Typography variant=\"bodyMedium\" content={numberOfDays} />;\n    },\n    width: '10%',\n  },\n  {title: 'Datoteka', accessor: 'file_id', type: 'text'},\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n\nexport const tableHeadsVacation: TableHead[] = [\n  {\n    title: 'Godina',\n    accessor: 'date_of_start',\n    type: 'custom',\n    renderContents: (_, item: any) => (\n      <Typography variant=\"bodyMedium\" content={item.year ? item.year : parseDate(item.date_of_start)} />\n    ),\n    width: '15%',\n  },\n\n  {\n    title: 'Vrsta zahtjeva',\n    accessor: 'absent_type',\n    type: 'custom',\n    renderContents: (item: any, row) => <Typography variant=\"bodyMedium\" content={item.title} />,\n    width: '30%',\n  },\n\n  {\n    title: 'Dana',\n    accessor: '',\n    type: 'custom',\n    renderContents: (_, row: any) => {\n      const startDate = new Date(row.date_of_start);\n      const endDate = new Date(row.date_of_end);\n\n      let numberOfDays = 0;\n\n      for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {\n        const dayOfWeek = d.getDay();\n        if (dayOfWeek !== 0 && dayOfWeek !== 6) {\n          numberOfDays += 1;\n        }\n      }\n      return <Typography variant=\"bodyMedium\" content={row.number_of_days ? row.number_of_days : numberOfDays} />;\n    },\n    width: '10%',\n  },\n  {title: 'Datoteka', accessor: 'file_id', type: 'text'},\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n\nexport const tableHeadsYearVacation: TableHead[] = [\n  {\n    title: 'Godina',\n    accessor: 'year',\n    type: 'custom',\n    renderContents: year => {\n      return <Typography variant=\"bodyMedium\" content={year} />;\n    },\n    width: '15%',\n  },\n  {\n    title: 'Vrsta zahtjeva',\n    accessor: 'resolution_type',\n    type: 'custom',\n    renderContents: item => {\n      return <Typography variant=\"bodyMedium\" content={item.title} />;\n    },\n    width: '30%',\n  },\n  {\n    title: 'Dana',\n    accessor: '',\n    type: 'custom',\n    renderContents: (_, row: any) => {\n      return <Typography variant=\"bodyMedium\" content={row.number_of_days ? row.number_of_days : ''} />;\n    },\n    width: '10%',\n  },\n  {title: 'Datoteka', accessor: 'file_id', type: 'text'},\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/absents/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/absents/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[119,122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[119,122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[193,196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[193,196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[241,244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[241,244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[304,307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[304,307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[379,382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[379,382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[427,430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[427,430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {AbsenceType} from '../../../types/graphql/absents';\n\nexport interface AbsenceTypeModalProps {\n  selectedItem?: any;\n  absenceTypes: AbsenceType[];\n  open: boolean;\n  onClose: (action?: any) => void;\n  userProfileId: number;\n  alert: any;\n}\n\nexport interface VacationModalProps {\n  selectedItem?: any;\n  absenceTypes?: AbsenceType[];\n  open: boolean;\n  onClose: (action?: any) => void;\n  userProfileId: number;\n  alert: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/addNew/addNew.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/basicInfo/basicInfo.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3404,3407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3404,3407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4153,4156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4153,4156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":241,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9686,9689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9686,9689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":335,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":335,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12560,12563],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12560,12563],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":371,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13877,13880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13877,13880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":408,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":408,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15183,15186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15183,15186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":426,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":426,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15813,15816],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15813,15816],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":453,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":453,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16769,16772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16769,16772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":497,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":497,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18232,18235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18232,18235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":517,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":517,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18907,18910],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18907,18910],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":534,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":534,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19509,19512],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19509,19512],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":551,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":551,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20122,20125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20122,20125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":582,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":582,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21261,21264],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21261,21264],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":597,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":597,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21780,21783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21780,21783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":616,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":616,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22551,22554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22551,22554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":667,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":667,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24462,24465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24462,24465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":832,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":832,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30119,30122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30119,30122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":838,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":838,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30386,30389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30386,30389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":847,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":847,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30686,30689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30686,30689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Switch} from '@oykos-development/devkit-react-ts-styled-components';\nimport {Button, Datepicker, Dropdown, Input, Typography} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {\n  cityData,\n  femaleMaritalStatusOptions,\n  genderOptions,\n  maleMaritalStatusOptions,\n  nationalMinorities,\n  yesOrNoOptionsString,\n} from '../../../constants';\nimport useAppContext from '../../../context/useAppContext';\nimport useGetAvailableJobPositions from '../../../services/graphql/jobPositions/useGetAvailableJobPositions';\nimport useJudgesAvailable from '../../../services/graphql/judges/useJudgesAvailable';\nimport useGetOrganizationUnits from '../../../services/graphql/organizationUnits/useGetOrganizationUnits';\nimport useSettingsDropdownOverview from '../../../services/graphql/settingsDropdown/useSettingsDropdownOverview';\nimport useBasicInfoGet from '../../../services/graphql/userProfile/basicInfo/useBasicInfoGet';\nimport useBasicInfoInsert from '../../../services/graphql/userProfile/basicInfo/useBasicInfoInsert';\nimport useBasicInfoUpdate from '../../../services/graphql/userProfile/basicInfo/useBasicInfoUpdate';\nimport {DropdownDataString} from '../../../types/dropdownData';\nimport {UserProfileBasicInfoFormValues} from '../../../types/graphql/userProfiles';\nimport {parseToDate} from '../../../utils/dateUtils';\nimport {backendErrors, contractPositions, initialValues} from './constants';\nimport {\n  Controls,\n  FormColumn,\n  FormContainer,\n  FormFileUpload,\n  FormFooter,\n  FormItem,\n  FormRow,\n  FormWrapper,\n  TextWrapper,\n} from './styles';\nimport useJobTenderApplicationsInsert from '../../../services/graphql/jobTenders/useJobTenderApplicationInsert';\nimport {basicInfoSchema, booleanToYesOrNo, formatData} from './utils';\nimport {ContractEndModal} from '../../../components/contractEndModal/contractEndModal';\n\nexport const BasicInfo: React.FC = () => {\n  const context = useAppContext();\n  const profileId = Number(context?.navigation.location.pathname.split('/')[4]);\n  const {data: profileData, refetch} = useBasicInfoGet(profileId);\n\n  const [creatingChosenJobApplicant, setCreatingChosenJobApplicant] = useState<boolean>(false);\n  const isNew = !profileId;\n  // const isJudge = profileData?.is_judge;\n  const isPresident = profileData?.is_president;\n  const [isDisabled, setIsDisabled] = useState<boolean>(!isNew);\n  const [openContractEndModal, setOpenCotractEndModal] = useState<boolean>(false);\n\n  const {organizationUnits, departments} = useGetOrganizationUnits(undefined);\n  const {options: contractTypes} = useSettingsDropdownOverview({entity: 'contract_types'});\n  const {mutate: createBasicInfo, loading: isCreating} = useBasicInfoInsert();\n  const {mutate: updateBasicInfo, loading: isUpdating} = useBasicInfoUpdate();\n  const {mutate: updateJobApplication, loading: isUpdatingApplication} = useJobTenderApplicationsInsert();\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors, isValid, dirtyFields},\n    reset,\n    control,\n    setError,\n    watch,\n    setValue,\n    clearErrors,\n  } = useForm({\n    resolver: yupResolver(basicInfoSchema),\n    defaultValues: {\n      is_judge: false,\n      is_president: false,\n    },\n  });\n\n  const countryOptions = useMemo(() => {\n    return context.countries?.map((country: any) => {\n      return {\n        id: country.alpha3,\n        title: country.name,\n      };\n    });\n  }, [context.countries]);\n\n  const gender = watch('gender')?.id;\n\n  const {organization_unit_id, department_id, contract_type_id, is_judge, is_president} = watch();\n\n  const maritalOptions = gender === 'M' ? maleMaritalStatusOptions : femaleMaritalStatusOptions;\n\n  const {checkAvailable, refetch: refetchCheckAvailable} = useJudgesAvailable();\n\n  const {availableJobPositions} = useGetAvailableJobPositions(organization_unit_id?.id, department_id?.id);\n\n  const departmentOptions = useMemo(() => {\n    if (!organization_unit_id) return [];\n\n    if (organization_unit_id && departments && departments.length) {\n      return departments.filter((dep: any) => dep.parent_id === organization_unit_id?.id);\n    } else {\n      return departments;\n    }\n  }, [organization_unit_id, organizationUnits]);\n\n  const onFileUpload = (acceptedFiles: FileList) => {\n    console.log('File(s) uploaded:', acceptedFiles);\n  };\n\n  const handleSave = async (values: UserProfileBasicInfoFormValues, close: boolean) => {\n    if (isValid) {\n      if (!profileData?.id) {\n        if (isCreating) return;\n\n        await createBasicInfo(\n          formatData(values),\n          userId => {\n            if (creatingChosenJobApplicant) {\n              updateJobTenderApplication();\n            }\n\n            refetch();\n            context.alert.success('Uspješno sačuvano.');\n            setIsDisabled(true);\n\n            if (close) {\n              const overviewPathname = context.navigation.location.pathname.split('/').slice(0, 3).join('/');\n              context.navigation.navigate(overviewPathname);\n            }\n\n            context.navigation.navigate(`/hr/employees/details/${userId}/basic-info`, {state: {scroll: true}});\n          },\n          res => {\n            const emailErr = res.message === 'user_email_exists';\n            const jmbgErr = res.message === 'user_jmbg_exists';\n\n            if (emailErr) {\n              setError('email', {\n                type: 'custom',\n                message: backendErrors[res.message],\n              });\n            }\n            if (jmbgErr) {\n              setError('official_personal_id', {\n                type: 'custom',\n                message: backendErrors[res.message],\n              });\n            }\n\n            context.alert.error(\n              `Greška. Promjene nisu sačuvane. ${emailErr ? 'Postojeći Email ' : ''} ${\n                jmbgErr ? 'Postojeći JMBG ' : ''\n              }`,\n            );\n          },\n        );\n      } else {\n        if (isUpdating) return;\n\n        updateBasicInfo(\n          formatData(values),\n          () => {\n            refetch();\n            context.alert.success('Uspješno sačuvano.');\n            setIsDisabled(true);\n\n            if (close) {\n              const overviewPathname = context.navigation.location.pathname.split('/').slice(0, 3).join('/');\n              context.navigation.navigate(overviewPathname);\n            }\n          },\n          () => {\n            context.alert.error('Greška. Promjene nisu sačuvane.');\n          },\n        );\n      }\n    }\n  };\n\n  const updateJobTenderApplication = async () => {\n    await updateJobApplication(context.navigation.location.state.application, () => {\n      context.alert.success('Uspješno izabran kandidat.');\n      context.navigation.navigate('/hr/job-tenders-list');\n      context.navigation.location.state = {};\n    });\n  };\n\n  useEffect(() => {\n    refetch();\n    // If new employee, enable the form immediately\n    if (context.navigation.location.pathname.split('/')[3] === 'new-employee') {\n      setIsDisabled(false);\n    }\n  }, [context.navigation.location]);\n\n  useEffect(() => {\n    if (profileData) {\n      reset({\n        ...profileData,\n        nationality: countryOptions.find((opt: DropdownDataString) => opt.id === profileData.nationality),\n        citizenship: countryOptions.find((opt: DropdownDataString) => opt.id === profileData.citizenship),\n        date_of_birth: parseToDate(profileData?.date_of_birth),\n        date_of_becoming_judge: parseToDate(profileData?.date_of_becoming_judge),\n        marital_status: maritalOptions.find(opt => opt.id === profileData?.marital_status),\n        country_of_birth: countryOptions.find((opt: DropdownDataString) => opt.id === profileData?.country_of_birth),\n        city_of_birth: profileData?.city_of_birth,\n        housing_done: booleanToYesOrNo(profileData?.housing_done),\n        single_parent: booleanToYesOrNo(profileData?.single_parent),\n        gender: genderOptions.find((opt: DropdownDataString) => opt.id === profileData?.gender),\n        is_president: profileData?.is_president,\n        national_minority: nationalMinorities.find(\n          (opt: DropdownDataString) => opt.id === profileData?.national_minority,\n        ),\n        official_personal_document_issuer: cityData.find(\n          (opt: DropdownDataString) => opt.id === profileData?.official_personal_document_issuer,\n        ),\n        personal_id: profileData?.personal_id ?? '',\n        organization_unit_id: profileData?.contract?.organization_unit ?? undefined,\n        department_id: profileData?.contract?.department ?? undefined,\n        job_position_in_organization_unit_id: profileData?.contract?.job_position_in_organization_unit ?? undefined,\n        contract_type_id: profileData?.contract?.contract_type ?? undefined,\n        date_of_end: parseToDate(profileData?.contract?.date_of_end),\n        date_of_start: parseToDate(profileData?.contract?.date_of_start),\n        date_of_eligibility: parseToDate(profileData?.contract?.date_of_eligibility),\n        user_profile_id: profileData?.id,\n        active: profileData?.contract?.active,\n      });\n    }\n  }, [profileData]);\n\n  // When coming from the job tender applications, when changing an external candidates status to accepted, it leads here to create it in the system, basically becoming an internal candidate in order to be accepted\n  useEffect(() => {\n    if (!context.navigation.location.state || !organizationUnits) return;\n\n    const {user} = context.navigation.location.state;\n    setCreatingChosenJobApplicant(true);\n\n    reset({\n      ...initialValues,\n      ...user,\n      organization_unit_id: organizationUnits.find((opt: any) => opt.id === user.organization_unit_id),\n    });\n  }, [context.navigation.location.state, organizationUnits]);\n\n  useEffect(() => {\n    if (organization_unit_id) {\n      if (\n        organization_unit_id &&\n        organization_unit_id?.id &&\n        organization_unit_id.title?.indexOf('Sudski savjet') == -1\n      ) {\n        refetchCheckAvailable(organization_unit_id?.id);\n      }\n\n      if (dirtyFields.organization_unit_id) {\n        setValue('department_id', null);\n      }\n    }\n  }, [organization_unit_id]);\n\n  useEffect(() => {\n    if (dirtyFields.is_president) {\n      is_president ? setValue('is_judge', true) : setValue('is_judge', false);\n    }\n  }, [is_president]);\n\n  const isJudgeSwitchDisabled = (): boolean => {\n    if (creatingChosenJobApplicant) return true;\n    if (organization_unit_id?.title && organization_unit_id.title?.indexOf('Sudski savjet') > -1) return true;\n    if (is_judge) return false;\n    if (checkAvailable?.judge) return false;\n    return true;\n  };\n\n  const isPresidentSwitchDisabled = (): boolean => {\n    if (creatingChosenJobApplicant) return true;\n    if (organization_unit_id?.title && organization_unit_id.title?.indexOf('Sudski savjet') > -1) return true;\n    if (isPresident) return false;\n    if (checkAvailable?.president) return false;\n\n    return true;\n  };\n\n  useEffect(() => {\n    if (is_judge || is_president) {\n      clearErrors('department_id');\n      setValue('department_id', null);\n      setValue('job_position_in_organization_unit_id', null);\n    }\n  }, [is_judge, is_president]);\n\n  const isJobPositionInputDisabled =\n    isDisabled ||\n    !organization_unit_id ||\n    !department_id ||\n    !(contract_type_id?.title && contractPositions.indexOf(contract_type_id?.title) > -1) ||\n    is_judge;\n\n  const toggleContractEndModal = () => {\n    setOpenCotractEndModal(!openContractEndModal);\n  };\n\n  return (\n    <FormContainer>\n      <FormWrapper>\n        <TextWrapper>\n          <Typography content=\"PERSONALNI PODACI\" variant=\"bodyMedium\" />\n        </TextWrapper>\n        <FormRow>\n          <FormColumn>\n            <FormItem>\n              <Input\n                {...register('first_name')}\n                label=\"IME:\"\n                disabled={isDisabled}\n                error={errors.first_name?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('last_name')}\n                label=\"PREZIME\"\n                disabled={isDisabled}\n                error={errors.last_name?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"gender\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"POL:\"\n                    value={value as any}\n                    options={genderOptions}\n                    isDisabled={isDisabled}\n                    onChange={onChange}\n                    error={errors.gender?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('official_personal_id')}\n                label=\"JMBG:\"\n                disabled={isDisabled}\n                error={errors.official_personal_id?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Input {...register('personal_id')} label=\"ID:\" disabled={isDisabled} />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('official_personal_document_number')}\n                label=\"BROJ LIČNE KARTE:\"\n                disabled={isDisabled}\n                error={errors.official_personal_document_number?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"official_personal_document_issuer\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"PJ LIČNE KARTE:\"\n                    value={value as any}\n                    options={cityData}\n                    isDisabled={isDisabled}\n                    onChange={onChange}\n                    error={errors.official_personal_document_issuer?.message}\n                    isSearchable\n                  />\n                )}\n              />\n            </FormItem>\n          </FormColumn>\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"date_of_birth\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    name={name}\n                    selected={value ? new Date(value) : null}\n                    onChange={onChange}\n                    label=\"DATUM ROĐENJA:\"\n                    disabled={isDisabled}\n                    error={errors.date_of_birth?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"country_of_birth\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"DRŽAVA ROĐENJA:\"\n                    onChange={onChange}\n                    value={value as any}\n                    isDisabled={isDisabled}\n                    options={countryOptions}\n                    error={errors.country_of_birth?.message}\n                    isSearchable\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"citizenship\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"DRŽAVLJANSTVO:\"\n                    value={value as any}\n                    options={countryOptions}\n                    isDisabled={isDisabled}\n                    isSearchable\n                    error={errors.citizenship?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('city_of_birth')}\n                label=\"OPŠTINA ROĐENJA:\"\n                disabled={isDisabled}\n                error={errors.city_of_birth?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"national_minority\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"PRIPADNOST NACIONALNOJ MANJINI:\"\n                    onChange={onChange}\n                    noOptionsText=\"Prazno\"\n                    value={value as any}\n                    options={nationalMinorities}\n                    isDisabled={isDisabled}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('address')}\n                label=\"ADRESA STANOVANJA:\"\n                disabled={isDisabled}\n                error={errors.address?.message}\n              />\n            </FormItem>\n          </FormColumn>\n          <FormColumn>\n            <FormItem>\n              <Input\n                {...register('father_name')}\n                label=\"IME OCA:\"\n                disabled={isDisabled}\n                error={errors.father_name?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('mother_name')}\n                label=\"IME MAJKE:\"\n                disabled={isDisabled}\n                error={errors.mother_name?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Input {...register('birth_last_name')} label=\"PREZIME PO ROĐENJU:\" disabled={isDisabled} />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"nationality\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"NACIONALNOST:\"\n                    value={value as any}\n                    onChange={onChange}\n                    options={countryOptions}\n                    isDisabled={isDisabled}\n                    error={errors.nationality?.message}\n                    isSearchable\n                  />\n                )}\n              />\n            </FormItem>\n          </FormColumn>\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"marital_status\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"BRAČNO STANJE:\"\n                    value={value as any}\n                    onChange={onChange}\n                    options={maritalOptions}\n                    isDisabled={isDisabled}\n                    error={errors.marital_status?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"single_parent\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"SAMOHRANI RODITELJ:\"\n                    value={value as any}\n                    options={yesOrNoOptionsString}\n                    isDisabled={isDisabled}\n                    error={errors.single_parent?.message}\n                    onChange={onChange}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"housing_done\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"RIJEŠENO STAMBENO PITANJE:\"\n                    value={value as any}\n                    options={yesOrNoOptionsString}\n                    isDisabled={isDisabled}\n                    onChange={onChange}\n                    error={errors.housing_done?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Input {...register('housing_description')} label=\"OPIS STAMBENOG PITANJA:\" disabled={isDisabled} />\n            </FormItem>\n          </FormColumn>\n        </FormRow>\n      </FormWrapper>\n      <FormWrapper>\n        <TextWrapper>\n          <Typography content=\"PODACI O ZAPOSLENJU\" variant=\"bodyMedium\" />\n        </TextWrapper>\n        <FormRow>\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"organization_unit_id\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"ORGANIZACIONA JEDINICA:\"\n                    isDisabled={isDisabled || creatingChosenJobApplicant}\n                    value={value as any}\n                    options={organizationUnits}\n                    error={errors.organization_unit_id?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"department_id\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"ODJELJENJE:\"\n                    value={value as any}\n                    onChange={onChange}\n                    noOptionsText=\"Prazno\"\n                    options={departmentOptions}\n                    isDisabled={isDisabled || !organization_unit_id || is_judge || creatingChosenJobApplicant}\n                    error={errors.department_id?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"job_position_in_organization_unit_id\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"RADNO MJESTO:\"\n                    value={value as any}\n                    noOptionsText=\"Prazno\"\n                    options={availableJobPositions}\n                    isDisabled={isJobPositionInputDisabled || creatingChosenJobApplicant}\n                    error={errors.job_position_in_organization_unit_id?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <div>\n              <Controller\n                name=\"is_judge\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Switch\n                    name={name}\n                    checked={value}\n                    onChange={onChange}\n                    content={<Typography variant=\"bodyMedium\" content=\"SUDIJA:\" style={{marginLeft: 10}} />}\n                    disabled={isDisabled || isJudgeSwitchDisabled()}\n                  />\n                )}\n              />\n            </div>\n            <div>\n              <Controller\n                name=\"is_president\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Switch\n                    name={name}\n                    checked={value}\n                    onChange={onChange}\n                    content={<Typography variant=\"bodyMedium\" content=\"PREDSJEDNIK SUDA:\" style={{marginLeft: 10}} />}\n                    disabled={isDisabled || isPresidentSwitchDisabled()}\n                  />\n                )}\n              />\n            </div>\n          </FormColumn>\n\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"contract_type_id\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"VRSTA ZAPOSLENJA:\"\n                    onChange={onChange}\n                    value={value as any}\n                    noOptionsText=\"Prazno\"\n                    options={contractTypes}\n                    isDisabled={isDisabled}\n                    error={errors.contract_type_id?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"date_of_eligibility\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    name={name}\n                    selected={value ? new Date(value) : ''}\n                    onChange={onChange}\n                    label=\"DATUM IZBORA:\"\n                    disabled={isDisabled}\n                    error={errors.date_of_eligibility?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <FormFileUpload\n                onUpload={onFileUpload}\n                variant=\"secondary\"\n                buttonVariant=\"primary\"\n                buttonText=\"UČITAJ\"\n                buttonSize={'sm'}\n                icon={<></>}\n                note={<Typography variant=\"bodySmall\" content=\"Ugovor o radu\" />}\n                disabled={isDisabled}\n              />\n            </FormItem>\n          </FormColumn>\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"date_of_start\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    name={name}\n                    label=\"POČETAK RADNOG ODNOSA:\"\n                    selected={value ? new Date(value) : ''}\n                    onChange={onChange}\n                    disabled={isDisabled}\n                    error={errors.date_of_start?.message}\n                  />\n                )}\n              />\n            </FormItem>\n\n            <FormItem>\n              <Controller\n                name=\"date_of_end\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    name={name}\n                    label=\"KRAJ RADNOG ODNOSA:\"\n                    selected={value ? new Date(value) : ''}\n                    onChange={onChange}\n                    disabled={isDisabled}\n                    error={errors.date_of_end?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Button\n                size=\"lg\"\n                content={<Typography variant=\"bodyMedium\" content=\"Prekid radnog odnosa\" />}\n                disabled={isDisabled}\n                onClick={() => setOpenCotractEndModal(true)}\n              />\n            </FormItem>\n          </FormColumn>\n        </FormRow>\n      </FormWrapper>\n\n      {isNew && (\n        <FormWrapper>\n          <TextWrapper>\n            <Typography content=\"KORISNIČKI NALOG\" variant=\"bodyMedium\" />\n          </TextWrapper>\n          <FormRow style={{paddingBottom: 0}}>\n            <FormColumn style={{flexBasis: 'calc(50% + 23px)'}}>\n              <FormItem>\n                {/* TODO value prop needs to be number also */}\n                <Input {...register('id')} label=\"SISTEMSKI ID:\" disabled={true} />\n              </FormItem>\n            </FormColumn>\n          </FormRow>\n          <FormRow style={{padding: 0}}>\n            <FormColumn>\n              <FormItem>\n                <Input\n                  {...register('email')}\n                  label=\"E-MAIL:\"\n                  disabled={isDisabled}\n                  error={errors.email && errors.email?.message}\n                />\n              </FormItem>\n              <FormItem>\n                <Input\n                  {...register('password')}\n                  label=\"LOZINKA:\"\n                  type=\"password\"\n                  placeholder=\"******\"\n                  disabled={isDisabled}\n                  error={errors?.password?.message}\n                />\n              </FormItem>\n              <FormItem>\n                <Input\n                  {...register('phone')}\n                  label=\"BROJ TELEFONA:\"\n                  disabled={isDisabled}\n                  error={errors?.phone?.message}\n                />\n              </FormItem>\n            </FormColumn>\n            <FormColumn>\n              <FormItem>\n                <Input\n                  {...register('secondary_email')}\n                  label=\"PRIVATNI E-MAIL:\"\n                  disabled={isDisabled}\n                  error={errors.secondary_email?.message}\n                />\n              </FormItem>\n              <FormItem>\n                <Controller\n                  name=\"pin\"\n                  control={control}\n                  render={({field: {value, name, onChange}}) => (\n                    <Input\n                      onChange={onChange}\n                      value={value}\n                      name={name}\n                      maxLength={4}\n                      label=\"PIN:\"\n                      disabled={isDisabled}\n                      error={errors?.pin?.message}\n                    />\n                  )}></Controller>\n              </FormItem>\n            </FormColumn>\n          </FormRow>\n        </FormWrapper>\n      )}\n\n      <FormFooter>\n        <Controls>\n          {isDisabled ? (\n            <Button content=\"Uredi\" variant=\"secondary\" onClick={() => setIsDisabled(false)} />\n          ) : !isNew ? (\n            <>\n              <Button\n                content=\"Sačuvaj i zatvori\"\n                variant=\"secondary\"\n                onClick={() => handleSubmit((data: any) => handleSave(data, true))()}\n                isLoading={isUpdating || isUpdatingApplication}\n              />\n              <Button\n                content=\"Sačuvaj i nastavi\"\n                variant=\"primary\"\n                onClick={() => handleSubmit((data: any) => handleSave(data, false))()}\n                isLoading={isUpdating || isUpdatingApplication}\n              />\n            </>\n          ) : (\n            <Button\n              content=\"Sačuvaj\"\n              variant=\"primary\"\n              onClick={() => {\n                handleSubmit((data: any) => handleSave(data, false))();\n              }}\n              isLoading={isCreating}\n            />\n          )}\n        </Controls>\n      </FormFooter>\n      {openContractEndModal && (\n        <ContractEndModal\n          open={true}\n          onClose={() => toggleContractEndModal()}\n          profileId={profileId}\n          context={context}\n        />\n      )}\n    </FormContainer>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/basicInfo/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/basicInfo/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/basicInfo/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[268,271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[268,271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[323,326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[323,326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":111,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":111,"endColumn":7,"fix":{"range":[4160,4166],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":112,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":112,"endColumn":9,"fix":{"range":[4181,4189],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":113,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":113,"endColumn":7,"fix":{"range":[4273,4279],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":114,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":114,"endColumn":9,"fix":{"range":[4294,4302],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":115,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":115,"endColumn":7,"fix":{"range":[4347,4353],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":116,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":116,"endColumn":9,"fix":{"range":[4362,4370],"text":"      "}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import {yesOrNoOptionsString} from '../../../constants';\nimport * as yup from 'yup';\nimport {dropdownNumberSchema, dropdownStringSchema, requiredError} from './constants';\nimport {parseDateForBackend} from '../../../utils/dateUtils';\n\nexport const formatData = (data: any) => {\n  const isNew = !data?.id;\n\n  const payload: any = {\n    id: data?.id,\n    first_name: data?.first_name,\n    last_name: data?.last_name,\n    birth_last_name: data?.birth_last_name,\n    address: data?.address,\n    father_name: data?.father_name,\n    mother_name: data?.mother_name,\n    mother_birth_last_name: data?.mother_birth_last_name,\n    official_personal_id: data?.official_personal_id,\n    official_personal_document_number: data?.official_personal_document_number,\n    housing_description: data?.housing_description,\n    middle_name: data?.middle_name,\n    date_of_birth: parseDateForBackend(data?.date_of_birth),\n    country_of_birth: data?.country_of_birth?.id,\n    city_of_birth: data?.city_of_birth,\n    nationality: data?.nationality?.id,\n    citizenship: data?.citizenship?.id,\n    gender: data?.gender?.id,\n    single_parent: data?.single_parent.id === 'Da' ? true : false,\n    housing_done: data?.housing_done.id === 'Da' ? true : false,\n    is_president: data?.is_president,\n    is_judge: data?.is_judge,\n    marital_status: data?.marital_status?.id,\n    date_of_taking_oath: new Date(),\n    national_minority: data?.national_minority?.id,\n    official_personal_document_issuer: data?.official_personal_document_issuer?.id,\n    contract: {\n      organization_unit_id: data?.organization_unit_id?.id || null,\n      organization_unit_department_id: data?.department_id?.id || null,\n      job_position_in_organization_unit_id: data?.job_position_in_organization_unit_id?.id || null,\n      contract_type_id: data?.contract_type_id?.id || null,\n      date_of_end: data?.date_of_end ? parseDateForBackend(data?.date_of_end) : null,\n      date_of_start: parseDateForBackend(data?.date_of_start),\n      user_profile_id: data?.id,\n      active: data?.active === false ? false : true,\n      date_of_eligibility: parseDateForBackend(data?.date_of_eligibility),\n    },\n  };\n\n  if (isNew) {\n    delete payload.id;\n    payload.password = data?.password;\n    payload.email = data?.email;\n    payload.pin = data?.pin;\n    payload.phone = data?.phone;\n    payload.secondary_email = data?.secondary_email;\n    payload.role_id = 2;\n  }\n\n  return payload;\n};\n\nexport const booleanToYesOrNo = (value: boolean) => {\n  return value !== null ? (value ? yesOrNoOptionsString[0] : yesOrNoOptionsString[1]) : undefined;\n};\n\nexport const validateDateOfBirth = (jmbg: string, dateOfBirth: Date) => {\n  let year = jmbg.substring(4, 7);\n\n  const millennium = year.charAt(0) === '0' ? 2 : 1;\n  year = `${millennium}${year}`;\n\n  const month = jmbg.substring(2, 4);\n  const day = jmbg.substring(0, 2);\n\n  const jmbgDateOfBirth = new Date(`${month}/${day}/${year}`);\n\n  return (\n    jmbgDateOfBirth.getFullYear() === dateOfBirth.getFullYear() &&\n    jmbgDateOfBirth.getMonth() === dateOfBirth.getMonth() &&\n    jmbgDateOfBirth.getDate() === dateOfBirth.getDate()\n  );\n};\n\nexport const basicInfoSchema = yup.object({\n  id: yup.number(),\n  first_name: yup.string().required(requiredError),\n  last_name: yup.string().required(requiredError),\n  date_of_birth: yup\n    .date()\n    .test('more than 18 year old', 'Zaposleni mora biti punoljetan', value => {\n      if (!value) return true;\n      const today = new Date();\n      const birthDate = new Date(value);\n      const age = today.getFullYear() - birthDate.getFullYear();\n      return age >= 18;\n    })\n    .test({\n      name: 'is same as date in jmbg',\n      message: 'Datum rođenja mora da se poklapa sa JMBG-om',\n      test: function (value) {\n        if (!value || !this.parent.official_personal_id) return true;\n        return validateDateOfBirth(this.parent.official_personal_id, value);\n      },\n    })\n    .required(requiredError)\n    .nullable(),\n  birth_last_name: yup.string(),\n  country_of_birth: yup.object(dropdownStringSchema).required(requiredError).default(undefined),\n  city_of_birth: yup.lazy(value => {\n    switch (typeof value) {\n      case 'object':\n        return yup.object(dropdownStringSchema).required(requiredError).default(undefined);\n      case 'string':\n        return yup.string().required(requiredError);\n      default:\n        return yup.object(dropdownStringSchema).default(undefined);\n    }\n  }),\n  nationality: yup.object(dropdownStringSchema).default(undefined),\n  citizenship: yup.object(dropdownStringSchema).required(requiredError).default(undefined),\n  national_minority: yup.object(dropdownStringSchema),\n  address: yup.string().required(requiredError),\n  father_name: yup.string().required(requiredError),\n  mother_name: yup.string().required(requiredError),\n  mother_birth_last_name: yup.string(),\n  personal_id: yup.string(),\n  official_personal_id: yup.string().required(requiredError).default(undefined),\n  official_personal_document_number: yup.string().required(requiredError).default(undefined),\n  official_personal_document_issuer: yup\n    .object()\n    .shape(dropdownStringSchema)\n    .required(requiredError)\n    .default(undefined),\n  gender: yup.object(dropdownStringSchema).required(requiredError).default(undefined),\n  single_parent: yup.object(dropdownStringSchema).required(requiredError).default(undefined),\n  housing_done: yup.object(dropdownStringSchema).required(requiredError).default(undefined),\n  is_president: yup.boolean().default(false),\n  is_judge: yup.boolean().default(false),\n  housing_description: yup.string(),\n  marital_status: yup.object(dropdownStringSchema).required(requiredError).default(undefined),\n  date_of_becoming_judge: yup.date().nullable(),\n  middle_name: yup.string(),\n  organization_unit_id: yup.object(dropdownNumberSchema).required(requiredError).default(undefined),\n  department_id: yup\n    .object(dropdownNumberSchema)\n    .nullable()\n    .when('is_judge', {\n      is: false,\n      then: schema => schema.required(requiredError),\n    })\n    .default(undefined),\n  job_position_in_organization_unit_id: yup.object(dropdownNumberSchema).nullable().default(undefined),\n  contract_type_id: yup.object(dropdownNumberSchema).required(requiredError).default(undefined),\n  date_of_end: yup.date().nullable(),\n  date_of_start: yup.date().required(requiredError).nullable(),\n  date_of_eligibility: yup.date().required(requiredError).nullable(),\n  user_profile_id: yup\n    .number()\n    .when('id', {is: (id: number) => id > 0, then: schema => schema.required(requiredError)}),\n  active: yup.boolean(),\n  email: yup\n    .string()\n    .email('Nije validan e-mail')\n    .when('id', {is: undefined, then: schema => schema.required(requiredError)}),\n  phone: yup.string().when('id', {\n    is: undefined,\n    then: schema => schema.required(requiredError),\n  }),\n  secondary_email: yup\n    .string()\n    .email('Nije validan e-mail')\n    .when('id', {is: undefined, then: schema => schema.required(requiredError)}),\n  pin: yup\n    .string()\n    .matches(/^(0|[1-9]\\d*)(\\.\\d+)?$/, 'Ovo polje je obavezno')\n    .when('id', {is: undefined, then: schema => schema.required(requiredError)}),\n  password: yup.string().when('id', {is: undefined, then: schema => schema.required(requiredError)}),\n});\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/confirmations/confirmations.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1012,1015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1012,1015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2017,2020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2017,2020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2681,2684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2681,2684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2729,2732],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2729,2732],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Button, Dropdown, EditIconTwo, Table, TableHead, Theme, TrashIcon, Typography} from 'client-library';\nimport React, {useMemo, useState} from 'react';\nimport {ConfirmationsModal} from '../../../components/confirmationsModal/confirmationsModal';\nimport useResolutionDelete from '../../../services/graphql/userProfile/resolution/useResolutionDelete';\nimport useResolutionOverview from '../../../services/graphql/userProfile/resolution/useResolutionOverview';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {UserProfileResolutionItem} from '../../../types/graphql/userProfileGetResolution';\nimport {MicroserviceProps} from '../../../types/micro-service-props';\nimport {parseDate} from '../../../utils/dateUtils';\nimport {Container, TableHeader, YearWrapper} from './styles';\nimport {yearsForDropdownFilter} from '../../../utils/constants';\n\nconst tableHeads: TableHead[] = [\n  {\n    title: 'Vrsta',\n    accessor: 'resolution_type',\n    type: 'custom',\n    renderContents: (item: any) => {\n      return <Typography variant=\"bodyMedium\" content={item.title} />;\n    },\n  },\n  {\n    title: 'Datum izdavanja',\n    accessor: 'date_of_start',\n    type: 'custom',\n    renderContents: (date_of_start: string) => <Typography content={date_of_start ? parseDate(date_of_start) : ''} />,\n  },\n  {title: 'Svrha', accessor: 'resolution_purpose', type: 'text'},\n  {\n    title: 'Pravosnažnost',\n    accessor: 'is_affect',\n    type: 'custom',\n    renderContents: is_affect => <Typography content={is_affect ? 'Da' : 'Ne'} />,\n  },\n  {title: 'Datoteka', accessor: 'file_id', type: 'text'},\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n\nexport const ConfirmationsPage: React.FC<{context: MicroserviceProps}> = ({context}) => {\n  const years = yearsForDropdownFilter();\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n  const [form, setForm] = useState<any>();\n  const userProfileID = context.navigation.location.pathname.split('/')[4];\n  const {data, fetch, loading} = useResolutionOverview(userProfileID);\n  const tableData = data;\n  const {mutate} = useResolutionDelete();\n\n  const selectedItem = useMemo(\n    () => tableData?.find((item: UserProfileResolutionItem) => item.id === selectedItemId),\n    [selectedItemId, tableData],\n  );\n\n  const filteredTableData = useMemo(() => {\n    if (form?.year?.id) {\n      return tableData?.filter((item: UserProfileResolutionItem) => item.date_of_start.includes(form.year.id));\n    }\n    return tableData;\n  }, [tableData, form?.year?.id]);\n\n  const handleChange = (value: any, name: string) => {\n    setForm((prevState: any) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const handleEdit = (item: UserProfileResolutionItem) => {\n    setSelectedItemId(item.id);\n    setShowModal(true);\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedItemId(id);\n  };\n\n  const handleDelete = () => {\n    mutate(\n      selectedItemId,\n      () => {\n        fetch();\n        context.alert.success('Uspješno obrisano.');\n        setShowDeleteModal(false);\n        setSelectedItemId(0);\n      },\n      () => {\n        context.alert.error('Greška. Brisanje nije moguće.');\n      },\n    );\n    setShowDeleteModal(false);\n    setSelectedItemId(0);\n  };\n\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = (refetch: boolean) => {\n    setShowModal(false);\n    setSelectedItemId(0);\n    refetch && fetch();\n  };\n\n  return (\n    <Container>\n      <TableHeader>\n        <YearWrapper>\n          <Dropdown\n            label={<Typography variant=\"bodySmall\" content=\"GODINA:\" />}\n            options={years}\n            name=\"year\"\n            value={form?.year || null}\n            onChange={handleChange}\n            placeholder=\"Odaberite godinu:\"\n          />\n        </YearWrapper>\n        <div>\n          <Button\n            variant=\"secondary\"\n            content={<Typography variant=\"bodyMedium\" content=\"Dodajte svrhu\" />}\n            onClick={handleAdd}\n          />\n        </div>\n      </TableHeader>\n\n      <div>\n        <Table\n          tableHeads={tableHeads}\n          data={filteredTableData || []}\n          isLoading={loading}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n      </div>\n\n      <ConfirmationsModal\n        open={showModal}\n        onClose={refetch => handleCloseModal(refetch)}\n        selectedItem={selectedItem}\n        userProfileId={userProfileID}\n        key={selectedItem ? selectedItem.id : 'new'}\n        alert={context.alert}\n      />\n\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </Container>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/confirmations/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/confirmations/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[60,63],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[60,63],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[103,106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[103,106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[151,154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[151,154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ConfirmationsModalProps {\n  selectedItem?: any;\n  open: boolean;\n  onClose: (action?: any) => void;\n  userProfileId: number;\n  alert: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/constants.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'resolveVariant' is assigned a value but never used.","line":6,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":21},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":8,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":8,"endColumn":5,"fix":{"range":[291,295],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":9,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":9,"endColumn":7,"fix":{"range":[303,309],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":10,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":10,"endColumn":5,"fix":{"range":[327,331],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":11,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":11,"endColumn":7,"fix":{"range":[339,345],"text":"    "}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import {TableHead, Typography, Badge} from 'client-library';\nimport {parseDate} from '../../utils/dateUtils';\nimport {DropdownDataNumber} from '../../types/dropdownData';\nimport {UserProfile} from '../../types/graphql/userProfiles';\n\nconst resolveVariant = (id: number) => {\n  switch (id) {\n    case 0:\n      return 'success';\n    case 1:\n      return 'warning';\n  }\n};\n\nexport const tableHeads: TableHead[] = [\n  {title: 'Ime i Prezime', accessor: 'full_name', sortable: true},\n  {\n    title: 'Datum rođenja',\n    accessor: 'date_of_birth',\n    type: 'custom',\n    renderContents: value => <Typography content={parseDate(value)} variant=\"bodyMedium\" />,\n  },\n  {\n    title: 'Organizaciona jedinica',\n    accessor: 'organization_unit',\n    type: 'custom',\n    renderContents: organization_unit => <Typography content={organization_unit?.title} variant=\"bodyMedium\" />,\n  },\n  {\n    title: 'Radno mjesto',\n    accessor: 'job_position',\n    type: 'custom',\n    renderContents: (job_position: DropdownDataNumber, row: UserProfile) => (\n      <Typography\n        content={row.is_judge ? 'Sudija' : row.is_judge_president ? 'Predsjednik suda' : job_position?.title}\n        variant=\"bodyMedium\"\n      />\n    ),\n  },\n  {\n    title: 'Status',\n    accessor: 'active',\n    type: 'custom',\n    renderContents: (active, row) =>\n      row.active === 'Aktivan' ? (\n        <Badge style={{maxWidth: 150}} content={<Typography content=\"Aktivan\" />} variant=\"success\" />\n      ) : (\n        <Badge style={{maxWidth: 150}} content={<Typography content=\"Neaktivan\" />} variant=\"warning\" />\n      ),\n  },\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n\nexport const employeeTabs = [\n  {id: 1, title: 'Osnovni Podaci', routeName: 'basic-info', disabled: false},\n  {id: 2, title: 'Obrazovanje', routeName: 'education', disabled: false},\n  {id: 3, title: 'Radna Knjižica', routeName: 'experience', disabled: false},\n  {id: 4, title: 'Članovi Porodice', routeName: 'family-members', disabled: false},\n  {id: 5, title: 'Dozvole', routeName: 'foreigner-permits', disabled: false},\n  {id: 6, title: 'Parametri za Obračun Plata', routeName: 'salary-params', disabled: false},\n  {id: 7, title: 'Lična Ocjena', routeName: 'evaluations', disabled: false},\n  {id: 10, title: 'Odsutnost', routeName: 'absents', disabled: false},\n  {id: 12, title: 'Potvrde i Rješenja', routeName: 'confirmations', disabled: false},\n];\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/education/education.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/education/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/education/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[154,157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[154,157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[241,244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[241,244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[256,259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[256,259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[276,279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[276,279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[338,341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[338,341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[372,375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[372,375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[493,496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[493,496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[510,513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[510,513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[530,533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[530,533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {ReactElement} from 'react';\nimport {MicroserviceProps} from '../../../types/micro-service-props';\n\nexport interface EducationPageProps {\n  data?: any[];\n  context: MicroserviceProps;\n}\n\nexport interface ModalProps {\n  selectedItem?: any;\n  alert?: any;\n  navigation?: any;\n  open: boolean;\n  onClose: () => void;\n  dropdownData?: any[];\n  handleDelete?: (action?: any) => void;\n  customContent?: ReactElement;\n  refetchList?: () => void;\n}\n\nexport interface TableProps {\n  languages?: any[];\n  alert?: any;\n  navigation?: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/evaluations/evaluations.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[992,995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[992,995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1237,1240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1237,1240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useMemo, useState} from 'react';\nimport {Typography, Button, Table, TableHead, TrashIcon, Theme, EditIconTwo} from 'client-library';\nimport {EvaluationPageProps} from './types';\nimport {Container} from './styles';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {UserProfileEvaluation} from '../../../types/graphql/userProfileGetEvaluations';\nimport {EvaluationModal} from '../../../components/evaluationModal/evaluationModal';\nimport useEvaluationOverview from '../../../services/graphql/userProfile/evaluation/useEvaluationOverview';\nimport useEvaluationDelete from '../../../services/graphql/userProfile/evaluation/useEvaluationDelete';\nimport useSettingsDropdownOverview from '../../../services/graphql/settingsDropdown/useSettingsDropdownOverview';\nimport {parseDate} from '../../../utils/dateUtils';\n\nconst tableHeads: TableHead[] = [\n  {\n    title: 'Godina',\n    accessor: 'date_of_evaluation',\n    type: 'custom',\n    renderContents: (date: any) => <Typography variant=\"bodyMedium\" content={parseDate(date)} />,\n  },\n  {title: 'Ocjena', accessor: 'score', type: 'text'},\n  {\n    title: 'Pravosnažnost',\n    accessor: 'is_relevant',\n    type: 'custom',\n    renderContents: (is_relevant: any) => <Typography variant=\"bodyMedium\" content={is_relevant ? 'Da' : 'Ne'} />,\n  },\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n\nexport const EvaluationsPage: React.FC<EvaluationPageProps> = ({context}) => {\n  const userProfileID = context.navigation.location.pathname.split('/')[4];\n  const {data: userEvaluationData, refetchData} = useEvaluationOverview(userProfileID);\n  const {data: evaluationTypes, loading} = useSettingsDropdownOverview({entity: 'evaluation_types'});\n\n  const [showModal, setShowModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = useState<number>(0);\n\n  const selectedItem = useMemo(() => {\n    return userEvaluationData?.find((item: UserProfileEvaluation) => item.id === selectedItemId);\n  }, [selectedItemId]);\n\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const {mutate} = useEvaluationDelete(\n    () => {\n      refetchData();\n      context.alert.success('Uspješno obrisano.');\n    },\n    () => {\n      context.alert.error('Greška. Brisanje nije moguće.');\n    },\n  );\n\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedItemId(id);\n  };\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const handleEdit = (item: UserProfileEvaluation) => {\n    setSelectedItemId(item.id as number);\n    setShowModal(true);\n  };\n\n  const closeModal = () => {\n    setShowModal(false);\n    setSelectedItemId(0);\n  };\n\n  const handleDelete = () => {\n    mutate(selectedItemId);\n    setShowDeleteModal(false);\n    setSelectedItemId(0);\n  };\n\n  return (\n    <Container>\n      <span>\n        <Button\n          variant=\"secondary\"\n          content={<Typography variant=\"bodyMedium\" content=\"Dodajte ličnu ocjenu\" />}\n          onClick={handleAdd}\n        />\n      </span>\n      <div>\n        <Table\n          tableHeads={tableHeads}\n          data={userEvaluationData || []}\n          isLoading={loading}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n      </div>\n      {showModal && (\n        <EvaluationModal\n          alert={context.alert}\n          refetchList={refetchData}\n          open={showModal}\n          onClose={closeModal}\n          selectedItem={selectedItem}\n          userProfileId={userProfileID}\n          evaluationTypes={evaluationTypes || []}\n        />\n      )}\n\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </Container>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/evaluations/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/evaluations/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[339,342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[339,342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[388,391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[388,391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[432,435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[432,435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[447,450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[447,450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {SettingsDropdown} from '../../../types/graphql/settingsDropdownType';\nimport {MicroserviceProps} from '../../../types/micro-service-props';\n\nexport interface EvaluationPageProps {\n  context: MicroserviceProps;\n}\n\nexport type YearType = {\n  id: number | string;\n  title: string;\n};\n\nexport interface EvaluationModalProps {\n  alert: any;\n  refetchList: () => void;\n  selectedItem?: any;\n  open: boolean;\n  onClose: (refetch?: any, message?: any) => void;\n  userProfileId?: number;\n  evaluationTypes: SettingsDropdown[];\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/experience/constants.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[274,277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[274,277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[596,599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[596,599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[788,791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[788,791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1005,1008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1005,1008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1240,1243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1240,1243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {TableHead, Typography} from 'client-library';\nimport {parseDate} from '../../../utils/dateUtils';\n\nexport const tableHeads: TableHead[] = [\n  {\n    title: 'Sudstvo',\n    accessor: 'relevant',\n    type: 'custom',\n    renderContents: (item: any) => {\n      return item === 'hide' ? <></> : <Typography variant=\"bodyMedium\" content={item ? 'Da' : 'Ne'} />;\n    },\n  },\n  {\n    title: 'Organizacija',\n    accessor: 'organization_unit',\n    type: 'custom',\n  },\n  {\n    title: 'Početak',\n    accessor: 'date_of_start',\n    type: 'custom',\n    renderContents: (item: any) => (item ? <Typography variant=\"bodyMedium\" content={parseDate(item)} /> : <></>),\n  },\n  {\n    title: 'Kraj',\n    accessor: 'date_of_end',\n    type: 'custom',\n    renderContents: (item: any) => (item ? <Typography variant=\"bodyMedium\" content={parseDate(item)} /> : <></>),\n  },\n  {\n    title: 'Radni staž',\n    accessor: 'amount_of_insured_experience',\n    type: 'custom',\n    renderContents: (_, row: any) => {\n      return <Typography variant=\"bodyMedium\" content={row.amount_of_insured_experience} />;\n    },\n  },\n  {\n    title: 'Radno iskustvo',\n    accessor: 'amount_of_experience',\n    type: 'custom',\n    renderContents: (_, row: any) => <Typography variant=\"bodyMedium\" content={row.amount_of_experience} />,\n  },\n  {title: 'Dosije', accessor: 'reference_file_id', type: 'text'},\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/experience/experience.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1272,1275],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1272,1275],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1979,1982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1979,1982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4303,4306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4303,4306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4554,4557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4554,4557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Button, EditIconTwo, Table, Theme, TrashIcon, Typography} from 'client-library';\nimport React, {useMemo, useState} from 'react';\nimport {ExperienceModal} from '../../../components/experienceModal/experienceModal';\nimport useGetOrganizationUnits from '../../../services/graphql/organizationUnits/useGetOrganizationUnits';\nimport useExperienceDelete from '../../../services/graphql/userProfile/experience/useExperienceDelete';\nimport useExperience from '../../../services/graphql/userProfile/experience/useExperienceOverview';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {UserProfileExperience} from '../../../types/graphql/userProfileGetExperienceTypes';\nimport {tableHeads} from './constants';\nimport {Container} from './styles';\nimport {ExperiencePageProps} from './types';\n\nexport const ExperiencePage: React.FC<ExperiencePageProps> = ({context}) => {\n  const userProfileID = context.navigation.location.pathname.split('/')[4];\n  const {experienceData, refetchData, loading} = useExperience(userProfileID);\n  const {organizationUnits} = useGetOrganizationUnits(undefined, {allOption: true});\n\n  const tableData = useMemo(() => {\n    let totalInsuredExperience = 0;\n    let totalExperience = 0;\n\n    experienceData?.forEach((item: any) => {\n      totalExperience += item.amount_of_experience;\n      totalInsuredExperience += item.amount_of_insured_experience;\n    });\n\n    return (\n      experienceData && [\n        ...experienceData,\n        {\n          id: '',\n          relevant: 'hide',\n          organization_unit: '',\n          date_of_start: '',\n          date_of_end: '',\n          amount_of_insured_experience: (\n            <Typography variant=\"bodyMedium\" style={{fontWeight: 600}} content={totalInsuredExperience} />\n          ),\n          amount_of_experience: <Typography variant=\"bodyMedium\" style={{fontWeight: 600}} content={totalExperience} />,\n          reference_file_id: '',\n          TABLE_ACTIONS: '',\n        } as any,\n      ]\n    );\n  }, [experienceData]);\n\n  const [showModal, setShowModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n\n  const selectedItem = useMemo(() => {\n    return tableData?.find((item: UserProfileExperience) => item.id === selectedItemId);\n  }, [selectedItemId]);\n\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const {mutate} = useExperienceDelete(\n    () => {\n      refetchData();\n      context.alert.success('Uspješno obrisano.');\n    },\n    () => {\n      context.alert.error('Greška. Brisanje nije moguće.');\n    },\n  );\n\n  const handleEdit = (item: UserProfileExperience) => {\n    setSelectedItemId(item.id);\n    setShowModal(true);\n  };\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedItemId(id);\n  };\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const closeModal = () => {\n    setShowModal(false);\n    setSelectedItemId(0);\n  };\n\n  const handleDelete = () => {\n    mutate(selectedItemId);\n    setShowDeleteModal(false);\n    setSelectedItemId(0);\n  };\n\n  const updatedTableHeads = useMemo(() => {\n    return [\n      ...tableHeads.slice(0, 1),\n      {\n        ...tableHeads[1],\n        renderContents: (organization_unit: string, row: UserProfileExperience) => {\n          return (\n            <Typography\n              variant=\"bodyMedium\"\n              content={\n                organization_unit\n                  ? organization_unit\n                  : organizationUnits.find(orgUnit => orgUnit.id === row.organization_unit_id)?.title || ''\n              }\n            />\n          );\n        },\n      },\n      ...tableHeads.slice(3),\n    ];\n  }, [organizationUnits, tableHeads]);\n\n  return (\n    <Container>\n      <span>\n        <Button\n          variant=\"secondary\"\n          content={<Typography variant=\"bodyMedium\" content=\"Dodajte novo zaposlenje\" />}\n          onClick={handleAdd}\n        />\n      </span>\n      <div>\n        <Table\n          tableHeads={updatedTableHeads}\n          data={tableData || []}\n          isLoading={loading}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n              shouldRender: item => item.id !== ('' as any),\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n              shouldRender: item => item.id !== ('' as any),\n            },\n          ]}\n        />\n      </div>\n      {showModal && (\n        <ExperienceModal\n          alert={context.alert}\n          refetchList={refetchData}\n          open={showModal}\n          onClose={closeModal}\n          selectedItem={selectedItem}\n          userProfileId={userProfileID}\n        />\n      )}\n\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </Container>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/experience/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/experience/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[119,122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[119,122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[208,211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[208,211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[257,260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[257,260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[301,304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[301,304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[316,319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[316,319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {MicroserviceProps} from '../../../types/micro-service-props';\n\nexport interface ExperiencePageProps {\n  data?: any[];\n  context: MicroserviceProps;\n}\n\nexport interface ExperienceModalProps {\n  alert: any;\n  refetchList: () => void;\n  selectedItem?: any;\n  open: boolean;\n  onClose: (refetch?: any, message?: any) => void;\n  userProfileId?: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/experience/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[96,99],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[96,99],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {parseDateForBackend} from '../../../utils/dateUtils';\n\nexport const formatData = (data: any, newExperience?: boolean) => {\n  const payload = {\n    ...data,\n    relevant: data?.relevant?.id === 'Da' ? true : false,\n    organization_unit_id: data?.relevant?.id === 'Da' ? data?.organization_unit_id?.id : null,\n    organization_unit: data.organization_unit,\n    date_of_start: parseDateForBackend(data?.date_of_start),\n    date_of_end: parseDateForBackend(data?.date_of_end),\n    amount_of_experience: data?.amount_of_experience,\n    amount_of_insured_experience:\n      Number(data?.amount_of_insured_experience) >= data?.amount_of_experience\n        ? data?.amount_of_experience\n        : Number(data?.amount_of_insured_experience),\n    reference_file_id: data?.reference_file_id,\n  };\n\n  if (newExperience) {\n    delete payload.id;\n  }\n\n  delete payload.selectedOrganizationUnit;\n  delete payload.created_at;\n  delete payload.updated_at;\n\n  return payload;\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/family/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/family/family.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1513,1516],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1513,1516],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useMemo, useState} from 'react';\nimport {Container} from './styles';\nimport {Typography, Button, Table, EditIcon, TrashIcon, Theme} from 'client-library';\nimport {FamilyPageProps} from './types';\nimport {FamilyMemberModal} from '../../../components/familyMemberModal/familyMemberModal';\nimport {tableHeads} from './constants';\nimport {UserProfileFamily} from '../../../types/graphql/userProfileGetFamilyTypes';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport useFamilyOverview from '../../../services/graphql/userProfile/family/useFamilyOverview';\nimport useFamilyDelete from '../../../services/graphql/userProfile/family/useFamilyDelete';\n\nexport const FamilyPage: React.FC<FamilyPageProps> = ({context}) => {\n  const userProfileID = context.navigation.location.pathname.split('/')[4];\n  const {familyData, refetchData, loading} = useFamilyOverview(userProfileID);\n  const [showModal, setShowModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n\n  const selectedItem = useMemo(() => {\n    return familyData?.find((item: UserProfileFamily) => item.id === selectedItemId);\n  }, [selectedItemId]);\n\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const {mutate, success, error} = useFamilyDelete(() => {\n    if (success) {\n      refetchData();\n      context.alert.success('Uspješno obrisano.');\n    } else if (error) {\n      context.alert.error('Greška. Brisanje nije moguće.');\n    }\n  });\n\n  const handleEdit = (item: any) => {\n    setSelectedItemId(item.id);\n    setShowModal(true);\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedItemId(id);\n  };\n\n  const handleDelete = () => {\n    mutate(selectedItemId);\n    setShowDeleteModal(false);\n    setSelectedItemId(0);\n  };\n\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setSelectedItemId(0);\n  };\n\n  return (\n    <Container>\n      <span>\n        <Button\n          variant=\"secondary\"\n          content={<Typography variant=\"bodyMedium\" content=\"Dodajte člana porodice\" />}\n          onClick={handleAdd}\n        />\n      </span>\n      <div>\n        <Table\n          tableHeads={tableHeads}\n          data={familyData || []}\n          isLoading={loading}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item),\n              icon: <EditIcon stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n      </div>\n      <FamilyMemberModal\n        open={showModal}\n        onClose={handleCloseModal}\n        selectedItem={selectedItem}\n        countries={context?.countries}\n        userProfileId={userProfileID}\n        alert={context.alert}\n        refetch={refetchData}\n      />\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </Container>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/family/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/family/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[115,118],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[115,118],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[214,217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[214,217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[273,276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[273,276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[315,318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[315,318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {MicroserviceProps} from '../../../types/micro-service-props';\n\nexport interface FamilyPageProps {\n  data?: any[];\n  context: MicroserviceProps;\n}\n\nexport interface FamilyMemberModalProps {\n  selectedItem?: any;\n  open: boolean;\n  onClose: () => void;\n  countries?: any[];\n  userProfileId?: number;\n  alert: any;\n  refetch: () => void;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/family/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[96,99],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[96,99],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {parseDateForBackend} from '../../../utils/dateUtils';\n\nexport const formatData = (data: any) => {\n  const payload = {\n    ...data,\n    id: data?.id || 0,\n    handicapped_person: data?.handicapped_person?.id === 'Da' ? true : false,\n    insurance_coverage: data?.insurance_coverage?.id === 'Ne' ? 'Ne' : 'Da',\n    date_of_birth: parseDateForBackend(data?.date_of_birth),\n    citizenship: data?.citizenship?.id,\n    country_of_birth: data?.country_of_birth?.id,\n    city_of_birth: typeof data?.city_of_birth === 'string' ? data?.city_of_birth : data?.city_of_birth?.title || '',\n    employee_relationship: data?.employee_relationship?.title,\n    gender: data?.gender?.title,\n    nationality: data?.nationality?.title || '',\n    national_minority: data?.national_minority?.id,\n  };\n\n  return payload;\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/foreigners/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/foreigners/foreigners.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/foreigners/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/foreigners/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1162,1165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1162,1165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1604,1607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1604,1607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useRef, useState} from 'react';\nimport EmployeeDetails from '../../components/employeeDetails/employeeDetails';\nimport EmployeesList from '../../components/employeesList/employeesList';\nimport useAppContext from '../../context/useAppContext';\nimport useUserProfiles from '../../services/graphql/userProfile/useUserProfiles';\nimport {ScreenWrapper} from '../../shared/screenWrapper/screenWrapper';\nimport {DropdownDataBoolean, DropdownDataNumber} from '../../types/dropdownData';\nimport {ScreenProps} from '../../types/screen-props';\nimport {useDebounce} from '../../utils/useDebounce';\n\nexport interface EmployeeListFilters {\n  is_active?: DropdownDataBoolean | null;\n  organization_unit_id?: DropdownDataNumber | null;\n  job_position_id?: DropdownDataNumber | null;\n  type?: DropdownDataNumber | null;\n}\n\nconst initialValues: EmployeeListFilters = {\n  is_active: null,\n  organization_unit_id: null,\n  job_position_id: null,\n  type: null,\n};\n\nexport const EmployeesScreen: React.FC<ScreenProps> = () => {\n  const [page, setPage] = useState(1);\n  const [employeeModal, setEmployeeModal] = useState(false);\n\n  const [filters, setFilters] = useState<any>(initialValues);\n  const [search, setSearch] = useState('');\n\n  const screenWrapperRef = useRef<HTMLDivElement>(null);\n\n  const debouncedSearch = useDebounce(search, 500);\n\n  const {navigation} = useAppContext();\n\n  const isDetails = navigation.location.pathname.split('/')[3] === 'details';\n\n  const {userProfiles, total, loading} = useUserProfiles({page, size: 10, ...filters, name: debouncedSearch});\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value});\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const toggleEmployeeImportModal = () => {\n    setEmployeeModal(!employeeModal);\n  };\n\n  return (\n    <ScreenWrapper ref={screenWrapperRef}>\n      <EmployeesList\n        navigation={navigation}\n        onPageChange={onPageChange}\n        toggleEmployeeImportModal={toggleEmployeeImportModal}\n        data={{items: userProfiles, total}}\n        filters={filters}\n        search={search}\n        onFilterChange={onFilterChange}\n        onSearch={e => setSearch(e.target.value)}\n        parentRef={screenWrapperRef}\n        loading={loading}\n      />\n      {isDetails && <EmployeeDetails />}\n    </ScreenWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/salaryParams/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/salaryParams/salaryParams.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1758,1761],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1758,1761],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6196,6199],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6196,6199],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6255,6258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6255,6258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Button, Datepicker, Dropdown, Input} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {yesOrNoOptionsBoolean, yesOrNoOptionsString} from '../../../constants';\nimport useSalaryParamsOverview from '../../../services/graphql/userProfile/salaryParams/useSalaryParamsOverview';\nimport useSalaryParamsInsert from '../../../services/graphql/userProfile/salaryParams/useSalaryParamsinsert';\nimport {UserProfileGetSalaryParams} from '../../../types/graphql/userProfileGetSalaryParams';\nimport {insuranceBasis, salaryRanks} from './constants';\nimport {Controls, FormColumn, FormContainer, FormFooter, FormItem, FormRow, FormWrapper} from './styles';\nimport {SalaryParamsPageProps} from './types';\nimport {formatData, initialValues} from './utils';\nimport {parseToDate} from '../../../utils/dateUtils';\nimport useBasicInfoGet from '../../../services/graphql/userProfile/basicInfo/useBasicInfoGet';\nimport useEducationOverview from '../../../services/graphql/userProfile/education/useEducationOverview';\nimport {educationTypes} from '../../../components/education/modals/constants';\n\nexport const SalaryParams: React.FC<SalaryParamsPageProps> = ({context}) => {\n  const [isDisabled, setIsDisabled] = useState<boolean>(true);\n  const userProfileID = Number(context.navigation.location.pathname.split('/')[4]);\n  const {data, refetch} = useSalaryParamsOverview(userProfileID);\n  const {data: profileData} = useBasicInfoGet(Number(context.navigation.location.pathname.split('/')[4]));\n  const {employeeEducationData: educationData} = useEducationOverview(\n    Number(context.navigation.location.pathname.split('/')[4]),\n    educationTypes.education_academic_types,\n  ) as any;\n\n  const item = useMemo(() => {\n    if (data) {\n      return {\n        ...data,\n        benefited_track: data.benefited_track ? {id: 'Da', title: 'Da'} : {id: 'Ne', title: 'Ne'},\n        without_raise: data.without_raise ? {id: 'Da', title: 'Da'} : {id: 'Ne', title: 'Ne'},\n        insurance_basis: {id: data.insurance_basis, title: data.insurance_basis},\n        obligation_reduction: {id: data.obligation_reduction, title: data.obligation_reduction},\n        weekly_work_hours: {id: data.weekly_work_hours, title: data.weekly_work_hours},\n        salary_rank: {id: data.salary_rank, title: data.salary_rank},\n        created_at: parseToDate(data.created_at),\n        user_resolution_id: data.user_resolution_id ?? {\n          id: data.user_resolution_id,\n          title: data.user_resolution_id,\n        },\n      };\n    }\n\n    return null;\n  }, [data]);\n\n  const {mutate: createSalaryParams} = useSalaryParamsInsert();\n\n  const {\n    register,\n    handleSubmit,\n    formState: {isValid},\n    reset,\n    control,\n  } = useForm({\n    defaultValues: item || initialValues,\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [context.navigation.location]);\n\n  useEffect(() => {\n    if (item) {\n      reset(item);\n    }\n  }, [item]);\n\n  const handleSave = (values: UserProfileGetSalaryParams, close: boolean) => {\n    const payload = formatData({\n      ...values,\n      user_profile_id: userProfileID,\n      organization_unit_id: profileData?.contract.organization_unit?.id,\n    });\n\n    if (!item) {\n      delete payload.id;\n    }\n    delete payload.organization_unit;\n    delete payload.created_at;\n    delete payload.user_resolution_id;\n    delete payload.user_profile;\n    delete payload.resolution;\n\n    if (isValid) {\n      createSalaryParams(\n        payload,\n        () => {\n          refetch();\n          setIsDisabled(true);\n          context.alert.success('Uspješno sačuvano.');\n\n          if (close) {\n            const overviewPathname = context.navigation.location.pathname.split('/').slice(0, 3).join('/');\n            context.navigation.navigate(overviewPathname);\n          }\n        },\n        () => {\n          context.alert.error('Greška. Promjene nisu sačuvane.');\n        },\n      );\n    }\n  };\n\n  return (\n    <FormContainer>\n      <FormWrapper style={{marginTop: '20px'}}>\n        <FormRow>\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"\"\n                control={control}\n                render={({field: {name}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"RADNO MJESTO:\"\n                    isDisabled\n                    value={profileData?.job_position}\n                    options={profileData?.job_position ? new Array(profileData.job_position) : []}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"organization_unit\"\n                control={control}\n                render={({field: {name}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"ORGANIZACIONA JEDINICA:\"\n                    isDisabled\n                    value={profileData?.contract.organization_unit}\n                    options={\n                      profileData?.contract.organization_unit ? new Array(profileData?.contract.organization_unit) : []\n                    }\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"benefited_track\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"BENEFI. STAŽ:\"\n                    isDisabled={isDisabled}\n                    value={value}\n                    options={yesOrNoOptionsString}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"without_raise\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"BEZ POVEĆANJA:\"\n                    isDisabled={isDisabled}\n                    value={value as any}\n                    options={yesOrNoOptionsBoolean as any}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"insurance_basis\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"OSNOVA OSIG. PO PIO:\"\n                    isDisabled={isDisabled}\n                    value={value}\n                    options={insuranceBasis}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"salary_rank\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"TARIFNI PLATNI RAZRED:\"\n                    isDisabled={isDisabled}\n                    value={value}\n                    options={salaryRanks}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"user_resolution_id\"\n                control={control}\n                render={({field: {name}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"VRSTA UGOVORA:\"\n                    isDisabled\n                    value={profileData?.contract.contract_type}\n                    options={profileData?.contract?.contract_type ? new Array(profileData.contract.contract_type) : []}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"\"\n                control={control}\n                render={({field: {name}}) => (\n                  <Datepicker\n                    onChange={() => console.log('change')}\n                    name={name}\n                    selected={parseToDate(profileData?.contract?.date_of_start || null)}\n                    label=\"POČETAK RADNOG ODNOSA:\"\n                    disabled\n                  />\n                )}\n              />\n            </FormItem>\n          </FormColumn>\n\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"weekly_work_hours\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"RADNO VRIJEME:\"\n                    isDisabled={isDisabled}\n                    value={value}\n                    options={[\n                      {id: '10', title: '10'},\n                      {id: '20', title: '20'},\n                      {id: '40', title: '40'},\n                    ]}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"obligation_reduction\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    label=\"UMANJENJE RADNE OBAVEZE:\"\n                    isDisabled={isDisabled}\n                    name={name}\n                    onChange={onChange}\n                    value={value}\n                    options={[\n                      {id: '25%', title: '25%'},\n                      {id: '50%', title: '50%'},\n                      {id: '75%', title: '75%'},\n                    ]}\n                  />\n                )}\n              />\n            </FormItem>\n          </FormColumn>\n\n          <FormColumn>\n            <FormItem>\n              <Input\n                value={educationData?.[0]?.academic_title ? educationData[0].academic_title : ''}\n                label=\"STEPEN STRUČNOG OBRAZOVANJA:\"\n                disabled\n              />\n            </FormItem>\n          </FormColumn>\n          <FormColumn>\n            <FormItem>\n              <FormItem>\n                <Input {...register('education_naming')} label=\"ZANIMANJE PO STRUCI:\" disabled={isDisabled} />\n              </FormItem>\n            </FormItem>\n          </FormColumn>\n        </FormRow>\n      </FormWrapper>\n\n      <FormFooter>\n        <Controls>\n          {isDisabled ? (\n            <Button content=\"Uredi\" variant=\"secondary\" onClick={() => setIsDisabled(false)} />\n          ) : (\n            <>\n              <Button\n                content=\"Sačuvaj i zatvori\"\n                variant=\"secondary\"\n                onClick={() => handleSubmit((data: UserProfileGetSalaryParams) => handleSave(data, true))()}\n              />\n              <Button\n                content=\"Sačuvaj i nastavi\"\n                variant=\"primary\"\n                onClick={() => handleSubmit((data: UserProfileGetSalaryParams) => handleSave(data, false))()}\n              />\n            </>\n          )}\n        </Controls>\n      </FormFooter>\n    </FormContainer>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/salaryParams/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/salaryParams/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[121,124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[121,124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {MicroserviceProps} from '../../../types/micro-service-props';\n\nexport interface SalaryParamsPageProps {\n  data?: any[];\n  context: MicroserviceProps;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/salaryParams/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[190,193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[190,193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {UserProfileGetSalaryParams} from '../../../types/graphql/userProfileGetSalaryParams';\nimport {parseDateForBackend} from '../../../utils/dateUtils';\n\nexport const formatData = (data: any) => {\n  const payload = {\n    ...data,\n    id: data?.id || 0,\n    benefited_track: data?.benefited_track?.id === 'Da' ? true : false,\n    without_raise: data?.without_raise?.id === 'Da' ? true : false,\n    insurance_basis: data?.insurance_basis?.id,\n    obligation_reduction: data?.obligation_reduction?.id,\n    weekly_work_hours: data?.weekly_work_hours.id,\n    salary_rank: data?.salary_rank.id,\n    user_resolution_id: data?.user_resolution_id?.id,\n    created_at: parseDateForBackend(data?.created_at),\n  };\n\n  delete payload.updated_at;\n\n  return payload;\n};\n\nexport const initialValues: UserProfileGetSalaryParams = {\n  id: 0,\n  benefited_track: false,\n  without_raise: false,\n  insurance_basis: '',\n  salary_rank: '',\n  obligation_reduction: '',\n  weekly_work_hours: '',\n  education_rank: '',\n  education_naming: '',\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/types..ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/internalRevision/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/internalRevision/revisionTips/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/internalRevision/revisionTips/revisionTips.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/internalRevision/revisions/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/internalRevision/revisions/revisions.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":3,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3403,3406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3403,3406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3436,3439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3436,3439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3592,3595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3592,3595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3782,3785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3782,3785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3818,3821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3818,3821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4178,4181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4178,4181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":103,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":106,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4219,4222],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4219,4222],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {Button, Divider, Dropdown, EditIconTwo, Table, Theme, TrashIconTwo} from 'client-library';\nimport {useMemo, useState} from 'react';\nimport {RevisionModal} from '../../../components/revisionModal/revisionModal';\nimport useRevisionDelete from '../../../services/graphql/revision/useRevisionDelete';\nimport useRevisionOverview from '../../../services/graphql/revision/useRevisionOverview';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {MicroserviceProps} from '../../../types/micro-service-props';\nimport {FilterContainer, Filters, MainTitle, RevisionListContainer, TableHeader} from '../styles';\nimport {RevisionTableHeads} from './constants';\nimport {DropdownDataNumber} from '../../../types/dropdownData';\nimport {ScreenWrapper} from '../../../shared/screenWrapper/screenWrapper';\nimport useSettingsDropdownOverview from '../../../services/graphql/settingsDropdown/useSettingsDropdownOverview';\nimport useGetOrganizationUnits from '../../../services/graphql/organizationUnits/useGetOrganizationUnits';\n\ninterface RevisionProps {\n  context: MicroserviceProps;\n}\n\nconst RevisionList: React.FC<RevisionProps> = ({context}) => {\n  const [deleteModal, setDeleteModal] = useState(0);\n  const [revisionModalShow, setRevisionModalShow] = useState(false);\n  const planId = context?.navigation?.location?.pathname.split('/')[3];\n  const planIdNumber = parseInt(planId);\n  const [unitID, setUnitID] = useState(0);\n  const [revisorId, setRevisorId] = useState<number>(0);\n  const [revisonTypeId, setRevisonTypeId] = useState<number>(0);\n\n  const [editId, setEditId] = useState(0);\n  const {data, loading, refetch} = useRevisionOverview({\n    page: 1,\n    size: 1000,\n    plan_id: planIdNumber,\n    internal_revision_subject_id: unitID,\n    revision_type_id: revisonTypeId,\n    revisor_id: revisorId,\n  });\n\n  const {mutate} = useRevisionDelete();\n  const {organizationUnits} = useGetOrganizationUnits(undefined, {allOption: true});\n\n  const toogleRevisionModal = (id: number) => {\n    setEditId(id);\n    setRevisionModalShow(!revisionModalShow);\n  };\n\n  const toggleDeleteModal = (id: number) => {\n    setDeleteModal(id);\n  };\n\n  const handleDelete = () => {\n    mutate(\n      deleteModal,\n      () => {\n        toggleDeleteModal(0);\n        refetch();\n        context.alert.success('Uspješno obrisano.');\n      },\n      () => {\n        toggleDeleteModal(0);\n        context.alert.error('Greška. Brisanje nije moguće.');\n      },\n    );\n  };\n\n  const handleEdit = (id: number) => {\n    toogleRevisionModal(id);\n  };\n\n  const {data: revisionTypes} = useSettingsDropdownOverview({entity: 'revision_types'});\n\n  const revisorsList = [\n    {id: 0, title: 'Sve '},\n    ...data.revisors.map((unit: DropdownDataNumber) => {\n      return {id: unit.id, title: unit.title};\n    }),\n  ];\n\n  const revisonTypeListOptions = [\n    {id: 0, title: 'Sve '},\n    ...revisionTypes.map((unit: DropdownDataNumber) => {\n      return {id: unit.id, title: unit.title};\n    }),\n  ];\n\n  return (\n    <ScreenWrapper>\n      <RevisionListContainer>\n        <MainTitle variant=\"bodyMedium\" content=\"REVIZIJE\" />\n        <Divider color={Theme?.palette?.gray200} height=\"1px\" />\n        <TableHeader>\n          <Filters>\n            <FilterContainer>\n              <Dropdown\n                label=\"SUBJEKT REVIZIJE(interna)\"\n                value={organizationUnits?.find((option: any) => option?.id == unitID) as any}\n                onChange={value => {\n                  setUnitID(value.id as number);\n                }}\n                options={organizationUnits as any}\n              />\n            </FilterContainer>\n            <FilterContainer>\n              <Dropdown\n                label=\"REVIZOR\"\n                value={revisorsList?.find((option: any) => option?.id == revisorId) as any}\n                onChange={value => {\n                  setRevisorId(value.id as number);\n                }}\n                options={revisorsList || []}\n              />\n            </FilterContainer>\n            <FilterContainer>\n              <Dropdown\n                label=\"VRSTA REVIZIJE\"\n                value={revisonTypeListOptions?.find((option: any) => option?.id === revisonTypeId) as any}\n                onChange={value => {\n                  setRevisonTypeId(value.id as number);\n                }}\n                options={revisonTypeListOptions || []}\n              />\n            </FilterContainer>\n          </Filters>\n\n          <Button content=\"Dodaj reviziju\" variant=\"secondary\" onClick={() => toogleRevisionModal(0)} />\n        </TableHeader>\n        <Table\n          tableHeads={RevisionTableHeads}\n          data={data?.items || []}\n          style={{marginBottom: 22}}\n          isLoading={loading}\n          onRowClick={row => {\n            context.navigation.navigate(\n              `/hr/revision-recommendations/${row?.plan_id}/revision/${row?.id}/recommendations`,\n              {state: {dateOfRevision: row.date_of_revision}},\n            );\n            context.breadcrumbs.add({\n              name: `Preporuke za ${row.title}`,\n              to: `/hr/revision-recommendations/${row?.plan_id}/revision/${row?.id}/recommendations`,\n            });\n          }}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item.id),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => toggleDeleteModal(item.id),\n              icon: <TrashIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n\n        <DeleteModal open={!!deleteModal} onClose={() => toggleDeleteModal(0)} handleDelete={handleDelete} />\n      </RevisionListContainer>\n\n      {revisionModalShow && (\n        <RevisionModal\n          open={revisionModalShow}\n          onClose={() => toogleRevisionModal(0)}\n          refetchList={refetch}\n          alert={context.alert}\n          id={editId}\n          planId={planIdNumber}\n        />\n      )}\n    </ScreenWrapper>\n  );\n};\n\nexport default RevisionList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/internalRevision/revisionsPlans/revisionsPlansList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1383,1386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1383,1386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2146,2149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2146,2149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2194,2197],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2194,2197],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2364,2367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2364,2367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Button,\n  Divider,\n  Dropdown,\n  EditIconTwo,\n  MicroserviceProps,\n  Table,\n  TableHead,\n  Theme,\n  TrashIconTwo,\n} from 'client-library';\nimport {useMemo, useState} from 'react';\nimport {RevisionPlanModal} from '../../../components/revisionPlanModal/revisionPlanModal';\nimport useRevisionPlanDelete from '../../../services/graphql/revisionsPlans/useRevisionPlanDelete';\nimport useRevisionPlanOverview from '../../../services/graphql/revisionsPlans/useRevisionPlanOverview';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {yearsForDropdownFilter} from '../../../utils/constants';\nimport {RevisionListContainer, MainTitle, TableHeader, FilterContainer} from '../styles';\nimport {ScreenWrapper} from '../../../shared/screenWrapper/screenWrapper';\n\ninterface RevisionPlanListProps {\n  context: MicroserviceProps;\n}\nconst TableHeads: TableHead[] = [\n  {title: 'Godina', accessor: 'year'},\n  {title: 'Naziv plana', accessor: 'name'},\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n\nconst RevisionPlansList: React.FC<RevisionPlanListProps> = ({context}) => {\n  const years = yearsForDropdownFilter(1);\n  const [deleteModal, setDeleteModal] = useState(0);\n  const [revisionPlanModal, setRevisionPlanModal] = useState(false);\n  const [editId, setEditId] = useState(0);\n  const [form, setForm] = useState<any>();\n\n  const {mutate} = useRevisionPlanDelete();\n  const {data, loading, refetch} = useRevisionPlanOverview({page: 1000, size: 1000});\n\n  const toggleDeleteModal = (id: number) => {\n    setDeleteModal(id);\n  };\n\n  const toogleRevisionPlanModal = (id: number) => {\n    setEditId(id);\n    setRevisionPlanModal(!revisionPlanModal);\n  };\n\n  const handleEdit = (id: number) => {\n    toogleRevisionPlanModal(id);\n  };\n\n  const handleDelete = () => {\n    mutate(\n      deleteModal,\n      () => {\n        toggleDeleteModal(0);\n        refetch();\n        context.alert.success('Uspješno obrisano.');\n      },\n      () => {\n        toggleDeleteModal(0);\n        context.alert.error('Greška. Brisanje nije moguće.');\n      },\n    );\n  };\n\n  const handleChange = (value: any, name: string) => {\n    setForm((prevState: any) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const filteredTableData = useMemo(() => {\n    if (form?.year?.id) {\n      return data?.filter((item: any) => item.year.includes(form.year.id));\n    }\n    return data;\n  }, [data, form?.year?.id]);\n\n  return (\n    <ScreenWrapper>\n      <RevisionListContainer>\n        <MainTitle variant=\"bodyMedium\" content=\"GODIŠNJI PLAN REVIZIJA\" />\n        <Divider color={Theme?.palette?.gray200} height=\"1px\" />\n        <TableHeader>\n          <FilterContainer>\n            <Dropdown\n              label=\"GODINA:\"\n              options={years}\n              name=\"year\"\n              value={form?.year || null}\n              onChange={handleChange}\n              placeholder=\"Odaberite godinu:\"\n            />\n          </FilterContainer>\n          <Button content=\"Dodaj plan\" variant=\"secondary\" onClick={() => toogleRevisionPlanModal(0)} />\n        </TableHeader>\n        <Table\n          tableHeads={TableHeads}\n          data={filteredTableData || []}\n          style={{marginBottom: 22}}\n          isLoading={loading}\n          onRowClick={row => {\n            context.navigation.navigate(`/hr/revision-recommendations/${row.id}/revision`);\n            context.breadcrumbs.add({\n              name: `Revizije za ${row.name}`,\n              to: `/hr/revision-recommendations/${row.id}/revision`,\n            });\n          }}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item.id),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => toggleDeleteModal(item.id),\n              icon: <TrashIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n\n        <DeleteModal open={!!deleteModal} onClose={() => toggleDeleteModal(0)} handleDelete={handleDelete} />\n      </RevisionListContainer>\n\n      {revisionPlanModal && (\n        <RevisionPlanModal\n          open={revisionPlanModal}\n          onClose={() => toogleRevisionPlanModal(0)}\n          refetchList={refetch}\n          alert={context.alert}\n          id={editId}\n        />\n      )}\n    </ScreenWrapper>\n  );\n};\n\nexport default RevisionPlansList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/internalRevision/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/applicationDetails/applicationDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1779,1782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1779,1782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Divider, Theme} from 'client-library';\nimport useJobTenderApplications from '../../../services/graphql/jobTenders/useJobTenderApplicationOverview';\nimport InfoPreview from '../../../shared/infoPreview/infoPreview';\nimport {MainTitle} from '../../../shared/mainTitle';\nimport {ScreenWrapper} from '../../../shared/screenWrapper/screenWrapper';\nimport SectionBox from '../../../shared/sectionBox';\nimport {ScreenProps} from '../../../types/screen-props';\nimport {parseDate} from '../../../utils/dateUtils';\nimport {Details, Row} from './styles';\nimport useAppContext from '../../../context/useAppContext';\n\nconst ApplicationDetailsScreen = (props: ScreenProps) => {\n  const {data} = useJobTenderApplications({\n    page: 1,\n    size: 10,\n    id: props.context.navigation.location.pathname.split('/')[4],\n  });\n\n  const {countries} = useAppContext();\n\n  const application = data.items[0];\n\n  return (\n    <ScreenWrapper>\n      <SectionBox style={{marginTop: 25}}>\n        <MainTitle content={`KANDIDAT: ${application?.first_name} ${application?.last_name}`} />\n        <Divider color={Theme?.palette?.gray200} height=\"1px\" />\n\n        <Details>\n          <Row>\n            <InfoPreview label=\"Tip Kandidata:\" value={application?.type} />\n            <InfoPreview label=\"JMBG:\" value={application?.official_personal_id} />\n          </Row>\n          <InfoPreview label=\"Ime:\" value={application?.first_name} />\n          <InfoPreview label=\"Prezime:\" value={application?.last_name} />\n          <InfoPreview label=\"Broj lične karte:\" value={application?.official_personal_id} />\n          <InfoPreview label=\"Datum rođenja:\" value={parseDate(application?.date_of_birth)} />\n          <InfoPreview\n            label=\"Državljanstvo:\"\n            value={countries.find((country: any) => country.alpha3 === application?.citizenship)?.name ?? ''}\n          />\n        </Details>\n      </SectionBox>\n    </ScreenWrapper>\n  );\n};\n\nexport default ApplicationDetailsScreen;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/applicationDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/applications/applications.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1217,1220],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1217,1220],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1895,1898],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1895,1898],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2697,2700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2697,2700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3003,3006],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3003,3006],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {Divider, Pagination, Table, Theme, SearchIcon} from 'client-library';\nimport {useState} from 'react';\nimport useJobTenderApplications from '../../../services/graphql/jobTenders/useJobTenderApplicationOverview';\nimport {MainTitle} from '../../../shared/mainTitle';\nimport {ScreenWrapper} from '../../../shared/screenWrapper/screenWrapper';\nimport SectionBox from '../../../shared/sectionBox';\nimport {ApplicationScreenFilters, JobTenderApplication} from '../../../types/graphql/jobTenders';\nimport {ScreenProps} from '../../../types/screen-props';\nimport {applicationsTableHeads} from '../constants';\nimport useGetOrganizationUnits from '../../../services/graphql/organizationUnits/useGetOrganizationUnits';\nimport useJobTendersTypesSearch from '../../../services/graphql/jobTenderTypes/useJobTendersTypesSearch';\nimport {useDebounce} from '../../../utils/useDebounce';\nimport {FilterDropdown, FilterInput, FilterWrapper} from './style';\n\nconst initialValues: ApplicationScreenFilters = {\n  organization_unit_id: undefined,\n  type_id: undefined,\n};\n\nconst ApplicationsScreen = (props: ScreenProps) => {\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState<any>(initialValues);\n  const [search, setSearch] = useState('');\n  const debouncedSearch = useDebounce(search, 500);\n  const {data: applications, loading} = useJobTenderApplications({page, size: 10, ...filters, search: debouncedSearch});\n  const {typesUnitsList} = useJobTendersTypesSearch('');\n  const {organizationUnits} = useGetOrganizationUnits(undefined, {allOption: true});\n\n  const tableData = applications?.items?.map((item: JobTenderApplication) => ({\n    ...item,\n    full_name: `${item.first_name} ${item.last_name}` || '',\n  }));\n\n  const onSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  };\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value});\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const navigateToDetails = (item: JobTenderApplication) => {\n    props.context.navigation.navigate(`/hr/job-tenders/job-tender-applications/${item.id}`);\n    props.context.breadcrumbs.add({\n      name: `${item.first_name} ${item.last_name}`,\n      to: `/hr/job-tenders/job-tender-applications/${item.id}`,\n    });\n  };\n\n  return (\n    <ScreenWrapper>\n      <SectionBox style={{marginTop: 25}}>\n        <MainTitle content=\"PREGLED SVIH KANDIDATA\" />\n        <Divider color={Theme?.palette?.gray200} height=\"1px\" />\n\n        <FilterWrapper>\n          <FilterDropdown\n            label=\"TIP OGLASA:\"\n            name=\"type_id\"\n            onChange={(value: any) => onFilterChange(value, 'type_id')}\n            value={filters.type_id}\n            options={typesUnitsList}\n            placeholder=\"Tip oglasa:\"\n          />\n          <FilterDropdown\n            label=\"ORGANIZACIONA JEDINICA:\"\n            name=\"organization_unit_id\"\n            onChange={(value: any) => onFilterChange(value, 'organization_unit_id')}\n            value={filters.organization_unit_id}\n            options={organizationUnits}\n            placeholder=\"Odaberite organizacionu jedinicu\"\n          />\n\n          <FilterInput\n            label=\"PRETRAGA PO IMENU:\"\n            placeholder=\"Unesi Pretragu\"\n            onChange={onSearch}\n            value={search}\n            rightContent={<SearchIcon />}\n          />\n        </FilterWrapper>\n\n        <Table\n          tableHeads={applicationsTableHeads}\n          data={tableData || []}\n          style={{marginBottom: 22}}\n          onRowClick={navigateToDetails}\n          isLoading={loading}\n        />\n        <Pagination\n          pageCount={applications.total / 10}\n          onChange={onPageChange}\n          variant=\"filled\"\n          itemsPerPage={2}\n          pageRangeDisplayed={3}\n        />\n      </SectionBox>\n    </ScreenWrapper>\n  );\n};\n\nexport default ApplicationsScreen;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/applications/style.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1653,1656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1653,1656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2358,2361],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2358,2361],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useMemo, useState} from 'react';\nimport {JobTenderModal} from '../../components/jobTenderModal/jobTenderModal';\nimport JobTendersList from '../../components/jobTendersList/jobTendersList';\nimport useJobTendersTypesSearch from '../../services/graphql/jobTenderTypes/useJobTendersTypesSearch';\nimport useJobTendersDelete from '../../services/graphql/jobTenders/useJobTenderDelete';\nimport useJobTendersOverview from '../../services/graphql/jobTenders/useJobTenderOverview';\nimport useGetOrganizationUnits from '../../services/graphql/organizationUnits/useGetOrganizationUnits';\nimport {ScreenWrapper} from '../../shared/screenWrapper/screenWrapper';\nimport {DropdownDataNumber} from '../../types/dropdownData';\nimport {JobTender} from '../../types/graphql/jobTenders';\nimport {ScreenProps} from '../../types/screen-props';\n\nexport interface JobTendersListFilters {\n  active?: {id: boolean | null; title: string};\n  organization_unit_id?: DropdownDataNumber | null;\n  job_position_id?: DropdownDataNumber | null;\n  type_id?: DropdownDataNumber | null;\n}\n\nconst initialValues: JobTendersListFilters = {\n  active: {id: null, title: 'Odaberite status'},\n  organization_unit_id: null,\n  job_position_id: null,\n  type_id: null,\n};\n\nexport const JobTendersScreen: React.FC<ScreenProps> = ({context}) => {\n  const [showModal, setShowModal] = useState(false);\n  const [page, setPage] = useState(1);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n  const {types, typesUnitsList} = useJobTendersTypesSearch('');\n  const {organizationUnits} = useGetOrganizationUnits(undefined, {allOption: true});\n\n  const [filters, setFilters] = useState<any>(initialValues);\n\n  const {data, refetch, loading} = useJobTendersOverview({page, size: 10, ...filters});\n\n  const selectedItem = useMemo(() => {\n    return data?.items?.find((item: JobTender) => item.id === selectedItemId);\n  }, [selectedItemId]);\n\n  const {alert} = context;\n\n  const handleEdit = (item?: JobTender) => {\n    setSelectedItemId(item?.id ? item.id : 0);\n    setShowModal(true);\n  };\n\n  const {mutate: deleteJobTenders} = useJobTendersDelete(\n    () => {\n      refetch();\n      alert.success('Uspješno obrisano.');\n    },\n    () => {\n      alert.error('Greška. Brisanje nije moguće.');\n    },\n  );\n\n  const {\n    navigation: {navigate},\n  } = context;\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value});\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const toggleEmployeeImportModal = (item?: JobTender) => {\n    setShowModal(!showModal);\n    handleEdit(item);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setSelectedItemId(0);\n  };\n\n  return (\n    <ScreenWrapper>\n      <JobTendersList\n        navigate={navigate}\n        toggleJobTenderImportModal={toggleEmployeeImportModal}\n        onPageChange={onPageChange}\n        data={data}\n        dropdownJobTenderType={typesUnitsList || []}\n        organizationUnitsList={organizationUnits}\n        filters={filters}\n        onFilterChange={onFilterChange}\n        deleteJobTender={deleteJobTenders}\n        context={context}\n        loading={loading}\n      />\n      {showModal && (\n        <JobTenderModal\n          open={showModal}\n          onClose={handleCloseModal}\n          selectedItem={selectedItem}\n          jobTenderTypeOptions={types?.items || []}\n          organizationUnitsList={organizationUnits}\n          refetch={refetch}\n          alert={alert}\n        />\n      )}\n    </ScreenWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/jobTenderDetails/jobTenderDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/landing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/constants.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {DropdownDataString} from '../../types/dropdownData';\n\nexport const topicOptions: DropdownDataString[] = [\n  {\n    id: 'Sve',\n    title: 'Sve',\n  },\n  {\n    id: 'Krivica',\n    title: 'Krivica',\n  },\n  {\n    id: 'Parnica',\n    title: 'Parnica',\n  },\n];\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgeNorms/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgeNorms/judges.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2855,2858],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2855,2858],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useEffect, useMemo, useState} from 'react';\nimport {ScreenProps} from '../../../types/screen-props';\nimport useJudgesOverview from '../../../services/graphql/judges/useJudgeOverview';\nimport useGetOrganizationUnits from '../../../services/graphql/organizationUnits/useGetOrganizationUnits';\nimport {DropdownDataNumber} from '../../../types/dropdownData';\nimport {JudgeOverview, Norms} from '../../../types/graphql/judges';\nimport {ScreenWrapper} from '../../../shared/screenWrapper/screenWrapper';\nimport JudgeNormModal from '../../../components/judgeNormModal/judgeNormModal';\nimport NormsList from '../../../components/normsList/normsList';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport JudgesList from '../../../components/judgesList/judgesList';\nimport useJudgeNormsDelete from '../../../services/graphql/judges/useJudgeNormDelete';\n\nexport interface JudgesListFilters {\n  organization_unit: DropdownDataNumber | null;\n  user_profile: DropdownDataNumber | null;\n}\n\nconst initialValues: JudgesListFilters = {\n  organization_unit: null,\n  user_profile: null,\n};\n\nconst JudgeNorms: React.FC<ScreenProps> = ({context}) => {\n  const [showModal, setShowModal] = useState(false);\n  const [page, setPage] = useState(1);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n  const [selectedNormItemId, setSelectedNormItemId] = useState(0);\n  const [normsList, setNormsList] = useState<Norms[]>([]);\n  const {organizationUnits} = useGetOrganizationUnits(undefined, {allOption: true});\n\n  const [filters, setFilters] = useState<JudgesListFilters>(initialValues);\n\n  const {data, total, refetch, loading} = useJudgesOverview({page, size: 10, ...filters});\n  const {judgesUnitsList} = useJudgesOverview({page, size: 1000, ...initialValues});\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const selectedNormItem = useMemo(() => {\n    return normsList?.find((item: Norms) => item.id === selectedNormItemId);\n  }, [selectedNormItemId]);\n\n  const normsListSet = () => {\n    const item = data?.find((item: JudgeOverview) => item.id === selectedItemId);\n    setNormsList([\n      ...(item?.norms || []).map(norm => ({\n        ...norm,\n        full_name: item?.full_name,\n      })),\n    ]);\n  };\n\n  useEffect(() => {\n    normsListSet();\n  }, [data, selectedItemId]);\n\n  const {mutate: deleteJudgeNorm} = useJudgeNormsDelete(\n    () => {\n      refetch();\n      context.success('Uspješno obrisano');\n    },\n    () => {\n      context.error('Brisanje nije uspješno');\n    },\n  );\n\n  const openNormModal = (item?: Norms) => {\n    setShowModal(true);\n    setSelectedNormItemId(item?.id || 0);\n  };\n\n  const toggleJudgesNorms = (item?: JudgeOverview) => {\n    setSelectedItemId(item?.id || 0);\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value});\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setSelectedNormItemId(0);\n  };\n\n  const handleDelete = () => {\n    deleteJudgeNorm(selectedNormItemId);\n    setShowDeleteModal(false);\n    setSelectedNormItemId(0);\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedNormItemId(id);\n  };\n\n  return (\n    <ScreenWrapper>\n      <JudgesList\n        toggleJudgesNorms={toggleJudgesNorms}\n        onPageChange={onPageChange}\n        data={data || []}\n        usersUnitsList={judgesUnitsList}\n        organizationUnitsList={organizationUnits}\n        filters={filters}\n        onFilterChange={onFilterChange}\n        total={total}\n        addNorm={() => openNormModal()}\n        loading={loading}\n      />\n      {normsList.length > 0 && (\n        <NormsList\n          data={normsList}\n          toggleNormsModal={item => openNormModal(item)}\n          handleDeleteIconClick={handleDeleteIconClick}\n          loading={loading}\n        />\n      )}\n\n      <JudgeNormModal\n        alert={context.alert}\n        refetchList={refetch}\n        open={showModal}\n        onClose={handleCloseModal}\n        selectedItem={selectedNormItem}\n        dropdownData={judgesUnitsList}\n      />\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </ScreenWrapper>\n  );\n};\n\nexport default JudgeNorms;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgesDecisionDetails/judgesDecisionDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2800,2803],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2800,2803],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3831,3834],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3831,3834],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3968,3971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3968,3971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4690,4693],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4690,4693],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4799,4802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4799,4802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'positiveIntegerRegex' is assigned a value but never used.","line":144,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":144,"endColumn":31},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":148,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":148,"endColumn":9,"fix":{"range":[5525,5533],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":149,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":149,"endColumn":11,"fix":{"range":[5547,5557],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":150,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":150,"endColumn":13,"fix":{"range":[5621,5633],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":151,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":151,"endColumn":13,"fix":{"range":[5739,5751],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":152,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":152,"endColumn":11,"fix":{"range":[5826,5836],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":153,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":153,"endColumn":11,"fix":{"range":[5839,5849],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":154,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":154,"endColumn":9,"fix":{"range":[5856,5864],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":155,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":155,"endColumn":11,"fix":{"range":[5895,5905],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":156,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":156,"endColumn":13,"fix":{"range":[5969,5981],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":157,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":157,"endColumn":13,"fix":{"range":[6082,6094],"text":"          "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6142,6145],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6142,6145],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":158,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":158,"endColumn":13,"fix":{"range":[6147,6159],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":159,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":159,"endColumn":15,"fix":{"range":[6168,6182],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":160,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":160,"endColumn":17,"fix":{"range":[6189,6205],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":161,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":161,"endColumn":19,"fix":{"range":[6296,6314],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":162,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":162,"endColumn":19,"fix":{"range":[6349,6367],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":163,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":163,"endColumn":21,"fix":{"range":[6374,6394],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":164,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":164,"endColumn":21,"fix":{"range":[6417,6437],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":165,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":165,"endColumn":19,"fix":{"range":[6501,6519],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":166,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":166,"endColumn":17,"fix":{"range":[6522,6538],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":167,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":167,"endColumn":17,"fix":{"range":[6542,6558],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":168,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":168,"endColumn":17,"fix":{"range":[6648,6664],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":169,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":169,"endColumn":17,"fix":{"range":[6686,6702],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":170,"column":1,"nodeType":"JSXIdentifier","messageId":"wrongIndentation","endLine":170,"endColumn":17,"fix":{"range":[6716,6732],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":171,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":171,"endColumn":19,"fix":{"range":[6740,6758],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":172,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":172,"endColumn":21,"fix":{"range":[6775,6795],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":173,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":173,"endColumn":21,"fix":{"range":[6882,6902],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":174,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":174,"endColumn":17,"fix":{"range":[6907,6923],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":175,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":175,"endColumn":15,"fix":{"range":[6925,6939],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":176,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":176,"endColumn":13,"fix":{"range":[6942,6954],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":177,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":177,"endColumn":11,"fix":{"range":[6957,6967],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":178,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":178,"endColumn":11,"fix":{"range":[6970,6980],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":179,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":179,"endColumn":9,"fix":{"range":[6987,6995],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":180,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":180,"endColumn":11,"fix":{"range":[7004,7014],"text":"        "}}],"suppressedMessages":[],"errorCount":33,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":33,"fixableWarningCount":0,"source":"import {Button, Divider, Input, TableHead, Typography} from 'client-library';\nimport {nanoid} from 'nanoid';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {useForm} from 'react-hook-form';\nimport {OverviewBox} from '../../../components/employeesList/styles';\nimport useJudgeResolutionsInsert from '../../../services/graphql/judges/useJudgeResolutionInsert';\nimport useJudgeResolutionsOverview from '../../../services/graphql/judges/useJudgeResolutionOverview';\nimport useOrganizationUintCalculateEmployeeStats from '../../../services/graphql/judges/useOrganizationUintCalculateEmployeeStats';\nimport useGetOrganizationUnits from '../../../services/graphql/organizationUnits/useGetOrganizationUnits';\nimport {MainTitle} from '../../../shared/mainTitle';\nimport {ScreenWrapper} from '../../../shared/screenWrapper/screenWrapper';\nimport {JudgeResolutionItem, JudgeResolution} from '../../../types/graphql/judges';\nimport {judgeResolutionTableHeads} from '../judgeNorms/constants';\nimport {Controls, CustomTable, Filters, FormFooter} from './styles';\nimport useAppContext from '../../../context/useAppContext';\n\nexport interface JudgesNumbersDetailsListProps {\n  isNew?: boolean;\n}\n\nconst defaultValues = {\n  available_slots_presidents: 1,\n  available_slots_judges: 0,\n  number_of_judges: 0,\n  number_of_presidents: 0,\n  number_of_employees: 0,\n  number_of_relocated_judges: 0,\n  number_of_suspended_judges: 0,\n};\n\nexport const JudgesNumbersDetails: React.FC<JudgesNumbersDetailsListProps> = ({isNew}) => {\n  const context = useAppContext();\n  const [isDisabled, setIsDisabled] = useState<boolean>(isNew ? false : true);\n  const {organizationUnits, loading: organizationUnitsLoading} = useGetOrganizationUnits();\n  const id = context.navigation.location.pathname.split('/')[4];\n  const {judgesData: realJudgeNumberData, loading: realJudgeDataLoading} = useOrganizationUintCalculateEmployeeStats({\n    resolution_id: isNew ? null : +id,\n    active: isNew ? true : false,\n  });\n\n  const {data, loading: judgeResolutionsLoading} = useJudgeResolutionsOverview({page: 1, size: 1000});\n\n  const {mutate} = useJudgeResolutionsInsert();\n\n  const isLoading = organizationUnitsLoading || realJudgeDataLoading || judgeResolutionsLoading;\n\n  const resolutionItem = useMemo(() => data.find((resolution: JudgeResolution) => resolution.id === +id), [data, id]);\n\n  useEffect(() => {\n    // Setting the \"isDisabled\" state to true if the decision is not active. Inactive decisions cannot be edited.\n    if (resolutionItem) {\n      setIsDisabled(!resolutionItem?.active);\n    }\n  }, [resolutionItem]);\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors},\n    reset,\n    watch,\n  } = useForm({mode: 'onBlur'});\n\n  const resolutions = watch('resolutions');\n\n  const handleSave = (values: any) => {\n    setIsDisabled(true);\n\n    const data = {\n      id: values.id,\n      serial_number: values.serial_number,\n      year: values.year?.id ?? '',\n      active: true,\n      items: Object.keys(values.resolutions).map(key => ({\n        organization_unit_id: +key,\n        number_of_judges: +values.resolutions[key].available_slots_judges,\n        number_of_presidents: 1,\n        id: resolutionItem?.items.find((i: JudgeResolutionItem) => i.organization_unit.id === +key)?.id ?? 0,\n      })),\n    };\n\n    mutate(\n      data,\n      () => {\n        setIsDisabled(true);\n        context.alert.success('Odluka uspješno sačuvana.');\n\n        context.navigation.navigate('/hr/judges/number-decision');\n        context.breadcrumbs.remove();\n      },\n      () => {\n        context.alert.error('Greška. Promjene nisu sačuvane.');\n      },\n    );\n  };\n\n  const list = useMemo(() => {\n    // Mapping through the organizationUnits and adding the corresponding data from the real, current, judge number data (if editing)\n    let orgUnits: any[] = [];\n\n    orgUnits = organizationUnits.filter(ou => ou.title.indexOf('Sudski savjet') === -1);\n\n    return orgUnits.map((orgItem: any) => {\n      const realJudgeStats = realJudgeNumberData?.find(\n        (resolutionItem: JudgeResolutionItem) => resolutionItem?.organization_unit?.id === orgItem.id,\n      );\n\n      const currResolutionItem =\n        resolutionItem?.items?.find((i: JudgeResolutionItem) => i.organization_unit.id === orgItem.id) ?? defaultValues;\n\n      return {\n        ...currResolutionItem,\n        organization_unit: {id: orgItem.id, title: orgItem.title},\n        number_of_judges: realJudgeStats?.number_of_judges,\n        number_of_presidents: realJudgeStats?.number_of_presidents,\n        id: nanoid(),\n      };\n    });\n  }, [realJudgeNumberData, organizationUnits, resolutionItem]);\n\n  useEffect(() => {\n    const resolutions: any = {};\n    // Creating inputs for each of the organization units in the table\n    list.forEach((listItem: any) => {\n      resolutions[listItem.organization_unit.id] = {\n        ...listItem,\n        organization_unit: listItem.organization_unit,\n      };\n    });\n\n    const initialValues = {\n      id: resolutionItem?.id ?? 0,\n      user_profile_id: 1,\n      serial_number: resolutionItem?.serial_number ?? '',\n      resolutions,\n    };\n\n    reset(initialValues);\n  }, [resolutionItem, list]);\n\n  const updatedTableHeads = useMemo(() => {\n    // Going through tableHeads and adding a renderContents method to the table heads that need a dynamic input\n    const tableHeads = judgeResolutionTableHeads;\n    const positiveIntegerRegex = /^(?:[1-9]\\d*|0)?$/;\n\n    tableHeads.forEach((head: TableHead) => {\n      switch (head.accessor) {\n        case 'total':\n          head.renderContents = (_, resolution: JudgeResolutionItem) => {\n            const judgeDecision = +watch(`resolutions[${resolution?.organization_unit?.id}].available_slots_judges`);\n            return <Typography content={judgeDecision > 0 ? judgeDecision + 1 : 1} />;\n          };\n          break;\n        case 'available_slots_judges':\n          head.renderContents = (_, resolution: JudgeResolutionItem) => {\n            const numberOfJudges = +watch(`resolutions[${resolution?.organization_unit?.id}].number_of_judges`);\n            const resolutionErrors = errors?.resolutions as any;\n            return (\n              <Input\n                {...register(`resolutions[${resolution?.organization_unit?.id}].available_slots_judges`, {\n                  required: 'Ovo polje je obavezno',\n                  min: {\n                    value: numberOfJudges,\n                    message: `Broj sudija ne može biti manji od ${numberOfJudges}`,\n                  },\n                })}\n                value={watch(`resolutions[${resolution?.organization_unit?.id}].available_slots_judges`)}\n                disabled={isDisabled}\n                type=\"number\"\n                error={\n                  resolutionErrors\n                    ? resolutionErrors[resolution?.organization_unit?.id]?.available_slots_judges?.message\n                    : ''\n                }\n              />\n            );\n          };\n          break;\n        default:\n          return;\n      }\n    });\n\n    return tableHeads;\n  }, [isDisabled, resolutionItem, list, errors]);\n\n  return (\n    <ScreenWrapper>\n      <OverviewBox>\n        <MainTitle variant=\"bodyMedium\" content=\"DETALJI ODLUKE\" />\n        <Divider color=\"#615959\" height=\"1px\" />\n\n        <CustomTable\n          tableHeads={updatedTableHeads}\n          isLoading={isLoading}\n          data={resolutions ? Object.values(resolutions) : []}\n          titleElement={\n            <Filters>\n              <Input\n                {...register('serial_number', {required: 'Redni broj je obavezan'})}\n                label=\"REDNI BROJ:\"\n                style={{width: 300}}\n                error={errors.serial_number?.message as string}\n                placeholder=\"Unesite redni broj\"\n                disabled={isDisabled}\n              />\n            </Filters>\n          }\n        />\n        <FormFooter>\n          {(resolutionItem?.active || isNew) && (\n            <Controls>\n              {isDisabled ? (\n                <Button content=\"Uredi\" variant=\"secondary\" onClick={() => setIsDisabled(false)} />\n              ) : (\n                <Button content=\"Sačuvaj \" variant=\"secondary\" onClick={handleSubmit(handleSave)} />\n              )}\n            </Controls>\n          )}\n        </FormFooter>\n      </OverviewBox>\n    </ScreenWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgesDecisionDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgesNumberDecisions/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgesNumberDecisions/judgesNumberDecision.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1057,1060],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1057,1060],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useMemo, useState} from 'react';\nimport JudgesNumbersList from '../../../components/judgesNumbersList/judgesNumbersList';\nimport {ScreenWrapper} from '../../../shared/screenWrapper/screenWrapper';\nimport {DropdownDataString} from '../../../types/dropdownData';\nimport {ScreenProps} from '../../../types/screen-props';\nimport {yearsForDropdownFilter} from '../../../utils/constants';\nimport useJudgesResolutionsOverview from '../../../services/graphql/judges/useJudgeResolutionOverview';\n\nexport interface JudgesNumberListFilters {\n  year: DropdownDataString | null;\n}\n\nconst initialValues: JudgesNumberListFilters = {\n  year: null,\n};\n\nconst JudgesNumberDecisions: React.FC<ScreenProps> = ({context}) => {\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState<JudgesNumberListFilters>(initialValues);\n  const {data: judgesResolutions, total, refetch, loading} = useJudgesResolutionsOverview({page, size: 10});\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value});\n  };\n\n  const yearOptions = useMemo(\n    () => [...yearsForDropdownFilter(5).map(year => ({id: year.id.toString(), title: year.title.toString()}))],\n    [],\n  );\n\n  return (\n    <ScreenWrapper>\n      <JudgesNumbersList\n        years={yearOptions}\n        data={judgesResolutions || []}\n        total={total}\n        filters={filters}\n        onFilterChange={onFilterChange}\n        onPageChange={onPageChange}\n        navigate={context.navigation.navigate}\n        alert={context.alert}\n        refetch={refetch}\n        loading={loading}\n      />\n    </ScreenWrapper>\n  );\n};\n\nexport default JudgesNumberDecisions;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/landing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/landing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/constants.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":7,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":7,"endColumn":5,"fix":{"range":[195,199],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":8,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":8,"endColumn":7,"fix":{"range":[207,213],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":9,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":9,"endColumn":5,"fix":{"range":[231,235],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":10,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":10,"endColumn":7,"fix":{"range":[243,249],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":11,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":11,"endColumn":5,"fix":{"range":[267,271],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":12,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":12,"endColumn":7,"fix":{"range":[280,286],"text":"    "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[772,775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[772,775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1339,1342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1339,1342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import React from 'react';\nimport {TableHead, Typography, Badge} from 'client-library';\nimport {parseDate} from '../../utils/dateUtils';\n\nconst resolveVariant = (id: number) => {\n  switch (id) {\n    case 1:\n      return 'warning';\n    case 2:\n      return 'success';\n    default:\n      return 'primary';\n  }\n};\n\nexport const systematizationDetailsTabs = (id: number) => [\n  {id: 1, title: 'Pregled', routeName: 'overview', disabled: false},\n  {id: 2, title: 'Štampaj', routeName: 'print', disabled: !id},\n];\n\nexport const systematizationTableHeads: TableHead[] = [\n  {title: 'Broj sistematizacije', accessor: 'serial_number', type: 'text', width: '30%'},\n  {\n    title: 'Datum izdavanja',\n    accessor: 'date_of_activation',\n    type: 'custom',\n    renderContents: (item: any) => {\n      return <Typography variant=\"bodyMedium\" content={item !== '' ? parseDate(item) : ''} />;\n    },\n    width: '20%',\n  },\n\n  {\n    title: 'Status',\n    accessor: 'active',\n    type: 'custom',\n    renderContents: (id: number) => (\n      <Badge\n        style={{maxWidth: 150}}\n        content={<Typography content={systematizationStatus[id] || 'Skica'} />}\n        variant={resolveVariant(id)}\n      />\n    ),\n    width: '20%',\n  },\n  {\n    title: 'Organizaciona Jedinica',\n    accessor: 'organization_unit',\n    type: 'custom',\n    renderContents: (item: any) => {\n      return <Typography variant=\"bodyMedium\" content={item.title} />;\n    },\n    width: '25%',\n  },\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n\nconst systematizationStatus: {[key: number]: string} = {\n  0: 'Skica',\n  1: 'Neaktivna',\n  2: 'Aktivna',\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/filters/style.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/filters/systematizationFilters.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[464,467],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[464,467],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[655,658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[655,658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Dropdown, Input, SearchIcon, Theme} from 'client-library';\nimport React from 'react';\nimport useGetOrganizationUnits from '../../../services/graphql/organizationUnits/useGetOrganizationUnits';\nimport {yearsForDropdownFilter} from '../../../utils/constants';\nimport {SystematizationFiltersProps} from '../types';\nimport {FiltersContainer} from './style';\n\nexport const SystematizationFilters: React.FC<SystematizationFiltersProps> = ({setFilters, filters}: any) => {\n  const {organizationUnits} = useGetOrganizationUnits(undefined, {allOption: true});\n  const yearOptions = yearsForDropdownFilter();\n\n  const onFilterChange = (name: string, value: any) => {\n    if (name === 'search') {\n      setFilters('search', value.target.value);\n    } else {\n      setFilters(name, value.id);\n    }\n  };\n\n  return (\n    <FiltersContainer>\n      <Input\n        value={filters.search}\n        name=\"search\"\n        onChange={value => onFilterChange('search', value)}\n        label=\"BROJ SISTEMATIZACIJE:\"\n        rightContent={<SearchIcon style={{marginInline: 10}} stroke={Theme.palette.gray300} />}\n      />\n      <Dropdown\n        value={yearOptions.find(year => year.id === filters.year)}\n        name=\"year\"\n        onChange={value => onFilterChange('year', value)}\n        label=\"GODINA:\"\n        options={yearOptions}\n      />\n      <Dropdown\n        value={organizationUnits.find(orgUnit => orgUnit.id === filters.organization_unit_id)}\n        name=\"organization_unit_id\"\n        onChange={value => onFilterChange('organization_unit_id', value)}\n        label=\"ORG. JEDINICA:\"\n        options={organizationUnits}\n      />\n    </FiltersContainer>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/departments/departments.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3182,3185],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3182,3185],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3447,3450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3447,3450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3843,3846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3843,3846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4190,4193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4190,4193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4419,4422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4419,4422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useState} from 'react';\nimport {DepartmentsProps} from '../../types';\nimport {\n  AccordionHeader,\n  AccordionIconsWrapper,\n  Menu,\n  MenuItem,\n  SectorsContainer,\n  OptionsIcon,\n  JobPositionTableWrapper,\n  AccordionWrapper,\n} from './styles';\nimport {ChevronDownIcon, Typography, Accordion} from 'client-library';\nimport {JobPositionTable} from '../../../../components/jobPositionTable/jobPositionTable';\nimport {DeleteModal} from '../../../../shared/deleteModal/deleteModal';\nimport {SectorJobPosition, SectorType} from '../../../../types/graphql/systematizationsTypes';\n\nconst Departments: React.FC<DepartmentsProps> = ({\n  sectors,\n  handleDeleteSector,\n  systematizationId,\n  refetchDetails,\n  handleEditSector,\n  jobPositionData,\n  allEmployees,\n  activeEmployees,\n  isInactive,\n}) => {\n  const [collapsedSectorId, setCollapsedSectorId] = useState<number>(0);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [deleteItemId, setDeleteItemId] = useState(0);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n\n  const [jobPositions, setJobPositions] = useState<SectorJobPosition[]>([]);\n\n  const toggleAccordion = (sectorId: number) => {\n    // reset if same sector is clicked\n    setSelectedItemId(sectorId === selectedItemId ? 0 : sectorId);\n\n    const jobPositions = sectors?.find(\n      (sector: SectorType) => sector?.id === sectorId,\n    )?.job_positions_organization_units;\n\n    setJobPositions(jobPositions || []);\n\n    setCollapsedSectorId(0);\n  };\n\n  const toggleMenu = (sectorId: number) => {\n    setCollapsedSectorId(prevState => (prevState === sectorId ? 0 : sectorId));\n  };\n\n  const addJobPosition = (e: MouseEvent, sector: SectorType) => {\n    e.stopPropagation();\n\n    setSelectedItemId(sector.id);\n    setCollapsedSectorId(0);\n\n    setJobPositions([\n      {\n        available_slots: 0,\n        description: '',\n        employees: [],\n        id: 0,\n        job_positions: {id: 0, title: ''},\n        requirements: '',\n        serial_number: '',\n      },\n      ...(selectedItemId ? jobPositions : sector.job_positions_organization_units),\n    ]);\n  };\n\n  const cancelJobPosition = () => {\n    // remove the first item from the array\n    setJobPositions(jobPositions.slice(1));\n  };\n\n  const deleteSector = () => {\n    handleDeleteSector(deleteItemId);\n    setShowDeleteModal(false);\n    setDeleteItemId(0);\n  };\n\n  return (\n    <SectorsContainer>\n      {sectors?.map((sector: SectorType) => {\n        const isCollapsed = selectedItemId === sector?.id;\n\n        return (\n          <AccordionWrapper isOpen={isCollapsed} key={`sector-${sector?.id}`} style={{position: 'relative'}}>\n            <Accordion\n              style={{border: 0, padding: 0, marginBottom: 15, display: 'block'}}\n              isOpen={isCollapsed}\n              customHeader={\n                <AccordionHeader color={sector?.color}>\n                  <Typography variant=\"bodyMedium\" content={sector?.title} style={{fontWeight: 600}} />\n                  <AccordionIconsWrapper isOpen={isCollapsed}>\n                    <ChevronDownIcon\n                      width=\"15px\"\n                      height=\"8px\"\n                      onClick={(e: any) => {\n                        e.stopPropagation();\n                        toggleAccordion(sector.id);\n                      }}\n                    />\n                    {!isInactive && (\n                      <OptionsIcon\n                        onClick={(e: any) => {\n                          e.stopPropagation();\n                          toggleMenu(sector.id);\n                        }}\n                      />\n                    )}\n                  </AccordionIconsWrapper>\n                  {!isInactive && (\n                    <Menu open={collapsedSectorId === sector?.id}>\n                      <MenuItem\n                        onClick={(e: any) => {\n                          e.stopPropagation();\n                          handleEditSector(sector.id);\n                          setCollapsedSectorId(0);\n                        }}>\n                        <Typography content=\"Uredi\" variant=\"bodyMedium\" />\n                      </MenuItem>\n\n                      <MenuItem onClick={(e: any) => addJobPosition(e, sector)}>\n                        <Typography content=\"Dodaj radno mjesto\" variant=\"bodyMedium\" />\n                      </MenuItem>\n\n                      <MenuItem\n                        onClick={(e: any) => {\n                          e.stopPropagation();\n                          setShowDeleteModal(true);\n                          setDeleteItemId(sector?.id);\n                          setCollapsedSectorId(0);\n                        }}>\n                        <Typography content=\"Obriši\" variant=\"bodyMedium\" />\n                      </MenuItem>\n                    </Menu>\n                  )}\n                </AccordionHeader>\n              }\n              customContent={\n                isCollapsed ? (\n                  <JobPositionTableWrapper>\n                    <JobPositionTable\n                      data={jobPositions || []}\n                      sectorID={sector?.id}\n                      systematizationID={systematizationId}\n                      refetchDetails={refetchDetails}\n                      jobPositionData={jobPositionData}\n                      allEmployees={allEmployees}\n                      activeEmployees={activeEmployees}\n                      cancel={cancelJobPosition}\n                      isInactive={isInactive}\n                    />\n                  </JobPositionTableWrapper>\n                ) : (\n                  <></>\n                )\n              }\n            />\n          </AccordionWrapper>\n        );\n      })}\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={deleteSector} />\n    </SectorsContainer>\n  );\n};\n\nexport default Departments;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/departments/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/footer/footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/footer/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1840,1843],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1840,1843],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6588,6591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6588,6591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Tab} from '@oykos-development/devkit-react-ts-styled-components';\nimport {Button, Divider, Dropdown, FileUpload, Input, Theme, Typography} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Controller, FormProvider, useForm} from 'react-hook-form';\nimport {StyledTabs} from '../../../components/employeeDetails/styles';\nimport {OverviewBox} from '../../../components/employeesList/styles';\nimport {OrganizationalUnitModal} from '../../../components/organizationUnitModal/organizationUnitModal';\nimport useAppContext from '../../../context/useAppContext';\nimport useDeleteOrganizationUnit from '../../../services/graphql/organizationUnits/useDeleteOrganizationUnit';\nimport useGetOrganizationUnits from '../../../services/graphql/organizationUnits/useGetOrganizationUnits';\nimport useGetSystematizationDetails from '../../../services/graphql/systematization/useGetSystematizationDetails';\nimport useSystematizationInsert from '../../../services/graphql/systematization/useInsertSystematization';\nimport useUserProfiles from '../../../services/graphql/userProfile/useUserProfiles';\nimport {ScreenWrapper} from '../../../shared/screenWrapper/screenWrapper';\nimport {\n  InsertSystematizationParams,\n  SectorType,\n  SystematizationType,\n} from '../../../types/graphql/systematizationsTypes';\nimport {parseToDate} from '../../../utils/dateUtils';\nimport {systematizationDetailsTabs} from '../constants';\nimport {formatSystematization} from '../utils';\nimport Departments from './departments/departments';\nimport {Footer} from './footer/footer';\nimport {PrintPage} from './printPage/printPage';\nimport {FileUploadWrapper, MainWrapper, Row, TitleWrapper, UploadWrapper} from './styles';\nimport useGetJobPositions from '../../../services/graphql/jobPositions/useGetJobPositions';\n\nconst initialValues: any = {\n  organization_unit: null,\n  serial_number: '',\n  description: '',\n  active: 0,\n  date_of_activation: null,\n  sectors: [],\n  file_id: 0,\n  user_profile_id: 0,\n};\n\nexport const SystematizationDetails: React.FC = () => {\n  const {\n    navigation: {\n      navigate,\n      location: {pathname},\n    },\n    breadcrumbs,\n    contextMain,\n  } = useAppContext();\n\n  const systematizationId = pathname.split('/')[4];\n\n  const [activeTab, setActiveTab] = useState(1);\n  const [showEditSectorModal, setShowEditSectorModal] = useState(false);\n  const [sectorId, setSectorId] = useState<number>(0);\n\n  const {alert} = useAppContext();\n\n  const {systematizationDetails, refetch} = useGetSystematizationDetails(+systematizationId);\n  const {organizationUnits} = useGetOrganizationUnits(undefined, {allOption: true});\n  const {jobPositions} = useGetJobPositions('');\n  const {userProfiles, refetch: refetchEmployees} = useUserProfiles({\n    page: 1,\n    size: 100,\n    is_active: null,\n    organization_unit_id: systematizationDetails?.organization_unit,\n    job_position_id: null,\n    type: null,\n  });\n\n  const {mutate: deleteSector} = useDeleteOrganizationUnit();\n  const {mutate} = useSystematizationInsert();\n\n  const isSystematizationInactive = systematizationDetails?.active === 1;\n\n  const selectedSector = useMemo(() => {\n    return systematizationDetails?.sectors?.find((i: SectorType) => i.id === sectorId);\n  }, [sectorId]);\n\n  const methods = useForm({\n    defaultValues: {...initialValues, user_profile_id: contextMain?.id},\n  });\n\n  const handleSave = (data: InsertSystematizationParams) => {\n    const payload = formatSystematization(data);\n\n    mutate(\n      payload,\n      (item: SystematizationType) => {\n        const {id, serial_number} = item;\n\n        const route =\n          id > 0 && !systematizationId ? `/hr/systematization/systematization-details/${id}` : '/hr/systematization';\n        navigate(route, {replace: true});\n\n        // Reset breadcrumbs\n        breadcrumbs.remove();\n\n        id &&\n          breadcrumbs.add({\n            name: `Sistematizacija broj ${serial_number}`,\n            to: `/hr/systematization/systematization-details/${id}`,\n          });\n\n        if (systematizationDetails && systematizationDetails.id) {\n          refetch();\n        }\n\n        alert.success('Uspješno sačuvano');\n      },\n      () => {\n        alert.error('Greška. Promjene nisu sačuvane.');\n      },\n    );\n  };\n\n  const handleCloseModal = () => {\n    setShowEditSectorModal(false);\n  };\n\n  const handleDeleteSector = (id: number) => {\n    deleteSector(\n      id,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisano.');\n      },\n      () => {\n        alert.error('Greška. Promjene nisu sačuvane.');\n      },\n    );\n  };\n\n  const editSector = (id: number) => {\n    setSectorId(id);\n    setShowEditSectorModal(true);\n  };\n\n  const onTabChange = (tab: Tab) => {\n    setActiveTab(tab.id as number);\n  };\n\n  useEffect(() => {\n    if (systematizationDetails) {\n      methods.reset({\n        ...systematizationDetails,\n        date_of_activation: parseToDate(systematizationDetails.date_of_activation),\n        user_profile_id: contextMain?.id,\n      });\n      refetchEmployees();\n    }\n  }, [systematizationDetails]);\n\n  return (\n    <ScreenWrapper>\n      <OverviewBox>\n        <FormProvider {...methods}>\n          <TitleWrapper>\n            <Typography\n              style={{fontWeight: 600}}\n              variant=\"bodyMedium\"\n              content={systematizationDetails?.organization_unit?.title?.toUpperCase() || ''}\n            />\n            <StyledTabs\n              tabs={systematizationDetailsTabs(+systematizationId)}\n              activeTab={activeTab}\n              onChange={onTabChange}\n              //TODO: change in devkit/library\n              style={{borderWidth: '1px', borderRadius: '0.5em 0.5em 0 0', whiteSpace: 'nowrap'}}\n            />\n          </TitleWrapper>\n          <Divider color={Theme?.palette?.gray200} height=\"1px\" style={{margin: 0}} />\n          {activeTab === 1 ? (\n            <MainWrapper>\n              <Row>\n                <Input\n                  {...methods?.register('serial_number', {required: 'Ovo polje je obavezno'})}\n                  label=\"BROJ SISTEMATIZACIJE:\"\n                  error={methods?.formState?.errors.serial_number?.message as string}\n                />\n                <Controller\n                  name=\"organization_unit\"\n                  control={methods?.control}\n                  rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {onChange, name, value}}) => {\n                    return (\n                      <Dropdown\n                        onChange={onChange}\n                        value={value as any}\n                        name={name}\n                        label=\"ORGANIZACIONA JEDINICA:\"\n                        options={organizationUnits}\n                        isDisabled={!!systematizationDetails?.organization_unit?.id}\n                        error={methods?.formState?.errors.organization_unit?.message as string}\n                      />\n                    );\n                  }}\n                />\n              </Row>\n\n              <UploadWrapper>\n                <FileUploadWrapper>\n                  <Typography content=\"Uvodni dio dokumenta\" variant=\"bodySmall\" />\n                  <FileUpload\n                    icon={<></>}\n                    disabled={isSystematizationInactive}\n                    variant=\"secondary\"\n                    onUpload={() => console.log('uploading')}\n                    buttonText=\"Dodaj dokument\"\n                    note=\"Izaberite datoteku ili je prevucite ovdje\"\n                  />\n                </FileUploadWrapper>\n\n                <FileUploadWrapper>\n                  <Typography content=\"Zaključni dio dokumenta\" variant=\"bodySmall\" />\n                  <FileUpload\n                    icon={<></>}\n                    disabled={isSystematizationInactive}\n                    variant=\"secondary\"\n                    onUpload={() => console.log('uploading')}\n                    buttonText=\"Dodaj dokument\"\n                    note=\"Izaberite datoteku ili je prevucite ovdje\"\n                  />\n                </FileUploadWrapper>\n              </UploadWrapper>\n\n              {systematizationId && +systematizationId > 0 && !isSystematizationInactive && (\n                <Button\n                  style={{height: '72px'}}\n                  variant=\"secondary\"\n                  content=\"Dodaj odjeljenje\"\n                  onClick={() => setShowEditSectorModal(true)}\n                />\n              )}\n\n              <Departments\n                sectors={systematizationDetails?.sectors ?? []}\n                handleDeleteSector={id => handleDeleteSector(id)}\n                systematizationId={systematizationId}\n                refetchDetails={refetch}\n                handleEditSector={(id: number) => editSector(id)}\n                jobPositionData={jobPositions}\n                allEmployees={userProfiles}\n                activeEmployees={systematizationDetails?.active_employees ?? []}\n                isInactive={isSystematizationInactive}\n              />\n\n              <FileUploadWrapper>\n                <Typography content=\"dokument o usvajanju sistematizacije\" variant=\"bodySmall\" />\n                <FileUpload\n                  icon={<></>}\n                  disabled={isSystematizationInactive}\n                  style={{width: '100%', marginRight: 10}}\n                  variant=\"secondary\"\n                  onUpload={() => console.log('uploading')}\n                  buttonText=\"Dodaj dokument\"\n                  note=\"Izaberite datoteku ili je prevucite ovdje\"\n                />\n              </FileUploadWrapper>\n            </MainWrapper>\n          ) : (\n            <PrintPage sectorDetails={systematizationDetails?.sectors ?? []} />\n          )}\n\n          <Footer\n            activeTab={activeTab}\n            handleSaveButton={methods?.handleSubmit(handleSave)}\n            active={systematizationDetails?.active}\n            id={+systematizationId}\n          />\n        </FormProvider>\n        {showEditSectorModal && (\n          <OrganizationalUnitModal\n            refetch={refetch}\n            open={showEditSectorModal}\n            onClose={handleCloseModal}\n            organizationUnit={systematizationDetails?.organization_unit}\n            selectedItem={selectedSector}\n          />\n        )}\n      </OverviewBox>\n    </ScreenWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/printPage/printPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[861,864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[861,864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1488,1491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1488,1491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {PrintPageProps} from '../../types';\nimport {JobInfo, PrintPageWrapper, SectorTitle} from './styles';\nimport {Typography, Divider, Theme} from 'client-library';\nimport {SectorType} from '../../../../types/graphql/systematizationsTypes';\n\nexport const PrintPage: React.FC<PrintPageProps> = ({sectorDetails}) => {\n  return (\n    <PrintPageWrapper>\n      {sectorDetails?.map((sector: SectorType) => {\n        return (\n          <div key={`sector-details-${sector?.id}`}>\n            <div>\n              <SectorTitle>\n                <Typography variant=\"bodyLarge\" content={sector?.title} style={{fontWeight: 600}} />\n              </SectorTitle>\n              <Divider height=\"2px\" color={Theme?.palette?.gray200} />\n            </div>\n            <div>\n              {sector?.job_positions_organization_units?.map((jobPosition: any) => {\n                return (\n                  <>\n                    <JobInfo key={`job-position-${jobPosition?.id}`}>\n                      <Typography\n                        variant=\"bodyMedium\"\n                        content={jobPosition?.job_positions?.title}\n                        style={{fontWeight: 600, minWidth: 200}}\n                      />\n                      <Typography variant=\"bodyMedium\" content={jobPosition?.description} style={{minWidth: 200}} />\n                      <Typography\n                        variant=\"bodyMedium\"\n                        content={jobPosition?.employees?.map((item: any) => item?.title).join(', ')}\n                        style={{minWidth: 200}}\n                      />\n                    </JobInfo>\n                  </>\n                );\n              })}\n            </div>\n          </div>\n        );\n      })}\n    </PrintPageWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/printPage/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[104,107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[104,107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[591,594],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[591,594],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {parseDateForBackend} from '../../utils/dateUtils';\n\nexport const formatSystematization = (data: any) => {\n  const payload = {\n    ...data,\n    id: data?.id || 0,\n    organization_unit_id: data?.organization_unit?.id,\n    date_of_activation: parseDateForBackend(data?.date_of_activation),\n    file_id: data?.file_id || 0,\n  };\n\n  delete payload.user_profile;\n  delete payload.organization_unit;\n  delete payload.sectors;\n  delete payload.created_at;\n  delete payload.updated_at;\n  delete payload.active_employees;\n\n  return payload;\n};\n\nexport const formatDataAddJobPosition = (data: any) => {\n  const payload = {\n    ...data,\n    id: data?.id || 0,\n    available_slots: Number(data?.available_slots?.value) || 1,\n    parent_job_position_id: 0,\n    job_position_id: data?.job_position?.id,\n    system_permission_id: 0,\n    description: data?.job_position?.description,\n    requirements: data?.job_position?.requirements,\n    icon: '',\n  };\n\n  delete payload.employees;\n  delete payload.job_position;\n\n  return payload;\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/get-environment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/deleteForeignerPermit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/getForeignerPermits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/insertForeignerPermit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/useDeleteForeignerPermit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/useGetForeignerPermits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/useInsertForeignerPermit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5558,5561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5558,5561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5572,5575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5572,5575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {getEnvironment} from '../get-environment';\nimport deleteForeignerPermit from './foreignerPermits/deleteForeignerPermit';\nimport getForeignerPermits from './foreignerPermits/getForeignerPermits';\nimport insertForeignerPermit from './foreignerPermits/insertForeignerPermit';\nimport {\n  default as getAvailableJobPositions,\n  default as jobPositionsAvailableOrganizationUnit,\n} from './jobPositions/getAvailableJobPositions';\nimport getJobPositions from './jobPositions/getJobPositions';\nimport deleteJobPositionInOrgUnit from './jobPositionsInOrgUnit/deleteJobPositionInOrgUnit';\nimport getJobPositionsInOrgUnit from './jobPositionsInOrgUnit/getJobPositionsInOrgUnit';\nimport insertJobPositionInOrgUnit from './jobPositionsInOrgUnit/insertJobPositionInOrgUnit';\nimport jobTenderTypesSearch from './jobTenderTypes/jobTenderTypesSearch';\nimport jobTenderApplicationDelete from './jobTenders/jobTenderApplicationDelete';\nimport jobTenderApplicationInsert from './jobTenders/jobTenderApplicationInsert';\nimport jobTenderApplicationOverview from './jobTenders/jobTenderApplicationOverview';\nimport jobTenderDelete from './jobTenders/jobTenderDelete';\nimport jobTenderInsert from './jobTenders/jobTenderInsert';\nimport jobTenderOverview from './jobTenders/jobTenderOverview';\nimport judgeAndPresidentCheckIsAvailable from './judges/judgeAndPresidentCheckIsAvailable';\nimport judgeNormDelete from './judges/judgeNormDelete';\nimport judgeNormInsert from './judges/judgeNormInsert';\nimport judgeOverview from './judges/judgeOverview';\nimport judgeResolutionDelete from './judges/judgeResolutionDelete';\nimport judgeResolutionInsert from './judges/judgeResolutionInsert';\nimport judgeResolutionOverview from './judges/judgeResolutionOverview';\nimport getOrganizationUnitRealJudgeNumberData from './judges/organizationUintCalculateEmployeeStats';\nimport employeeInOrganizationUnitDelete from './organizationUnitsEmployees/employeeInOrganizationUnitDelete';\nimport employeeInOrganizationUnitInsert from './organizationUnitsEmployees/employeeInOrganizationUnitInsert';\nimport revisionDelete from './revision/revisionDelete';\nimport revisionDetails from './revision/revisionDetails';\nimport revisionInsert from './revision/revisionInsert';\nimport revisionOverview from './revision/revisionOverview';\nimport revisionTipsDelete from './revisionTips/revisionTipsDelete';\nimport revisionTipsDetails from './revisionTips/revisionTipsDetails';\nimport revisionTipsInsert from './revisionTips/revisionTipsInsert';\nimport revisionTipsOverview from './revisionTips/revisionTipsOverview';\nimport revisionPlanDelete from './revisionsPlans/revisionPlanDelete';\nimport revisionPlanDetails from './revisionsPlans/revisionPlanDetails';\nimport revisionPlanInsert from './revisionsPlans/revisionPlanInsert';\nimport revisionPlansOverview from './revisionsPlans/revisionPlanOverview';\nimport settingsDropdownOverview from './settingsDropdown/settingsDropdownOverview';\nimport getSuppliersOverview from './suppliers/getSuppliers';\nimport systematizationDelete from './systematization/deleteSystematization';\nimport systematizationDetails from './systematization/getSystematizationDetails';\nimport getSystematizations from './systematization/getSystematizations';\nimport insertSystematization from './systematization/insertSystematization';\nimport terminateEmployment from './terminateEmployment/terminateEmployment';\nimport absentDelete from './userProfile/absents/deleteAbsence';\nimport absentOverview from './userProfile/absents/getAbsence';\nimport absentTypesOverview from './userProfile/absents/getAbsenceTypes';\nimport insertAbsence from './userProfile/absents/insertAbsence';\nimport basicInfoGet from './userProfile/basicInfo/basicInfoGet';\nimport basicInfoInsert from './userProfile/basicInfo/basicInfoInsert';\nimport basicInfoUpdate from './userProfile/basicInfo/basicInfoUpdate';\nimport educationDelete from './userProfile/education/educationDelete';\nimport educationInsert from './userProfile/education/educationInsert';\nimport educationOverview from './userProfile/education/educationOverview';\nimport evaluationDelete from './userProfile/evaluation/evaluationDelete';\nimport evaluationInsert from './userProfile/evaluation/evaluationInsert';\nimport evaluationOverview from './userProfile/evaluation/evalutationOverview';\nimport experienceDelete from './userProfile/experience/experienceDelete';\nimport experienceInsert from './userProfile/experience/experienceInsert';\nimport experienceOverview from './userProfile/experience/experienceOverview';\nimport familyDelete from './userProfile/family/familyDelete';\nimport familyOverview from './userProfile/family/familyOverview';\nimport familyInsert from './userProfile/family/familyinsert';\nimport resolutionDelete from './userProfile/resolution/resolutionDelete';\nimport resolutionInsert from './userProfile/resolution/resolutionInsert';\nimport resolutionOverview from './userProfile/resolution/resolutionOverview';\nimport salaryParamsInsert from './userProfile/salaryParams/salarayParamsInsert';\nimport salaryParamsOverview from './userProfile/salaryParams/salaryParamsOverview';\nimport userProfileOverview from './userProfile/userProfileOverview';\nimport GetVacation from './userProfile/vacation/vacationGet';\nimport vacationInsert from './userProfile/vacation/vacationInsert';\n\nexport const BFF_URL = {\n  local: 'http://localhost:8080',\n  development: 'https://sss-erp-bff.oykos.me',\n  staging: 'http://localhost:8080',\n  production: 'http://localhost:8080',\n};\n\nexport const GraphQL = {\n  fetch: (query: string, variables?: any): Promise<any> => {\n    return fetch(BFF_URL[getEnvironment()], {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({query, variables}),\n    })\n      .then(response => response.json())\n      .catch(error => console.error(error));\n  },\n  basicInfoUpdate: basicInfoUpdate,\n  basicInfoGet: basicInfoGet,\n  basicInfoInsert: basicInfoInsert,\n  experienceOverview: experienceOverview,\n  experienceInsert: experienceInsert,\n  experienceDelete: experienceDelete,\n  userProfileOverview: userProfileOverview,\n  jobTenderOverview: jobTenderOverview,\n  jobTenderDelete: jobTenderDelete,\n  jobTenderApplicationDelete: jobTenderApplicationDelete,\n  jobTenderInsert: jobTenderInsert,\n  jobTenderTypesSearch: jobTenderTypesSearch,\n  jobTenderApplicationOverview: jobTenderApplicationOverview,\n  jobTenderApplicationInsert: jobTenderApplicationInsert,\n  judgeAndPresidentCheckIsAvailable: judgeAndPresidentCheckIsAvailable,\n  educationOverview: educationOverview,\n  educationInsert: educationInsert,\n  educationDelete: educationDelete,\n  familyOverview: familyOverview,\n  familyInsert: familyInsert,\n  familyDelete: familyDelete,\n  getForeignerPermits: getForeignerPermits,\n  deleteForeignerPermit: deleteForeignerPermit,\n  insertForeignerPermit: insertForeignerPermit,\n  getSystematizations: getSystematizations,\n  insertSystematization: insertSystematization,\n  getSystematizationDetails: systematizationDetails,\n  deleteSystematization: systematizationDelete,\n  salaryParamsInsert: salaryParamsInsert,\n  salaryParamsOverview: salaryParamsOverview,\n  resolutionOverview: resolutionOverview,\n  resolutionInsert: resolutionInsert,\n  resolutionDelete: resolutionDelete,\n  evaluationOverview: evaluationOverview,\n  evaluationInsert: evaluationInsert,\n  evaluationDelete: evaluationDelete,\n  revisionOverview: revisionOverview,\n  revisionDetails: revisionDetails,\n  revisionDelete: revisionDelete,\n  revisionInsert: revisionInsert,\n  insertJobPositionInOrgUnit: insertJobPositionInOrgUnit,\n  deleteJobPositionInOrgUnit: deleteJobPositionInOrgUnit,\n  jobPositionsAvailableOrganizationUnit: jobPositionsAvailableOrganizationUnit,\n  employeeInOrganizationUnitInsert: employeeInOrganizationUnitInsert,\n  employeeInOrganizationUnitDelete: employeeInOrganizationUnitDelete,\n  getAbsence: absentOverview,\n  getAbsenceTypes: absentTypesOverview,\n  insertAbsence: insertAbsence,\n  deleteAbsence: absentDelete,\n  judgeOverview: judgeOverview,\n  judgeNormDelete: judgeNormDelete,\n  judgeNormInsert: judgeNormInsert,\n  judgeResolutionDelete: judgeResolutionDelete,\n  judgeResolutionInsert: judgeResolutionInsert,\n  judgeResolutionOverview: judgeResolutionOverview,\n  getOrganizationUnitRealJudgeNumberData: getOrganizationUnitRealJudgeNumberData,\n  settingsDropdownOverview: settingsDropdownOverview,\n  getSuppliersOverview: getSuppliersOverview,\n  getVacation: GetVacation,\n  vacationInsert: vacationInsert,\n  revisionPlansOverview: revisionPlansOverview,\n  revisionPlanInsert: revisionPlanInsert,\n  revisionPlanDelete: revisionPlanDelete,\n  revisionPlanDetails: revisionPlanDetails,\n  revisionTipsOverview: revisionTipsOverview,\n  revisionTipsDetails: revisionTipsDetails,\n  revisionTipsInsert: revisionTipsInsert,\n  revisionTipsDelete: revisionTipsDelete,\n  terminateEmployment: terminateEmployment,\n  getJobPositions: getJobPositions,\n  getAvailableJobPositions: getAvailableJobPositions,\n  getJobPositionsInOrgUnit: getJobPositionsInOrgUnit,\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/getAvailableJobPositions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/getJobPositions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/useGetAvailableJobPositions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/useGetJobPositions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositionsInOrgUnit/deleteJobPositionInOrgUnit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositionsInOrgUnit/getJobPositionsInOrgUnit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositionsInOrgUnit/insertJobPositionInOrgUnit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositionsInOrgUnit/useDeleteJobPositionInOrgUnit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositionsInOrgUnit/useJobPositionsInOrgUnit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositionsInOrgUnit/useOrganizationUnitInsertJobPosition.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenderTypes/jobTenderTypesSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenderTypes/useJobTendersTypesSearch.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[693,696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[693,696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useMemo, useState} from 'react';\nimport {GraphQL} from '..';\nimport {JobTenderTypeResponse} from '../../../types/graphql/useJobTendersTypes';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nconst useJobTendersTypesSearch = (search: string) => {\n  const [types, setData] = useState<JobTenderTypeResponse>(initialState);\n  const [loading, setLoading] = useState(true);\n  const typesUnitsList = useMemo(() => {\n    return [\n      {id: 0, title: 'Svi tipovi oglasa'},\n      ...types.items.map(unit => {\n        return {id: unit.id, title: unit.title};\n      }),\n    ];\n  }, [types]);\n\n  const fetchJobTenderTypes = async () => {\n    const jobTenderTypes: any = await GraphQL.jobTenderTypesSearch(search);\n    setData(jobTenderTypes);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchJobTenderTypes();\n  }, [search]);\n\n  return {types, typesUnitsList, loading};\n};\n\nexport default useJobTendersTypesSearch;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderApplicationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderApplicationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderApplicationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderApplicationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderApplicationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderApplicationOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[708,711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[708,711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[861,864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[861,864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {DropdownDataNumber} from '../../../types/dropdownData';\nimport {QueryOptions} from '../../../types/queryOptions';\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\ninterface UseJobTenderApplicationsParams {\n  page: number;\n  size: number;\n  id?: number;\n  search?: string;\n  organization_unit_id?: DropdownDataNumber | null;\n  type_id?: DropdownDataNumber | null;\n  job_tender_id?: number;\n}\n\nconst useJobTenderApplicationOverview = (\n  {page, size, id, organization_unit_id, type_id, search, job_tender_id}: UseJobTenderApplicationsParams,\n  options?: QueryOptions,\n) => {\n  const [data, setData] = useState<any>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchJobTenderApplications = async () => {\n    const jobTenderApplications: any = await GraphQL.jobTenderApplicationOverview({\n      page,\n      size,\n      id,\n      organization_unit_id: organization_unit_id ? organization_unit_id?.id : null,\n      type_id: type_id ? type_id?.id : 0,\n      search,\n      job_tender_id: job_tender_id || 0,\n    });\n    setData(jobTenderApplications);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (!options?.skip) {\n      fetchJobTenderApplications();\n    }\n  }, [page, size, id, organization_unit_id, type_id, search, job_tender_id]);\n\n  return {data, loading, refreshData: fetchJobTenderApplications};\n};\n\nexport default useJobTenderApplicationOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[723,726],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[723,726],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {JobTendersListFilters} from '../../../screens/jobTenders';\nimport {JobTendersResponse} from '../../../types/graphql/jobTenders';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nexport interface UseJobTendersParams extends JobTendersListFilters {\n  id?: number;\n  page: number;\n  size: number;\n}\n\nconst useJobTenderOverview = ({page, size, id, organization_unit_id, active, type_id}: UseJobTendersParams) => {\n  const [data, setData] = useState<JobTendersResponse['data']['jobTenders_Overview']>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchJobTenders = async () => {\n    const jobTenders: any = await GraphQL.jobTenderOverview({\n      page,\n      size,\n      id: id ? id : 0,\n      organization_unit_id: organization_unit_id ? organization_unit_id.id : 0,\n      active: active ? active.id : true,\n      type_id: type_id?.id || 0,\n    });\n    setData(jobTenders);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchJobTenders();\n  }, [page, size, id, active, organization_unit_id, type_id]);\n\n  return {data, loading, refetch: fetchJobTenders};\n};\n\nexport default useJobTenderOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeAndPresidentCheckIsAvailable.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeNormDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeNormInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeResolutionDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeResolutionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeResolutionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/organizationUintCalculateEmployeeStats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeNormDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeNormInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeResolutionDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeResolutionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeResolutionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgesAvailable.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useOrganizationUintCalculateEmployeeStats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnits/useDeleteOrganizationUnit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnits/useGetOrganizationUnits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnits/useInsertOrganizatonUnit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsEmployees/employeeInOrganizationUnitDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsEmployees/employeeInOrganizationUnitInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsEmployees/useOrganizationUnitEmployeeDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsEmployees/useOrganizationUnitEmployeeInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revision/revisionDelete.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[80,83],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[80,83],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {GraphQL} from '..';\n\nconst revisionDelete = async (id: number): Promise<any['data']['revision_Delete']> => {\n  const mutation = ` mutation($id: Int!) {\n        revision_Delete(id: $id) {\n            message\n            status\n        }\n    } `;\n\n  const response = await GraphQL.fetch(mutation, {id});\n  return response?.data?.revision_Delete || {};\n};\n\nexport default revisionDelete;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revision/revisionDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revision/revisionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revision/revisionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revision/useRevisionDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revision/useRevisionDetails.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[258,261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[258,261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\n\nconst initialState = {items: [], total: 0, message: '', revisors: [], status: ''};\n\nconst useRevisionDetails = (id: number) => {\n  const [revisionDetails, setRevisionDetails] = useState<any>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchRevisionDetails = async () => {\n    const response = await GraphQL.revisionDetails(id);\n\n    setRevisionDetails(response);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (id) {\n      fetchRevisionDetails();\n    }\n  }, [id]);\n\n  return {revisionDetails, loading, refetch: fetchRevisionDetails};\n};\n\nexport default useRevisionDetails;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revision/useRevisionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revision/useRevisionOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[411,414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[411,414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {RevisionParams} from '../../../types/graphql/revisionOverview';\n\nconst initialState = {items: [], total: 0, message: '', revisors: [], status: ''};\n\nconst useRevisionOverview = ({\n  page,\n  size,\n  plan_id,\n  internal_revision_subject_id,\n  revision_type_id,\n  revisor_id,\n}: RevisionParams) => {\n  const [data, setData] = useState<any>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchRevision = async () => {\n    const response = await GraphQL.revisionOverview(\n      plan_id,\n      internal_revision_subject_id,\n      revision_type_id,\n      revisor_id,\n    );\n    setData(response);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchRevision();\n  }, [page, size, plan_id, internal_revision_subject_id, revision_type_id, revisor_id]);\n\n  return {data, loading, refetch: fetchRevision};\n};\n\nexport default useRevisionOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revisionTips/revisionTipsDelete.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[84,87],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[84,87],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {GraphQL} from '..';\n\nconst revisionTipsDelete = async (id: number): Promise<any['data']['revision_tips_Delete']> => {\n  const mutation = `mutation($id: Int!) {\n    revision_tips_Delete(id: $id) {\n        message\n        status\n    }\n}`;\n  const response = await GraphQL.fetch(mutation, {id});\n  return response?.data?.revision_tips_Delete || {};\n};\n\nexport default revisionTipsDelete;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revisionTips/revisionTipsDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revisionTips/revisionTipsInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revisionTips/revisionTipsOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revisionTips/useRevisionTipsDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revisionTips/useRevisionTipsDetails.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[156,159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[156,159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\n\nconst useRevisionTipsDetails = (id: number) => {\n  const [data, setData] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  const fetchRevisionTipsDetails = async () => {\n    if (!id) {\n      setData({item: []});\n      return;\n    }\n    const revisionTipsDetails = await GraphQL.revisionTipsDetails(id);\n    setData(revisionTipsDetails);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchRevisionTipsDetails();\n  }, [id]);\n\n  return {data, loading, refetch: fetchRevisionTipsDetails};\n};\n\nexport default useRevisionTipsDetails;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revisionTips/useRevisionTipsInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revisionTips/useRevisionTipsOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[356,359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[356,359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {RevisionTipsParams} from '../../../types/graphql/revisionTipsOverview';\n\nconst initialState = {items: [], total: 0, message: '', revisors: [], status: ''};\n\nconst useRevisionTipsOverview = ({page, size, revision_id}: RevisionTipsParams) => {\n  const [data, setData] = useState<any>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchRevisionTips = async () => {\n    const response = await GraphQL.revisionTipsOverview(revision_id);\n\n    setData(response);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchRevisionTips();\n  }, [page, size]);\n\n  return {data, loading, refetch: fetchRevisionTips};\n};\n\nexport default useRevisionTipsOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revisionsPlans/revisionPlanDelete.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[84,87],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[84,87],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {GraphQL} from '..';\n\nconst revisionPlanDelete = async (id: number): Promise<any['data']['revision_plans_Delete']> => {\n  const mutation = `\n  mutation($id: Int!) {\n    revision_plans_Delete(id: $id) {\n        message\n        status\n    }\n}\n      `;\n  const response = await GraphQL.fetch(mutation, {id});\n  return response?.data?.revision_plans_Delete || {};\n};\n\nexport default revisionPlanDelete;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revisionsPlans/revisionPlanDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revisionsPlans/revisionPlanInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revisionsPlans/revisionPlanOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revisionsPlans/useRevisionPlanDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revisionsPlans/useRevisionPlanDetails.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[156,159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[156,159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\n\nconst useRevisionPlanDetails = (id: number) => {\n  const [data, setData] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  const fetchRevisionPlanDetails = async () => {\n    if (!id) {\n      setData({item: []});\n      return;\n    }\n    const revisionPlanDetails = await GraphQL.revisionPlanDetails(id);\n    setData(revisionPlanDetails);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchRevisionPlanDetails();\n  }, [id]);\n\n  return {data, loading, refetch: fetchRevisionPlanDetails};\n};\n\nexport default useRevisionPlanDetails;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revisionsPlans/useRevisionPlanInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/revisionsPlans/useRevisionPlanOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/settingsDropdown/settingsDropdownOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/settingsDropdown/useSettingsDropdownOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[833,836],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[833,836],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {SettingsDropdown, SettingsDropdownOverviewParams} from '../../../types/graphql/settingsDropdownType';\nimport {DropdownDataNumber} from '../../../types/dropdownData';\n\nconst useSettingsDropdownOverview = ({entity, page, size, id}: SettingsDropdownOverviewParams) => {\n  const [data, setData] = useState<SettingsDropdown[]>([]);\n  const [options, setOptions] = useState<DropdownDataNumber[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  const getSettingsDropdownOverview = async () => {\n    const response = await GraphQL.settingsDropdownOverview({entity: entity, page: page, size: size, id: id});\n    //Ask filip if we need array of items here\n    const data = response?.items || null;\n\n    setData(data || []);\n    setOptions(data?.map((item: any) => ({title: item.title, id: item.id})) || []);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getSettingsDropdownOverview();\n  }, [entity, id, page, size]);\n\n  return {data: data, loading, refetch: getSettingsDropdownOverview, options};\n};\n\nexport default useSettingsDropdownOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/suppliers/getSuppliers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/suppliers/useGetSuppliersOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/deleteSystematization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/getSystematizationDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/getSystematizations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/insertSystematization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/ueDeleteSystematization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/useDeleteSystematization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/useGetSystematizationDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/useGetSystematizations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/useInsertSystematization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/terminateEmployment/terminateEmployment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/terminateEmployment/useTerminateEmployment.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[259,262],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[259,262],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport useAppContext from '../../../context/useAppContext';\nimport {GraphQL} from '..';\n\nconst useTerminateEmployment = (user_profile_id: number) => {\n  const [terminateEmployment, setTerminateEmployment] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  const {fetch} = useAppContext();\n\n  const fetchTerminateEmployment = async () => {\n    const response = await fetch(GraphQL.terminateEmployment, {user_profile_id});\n    console.log(response);\n    setTerminateEmployment(response);\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchTerminateEmployment();\n  }, []);\n\n  return {terminateEmployment, loading, refetch: fetchTerminateEmployment};\n};\n\nexport default useTerminateEmployment;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/deleteAbsence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/getAbsence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/getAbsenceTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/insertAbsence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/useDeleteAbsence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/useGetAbsence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/useGetAbsentsType.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/useInsertAbsence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/basicInfo/basicInfoGet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/basicInfo/basicInfoInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/basicInfo/basicInfoUpdate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/basicInfo/useBasicInfoGet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/basicInfo/useBasicInfoInsert.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[379,382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[379,382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useState} from 'react';\nimport {GraphQL} from '../..';\nimport {UserProfileBasicInfoFormValues} from '../../../../types/graphql/userProfiles';\n\nconst useBasicInfoInsert = () => {\n  const [loading, setLoading] = useState(false);\n\n  const insertBasicInfo = async (\n    data: UserProfileBasicInfoFormValues,\n    onSuccess?: (userId: number) => void,\n    onError?: (response: any) => void,\n  ) => {\n    setLoading(true);\n\n    const response = await GraphQL.basicInfoInsert(data);\n\n    if (response.status === 'success') {\n      onSuccess && onSuccess(response?.item?.id || 0);\n    } else {\n      onError && onError(response);\n    }\n    setLoading(false);\n  };\n\n  return {loading, mutate: insertBasicInfo};\n};\n\nexport default useBasicInfoInsert;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/basicInfo/useBasicInfoUpdate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/educationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/educationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/educationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/useEducationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/useEducationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/useEducationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/evaluationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/evaluationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/evalutationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/useEvaluationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/useEvaluationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/useEvaluationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/experienceDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/experienceInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/experienceOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/useExperienceDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/useExperienceInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/useExperienceOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/familyDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/familyOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/familyinsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/useFamilyDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/useFamilyInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/useFamilyOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/resolutionDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/resolutionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/resolutionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/useResolutionDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/useResolutionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/useResolutionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/salaryParams/salarayParamsInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/salaryParams/salaryParamsOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/salaryParams/useSalaryParamsOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[176,179],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[176,179],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '../..';\n\nconst useSalaryParamsOverview = (id: number) => {\n  const [salaryParams, setSalaryParams] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  const fetchSalaryParams = async () => {\n    const response = await GraphQL.salaryParamsOverview(id);\n\n    if (response) {\n      setSalaryParams(response);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchSalaryParams();\n  }, [id]);\n\n  return {data: salaryParams, loading, refetch: fetchSalaryParams};\n};\n\nexport default useSalaryParamsOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/salaryParams/useSalaryParamsinsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/useUserProfiles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/userProfileOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/vacation/useVacationGet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/vacation/useVacationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/vacation/vacationGet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/vacation/vacationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/alertWrapper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/deleteModal/deleteModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/deleteModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/deleteModal/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[111,114],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[111,114],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[151,154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[151,154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {ReactElement} from 'react';\n\nexport interface DeleteModalProps {\n  open: boolean;\n  onClose: (action?: any) => void;\n  handleDelete: (action?: any) => void;\n  customContent?: string | ReactElement;\n  message?: string;\n  question?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/infoPreview/infoPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/infoPreview/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/mainTitle.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/screenWrapper/screenWrapper.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[833,836],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[833,836],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {ReactElement, ReactNode, forwardRef} from 'react';\nimport useAppContext from '../../context/useAppContext';\nimport {Container, StyledBreadcrumbs} from './styles';\n\ninterface ScreenWrapperProps {\n  children: ReactNode;\n}\n\nexport const ScreenWrapper = forwardRef<HTMLDivElement, ScreenWrapperProps>(({children}, ref) => {\n  const context = useAppContext();\n\n  const breadcrumbs = context?.breadcrumbs;\n\n  const breadcrumbItems = breadcrumbs?.get();\n\n  const navigate = context?.navigation?.navigate;\n\n  const handleNavigation = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | undefined,\n    item?: {\n      name: string;\n      to: string;\n      icon?: ReactElement;\n    },\n  ) => {\n    e?.preventDefault();\n    const newBreacrumbs = [...breadcrumbItems];\n    const index = newBreacrumbs.findIndex((breadcrumb: any) => breadcrumb.name === item?.name);\n    newBreacrumbs.splice(index + 1, newBreacrumbs.length - index);\n    breadcrumbs.set(newBreacrumbs);\n    navigate(item?.to);\n  };\n\n  return (\n    <Container ref={ref}>\n      <StyledBreadcrumbs items={breadcrumbItems} onClick={handleNavigation} />\n      {children}\n    </Container>\n  );\n});\n\nScreenWrapper.displayName = 'ScreenWrapper';\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/screenWrapper/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/sectionBox.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/usePrompt.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[277,280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[277,280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useCallback, useEffect} from 'react';\n\nfunction useConfirmExit(confirmExit: () => boolean, when = true) {\n  useEffect(() => {\n    if (!when) {\n      return;\n    }\n\n    const originalPushState = window.history.pushState;\n\n    window.history.pushState = function (state: any, title: string, url?: string | null) {\n      const result = confirmExit();\n      if (result !== false) {\n        originalPushState.apply(window.history, [state, title, url]);\n      }\n    };\n\n    return () => {\n      window.history.pushState = originalPushState;\n    };\n  }, [confirmExit, when]);\n}\n\nexport function usePrompt(message: string, when = true) {\n  useEffect(() => {\n    if (when) {\n      window.onbeforeunload = function () {\n        return message;\n      };\n    }\n\n    return () => {\n      window.onbeforeunload = null;\n    };\n  }, [message, when]);\n\n  const confirmExit = useCallback(() => {\n    const confirm = window.confirm(message);\n    return confirm;\n  }, [message]);\n  useConfirmExit(confirmExit, when);\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/dropdownData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/environment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/ProfileResolutionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/absents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/employeeInOrganizationUnitTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/foreignerPermits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/jobPositionInOrganizationUnitInsertTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/jobPositions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/jobTenders.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1084,1087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1084,1087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1440,1443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1440,1443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {ModalProps} from '../../screens/employees/education/types';\nimport {DropdownDataNumber} from '../dropdownData';\nimport {OrganizationUnit} from './organizationUnits';\n\nimport {JobTenderType} from './useJobTendersTypes';\n\nexport interface DropdownItemType {\n  id: number;\n  title: string;\n}\n\nexport interface JobTender {\n  id: number;\n  organization_unit_id: number;\n  organization_unit?: DropdownItemType;\n  type?: DropdownItemType;\n  description: string;\n  serial_number: string;\n  date_of_start: string | null;\n  date_of_end: string | null;\n  created_at?: string;\n  updated_at?: string;\n  file_id: number;\n  job_position?: DropdownItemType;\n  number_of_vacant_seats: number | null;\n}\n\nexport interface JobTenderParams {\n  id: number;\n  organization_unit_id: number;\n  type?: DropdownItemType;\n  description: string;\n  serial_number: string;\n  date_of_start: string;\n  date_of_end: string | null;\n  created_at?: string;\n  updated_at?: string;\n  file_id: number;\n}\n\nexport type JobTenderForm = {\n  id: number | null;\n  organization_unit_id: DropdownDataNumber | null;\n  type?: any;\n  description: string;\n  serial_number: string;\n  date_of_start: Date | null;\n  date_of_end: Date | null;\n  file_id: number;\n};\n\nexport interface JobTendersModalProps extends ModalProps {\n  jobTenderTypeOptions: JobTenderType[];\n  organizationUnitsList: Pick<OrganizationUnit, 'id' | 'title'>[];\n  onClose: () => void;\n  refetch: () => void;\n  alert: any;\n}\n\nexport interface JobTenderApplication {\n  id?: number;\n  status: string;\n  job_tender?: DropdownItemType | null;\n  organization_unit: DropdownDataNumber | null;\n  tender_type: DropdownDataNumber | null;\n  user_profile?: DropdownItemType;\n  type: 'external' | 'internal';\n  first_name?: string;\n  last_name?: string;\n  official_personal_id?: string;\n  date_of_birth: string | null;\n  citizenship?: string;\n  nationality?: string;\n  evaluation?: string;\n  date_of_application: string;\n  created_at?: string;\n  updated_at?: string;\n  file_id?: number;\n}\n\nexport interface ApplicationScreenFilters {\n  organization_unit_id?: DropdownDataNumber;\n  type_id?: DropdownDataNumber;\n}\n\nexport interface JobTenderApplicationInsertParams {\n  active: boolean;\n  citizenship?: string;\n  date_of_application: string;\n  date_of_birth?: string;\n  first_name?: string;\n  id?: number;\n  job_tender_id: number;\n  last_name?: string;\n  official_personal_id?: string;\n  status: string;\n  type: string;\n  user_profile_id?: number;\n}\n\nexport interface JobTenderApplicationsParams {\n  page: number;\n  size: number;\n  search?: string;\n  id?: number;\n  organization_unit_id?: number | null;\n  type_id?: number;\n  job_tender_id?: number;\n}\n\nexport interface JobTenderApplicationResponse {\n  items: JobTenderApplication[];\n  message: string;\n  status: string;\n  total: number;\n}\n\nexport interface JobTenderApplicationResponse {\n  data: {\n    jobTender_Applications_Insert: {\n      status: string;\n      message: string;\n      item: JobTenderApplication;\n    };\n    jobTender_Applications: {\n      status: string;\n      message: string;\n      items: JobTenderApplication[];\n      total: number;\n    };\n    jobTender_Applications_Delete: {\n      status: string;\n      message: string;\n    };\n  };\n}\n\nexport interface JobTendersResponse {\n  data: {\n    jobTenders_Overview: {\n      status: string;\n      message: string;\n      items: JobTender[];\n      total: number;\n    };\n    jobTender_Details: {\n      status: string;\n      message: string;\n      items: JobTender[];\n    };\n    jobTenders_Delete: {\n      status: string;\n      message: string;\n    };\n    jobTenders_Insert: {\n      status: string;\n      message: string;\n      item: JobTender[];\n    };\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/judges.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/organizationUnits.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[324,327],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[324,327],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {DeleteResponse, GetResponse, InsertResponse} from './response';\n\nexport interface OrganizationUnit {\n  id: number;\n  parent_id: number;\n  number_of_judges: number;\n  title: string;\n  abbreviation: string;\n  description?: string;\n  address?: string;\n  color: string;\n  folder_id: number;\n  icon: string;\n  children?: any;\n}\n\nexport type GetOrganizationUnitsParams = {\n  page?: number;\n  size?: number;\n  search?: string;\n};\n\nexport type GetOrganizationUnitsOptions = {\n  allOption?: boolean;\n};\n\nexport type OrganizationUnitsResponse = {\n  get: {\n    organizationUnits: GetResponse<OrganizationUnit>;\n  };\n  insert: {\n    organizationUnits_Insert: InsertResponse<OrganizationUnit>;\n  };\n  delete: {\n    organizationUnits_Delete: DeleteResponse;\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/profileAbsentsDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/profileAbsentsInsertType.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/profileVacationTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/response.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/revisionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/revisionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/revisionPlanInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/revisionPlansOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/revisionTipsInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/revisionTipsOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/settingsDropdownOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/settingsDropdownType.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/suppliersOverviewTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/systematizationsTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/useJobPositions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/useJobTendersTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileDeleteEducation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileDeleteEvaluation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileDeleteExperienceTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileDeleteFamilyTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileDeleteResolution.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetEducation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetEvaluations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetExperienceTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetFamilyTypes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[570,573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[570,573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {DropdownDataString} from '../dropdownData';\n\nexport interface UserProfileFamily {\n  id: number;\n  user_profile_id: number;\n  first_name: string;\n  last_name: string;\n  birth_last_name: string;\n  date_of_birth: string;\n  country_of_birth: string;\n  city_of_birth: string;\n  nationality: string;\n  citizenship: string;\n  father_name: string;\n  mother_name: string;\n  mother_birth_last_name: string;\n  official_personal_id: string;\n  gender: string;\n  insurance_coverage: string;\n  employee_relationship: string;\n  handicapped_person: boolean;\n  national_minority: any;\n  created_at?: string;\n  updated_at?: string;\n  address: string;\n}\n\nexport type UserProfileFamilyParams = {\n  id: number | null;\n  user_profile_id: number;\n  first_name: string;\n  last_name: string;\n  date_of_birth: Date | null;\n  country_of_birth: DropdownDataString | null;\n  city_of_birth: string | DropdownDataString | null;\n  nationality: DropdownDataString | null;\n  citizenship: DropdownDataString | null;\n  father_name: string;\n  mother_name: string;\n  mother_birth_last_name: string;\n  official_personal_id: string;\n  gender: string;\n  insurance_coverage: string;\n  employee_relationship: string;\n  handicapped_person: boolean;\n  national_minority: DropdownDataString | null;\n  address: string;\n};\n\nexport interface UserProfileGetFamilyResponse {\n  data: {\n    userProfile_Family: {\n      status?: string;\n      message?: string;\n      items?: UserProfileFamily[];\n    };\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetResolution.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownDataNumber' is defined but never used.","line":1,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {DropdownDataBoolean, DropdownDataNumber} from '../dropdownData';\n\nexport type UserProfileResolutionItem = {\n  id: number;\n  user_profile_id?: number;\n  resolution_purpose: string;\n  date_of_start: string;\n  date_of_end?: string;\n  created_at?: string;\n  updated_at?: string;\n  file_id: number;\n  resolution_type: ResolutionType | null;\n  is_affect: DropdownDataBoolean;\n};\n\nexport type UserProfileResolutionForm = {\n  id: number;\n  user_profile_id: number;\n  resolution_purpose: string;\n  date_of_start: Date | null;\n  date_of_end: Date | null;\n  file_id: number;\n  resolution_type: ResolutionType | null;\n};\n\nexport type UserProfileResolutionParams = {\n  id: number;\n  user_profile_id?: number;\n  resolution_purpose: string;\n  date_of_start: string;\n  date_of_end?: string;\n  file_id: number;\n  resolution_type_id: number;\n  is_affect: DropdownDataBoolean;\n};\n\nexport type ResolutionType = {\n  id: number;\n  title: string;\n};\n\nexport type UserProfileResolutionItemResponse = {\n  data: {\n    userProfile_Resolution: {\n      status?: string;\n      message?: string;\n      items?: UserProfileResolutionItem[];\n    };\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetSalaryParams.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertBasicInfo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertEducation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertEvaluation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertExperienceTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertFamilyTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertSalaryParams.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfiles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/micro-service-props.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[54,57],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[54,57],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface MicroserviceProps {\n  [key: string]: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/paginationParams.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/queryOptions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[55,58],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[55,58],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[93,96],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[93,96],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type QueryOptions = {\n  onSuccess?: (response?: any) => void;\n  onError?: (response?: any) => void;\n  skip?: boolean;\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/screen-props.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[42,45],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[42,45],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ScreenProps {\n  context: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/utils/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/utils/dateUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/utils/getRouteName.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/utils/scrollToTheNextElement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/utils/useDebounce.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[79,82],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[79,82],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useState, useEffect} from 'react';\n\nexport const useDebounce = (value: any, milliSeconds: number) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, milliSeconds);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, milliSeconds]);\n\n  return debouncedValue;\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]