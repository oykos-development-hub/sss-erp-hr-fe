[{"filePath":"/builds/erp/hr-ms-client/setupProxy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/JobTenderApplicationModal/JobTenderApplicationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownDataNumber' is defined but never used.","line":12,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserProfile' is defined but never used.","line":14,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2980,2983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2980,2983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3019,3022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3019,3022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'alert' is defined but never used.","line":88,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":88,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4141,4144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4141,4144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":233,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7697,7700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7697,7700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8047,8050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8047,8050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":293,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9402,9405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9402,9405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":350,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":350,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11593,11596],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11593,11596],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":371,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12368,12371],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12368,12371],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":405,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":405,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13601,13604],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13601,13604],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Datepicker, Dropdown, Input, Modal, Typography} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {\n  applicationStatusOptions,\n  applicationTypeOptions,\n  evaluationTypeOptions,\n} from '../../screens/jobTenders/constants';\nimport useJobTenderApplicationsInsert from '../../services/graphql/jobTenders/useJobTenderApplicationInsert';\nimport useBasicInfoGet from '../../services/graphql/userProfile/basicInfo/useBasicInfoGet';\nimport useUserProfiles from '../../services/graphql/userProfile/useUserProfiles';\nimport {DropdownDataNumber, DropdownDataString} from '../../types/dropdownData';\nimport {JobTenderApplication, JobTenderApplicationInsertParams} from '../../types/graphql/jobTenders';\nimport {UserProfile} from '../../types/graphql/userProfiles';\nimport {MicroserviceProps} from '../../types/micro-service-props';\nimport {ScreenProps} from '../../types/screen-props';\nimport {parseDateForBackend, parseToDate} from '../../utils/dateUtils';\nimport {\n  ConfirmModalContent,\n  ModalContentWrapper,\n  Row,\n  RowFullWidth,\n  TriangleIcon,\n} from '../JobTenderApplicationModal/styles';\nimport * as yup from 'yup';\nimport {yupResolver} from '@hookform/resolvers/yup';\n\nconst tenderApplicationSchema = yup.object().shape({\n  type: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string().required(), title: yup.string().required()})\n    .required('Ovo polje je obavezno'),\n  status: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string().required(), title: yup.string().required()})\n    .required('Ovo polje je obavezno'),\n  date_of_application: yup.date().required('Ovo polje je obavezno').nullable(),\n  first_name: yup.string().required('Ovo polje je obavezno'),\n  last_name: yup.string().required('Ovo polje je obavezno'),\n  official_personal_id: yup.string().required('Ovo polje je obavezno'),\n  date_of_birth: yup\n    .date()\n    .required('Ovo polje je obavezno')\n    .test('more than 18 year old', 'Kandidat mora biti punoljetan', value => {\n      if (!value) return false;\n      const today = new Date();\n      const birthDate = new Date(value);\n      const age = today.getFullYear() - birthDate.getFullYear();\n      return age >= 18;\n    }),\n  citizenship: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string(), title: yup.string()})\n    .required('Ovo polje je obavezno'),\n  user_profile: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.number(), title: yup.string()})\n    .when('type', {\n      is: (value: DropdownDataString) => value && value.id === 'internal',\n      then: schema => schema.required('Ovo polje je obavezno'),\n      otherwise: schema => schema.optional(),\n    }),\n  evaluation: yup.object(),\n});\n\nexport interface JobTenderApplicationModalModalProps extends ScreenProps {\n  selectedItem?: JobTenderApplication;\n  open: boolean;\n  onClose: () => void;\n  refetchList: () => void;\n  countries?: any[];\n  jobTenderId: number;\n  alert: any;\n  context: MicroserviceProps;\n}\n\nexport const JobTenderApplicationModal: React.FC<JobTenderApplicationModalModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  refetchList,\n  countries,\n  jobTenderId,\n  alert,\n  context,\n}) => {\n  const [selectedUserId, setSelectedIdUser] = useState<number>(0);\n  const [confirmationModal, setConfirmationModal] = useState<boolean>(false);\n\n  const {data: userData} = useBasicInfoGet(selectedUserId);\n\n  const {data: userListData} = useUserProfiles({page: 1, size: 1000});\n\n  const citizenshipArray = useMemo(() => {\n    return countries?.map(country => {\n      return {\n        id: country.alpha_3_code,\n        title: country.nationality,\n      };\n    });\n  }, [countries]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n    watch,\n    setValue,\n  } = useForm({\n    defaultValues: {type: {id: 'internal', title: 'Interni'}},\n    resolver: yupResolver(tenderApplicationSchema),\n  });\n\n  const {status, type, user_profile} = watch();\n\n  const {mutate, loading: isSaving} = useJobTenderApplicationsInsert();\n\n  const onSubmit = (values: any) => {\n    if (isSaving) return;\n\n    const data: JobTenderApplicationInsertParams = {\n      type: values.type.id,\n      date_of_application: parseDateForBackend(values?.date_of_application),\n      status: values?.status?.title,\n      job_tender_id: jobTenderId,\n      active: true,\n    };\n\n    if (values?.id) data.id = values?.id;\n    if (data.type === 'external') {\n      data.evaluation = values?.evaluation?.id;\n      data.first_name = values.first_name;\n      data.last_name = values.last_name;\n      data.citizenship = values?.citizenship?.id;\n      data.date_of_birth = parseDateForBackend(values?.date_of_birth);\n      data.official_personal_id = values?.official_personal_id;\n    } else {\n      data.user_profile_id = values?.user_profile?.id;\n    }\n\n    try {\n      mutate(\n        data,\n        () => {\n          context.alert.success('Uspješno sačuvano.');\n          refetchList();\n          onClose();\n          reset();\n          if (data.status === 'Izabran' && data.type === 'external') {\n            navigateToUserCreation();\n          }\n        },\n        () => {\n          context.alert.error('Greška. Promjene nisu sačuvane.');\n          onClose();\n          reset();\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const userOptions = useMemo(\n    () =>\n      userListData && userListData.items\n        ? [...userListData.items.map(item => ({...item, title: `${item.first_name} ${item.last_name}`}))]\n        : [],\n    [userListData],\n  );\n\n  const toggleConfirmModal = () => {\n    setConfirmationModal(prev => !prev);\n  };\n\n  const navigateToUserCreation = () => {\n    const {first_name, last_name, date_of_birth, evaluation, citizenship, official_personal_id} = watch();\n\n    context.navigation.navigate('/hr/employees/add-new', {\n      state: {user: {first_name, last_name, date_of_birth, evaluation, citizenship, official_personal_id}},\n    });\n  };\n\n  // Choosing an internal user to populate the corresponding fields.\n  useEffect(() => {\n    if (userData) {\n      reset({\n        ...watch(),\n        first_name: userData.first_name,\n        last_name: userData.last_name,\n        official_personal_id: userData.official_personal_id,\n        date_of_birth: parseToDate(userData.date_of_birth) ?? undefined,\n        citizenship: citizenshipArray?.find(c => (c.id = userData.citizenship)) || undefined,\n        user_profile: {id: userData.id, title: `${userData.first_name} ${userData.last_name}`},\n      });\n    }\n  }, [userData]);\n\n  useEffect(() => {\n    if (selectedItem) {\n      reset({\n        ...selectedItem,\n        date_of_application: parseToDate(selectedItem?.date_of_application),\n        date_of_birth: parseToDate(selectedItem?.date_of_birth) ?? undefined,\n        status: selectedItem?.status\n          ? applicationStatusOptions.find(st => st.title === selectedItem?.status)\n          : undefined,\n        type: selectedItem?.type ? applicationTypeOptions.find(st => st.id === selectedItem?.type) : undefined,\n        evaluation: selectedItem?.evaluation\n          ? evaluationTypeOptions.find(st => st.id === selectedItem?.evaluation)\n          : undefined,\n        citizenship: selectedItem?.citizenship\n          ? citizenshipArray?.find(st => st.id === selectedItem.citizenship)\n          : undefined,\n      });\n    }\n  }, [selectedItem]);\n\n  useEffect(() => {\n    if (status?.id === 'accepted' && type?.id === 'external') {\n      setConfirmationModal(true);\n    }\n  }, [status]);\n\n  useEffect(() => {\n    if (type?.id === 'external') {\n      setValue('user_profile', undefined as any);\n      setSelectedIdUser(0);\n    }\n  }, [type]);\n\n  useEffect(() => {\n    if (user_profile) {\n      const item = userOptions.find(user => user.id === user_profile.id);\n\n      if (item) {\n        setSelectedIdUser(item.id);\n      }\n    }\n  }, [user_profile]);\n\n  const countryOptions = useMemo(() => {\n    return context.countries?.map((country: any) => {\n      return {\n        id: country.en_short_name,\n        title: country.en_short_name,\n      };\n    });\n  }, [context.countries]);\n\n  return (\n    <>\n      <Modal\n        open={open}\n        onClose={onClose}\n        leftButtonText=\"Otkaži\"\n        rightButtonText=\"Sačuvaj\"\n        rightButtonOnClick={handleSubmit(onSubmit)}\n        buttonLoading={isSaving}\n        content={\n          <ModalContentWrapper>\n            <Row>\n              <Controller\n                name=\"type\"\n                control={control}\n                render={({field: {name, value, onChange}}) => (\n                  <Dropdown\n                    label=\"TIP KANDIDATA:\"\n                    name={name}\n                    options={applicationTypeOptions}\n                    value={value}\n                    onChange={onChange}\n                    error={errors.type?.message}\n                    isDisabled={!!selectedItem?.id}\n                  />\n                )}\n              />\n              <Controller\n                name=\"user_profile\"\n                control={control}\n                render={({field: {name, value, onChange}}) => (\n                  <Dropdown\n                    label=\"PRETRAGA:\"\n                    name={name}\n                    options={userOptions}\n                    isSearchable={true}\n                    value={value as any}\n                    onChange={onChange}\n                    isDisabled={!!selectedItem?.id || type?.id === 'external'}\n                    error={errors.user_profile?.message}\n                    placeholder=\"Unesite ime\"\n                  />\n                )}\n              />\n            </Row>\n            <Row>\n              <Input\n                {...register('first_name', {required: 'Ovo polje je obavezno'})}\n                label=\"IME:\"\n                disabled={type?.id === 'internal'}\n                error={errors.first_name?.message as string}\n              />\n\n              <Input\n                {...register('last_name', {required: 'Ovo polje je obavezno'})}\n                label=\"PREZIME:\"\n                disabled={type?.id === 'internal'}\n                error={errors.last_name?.message as string}\n              />\n            </Row>\n            <Row>\n              <Input\n                {...register('official_personal_id', {required: 'Ovo polje je obavezno'})}\n                label=\"BROJ LIČNE KARTE:\"\n                error={errors.official_personal_id?.message as string}\n                disabled={type?.id === 'internal'}\n              />\n\n              <Controller\n                name=\"date_of_birth\"\n                control={control}\n                rules={{required: 'Ovo polje je obavezno'}}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    onChange={onChange}\n                    label=\"DATUM ROĐENJA:\"\n                    name={name}\n                    selected={value}\n                    error={errors.date_of_birth?.message as string}\n                    disabled={type?.id === 'internal'}\n                  />\n                )}\n              />\n            </Row>\n            <RowFullWidth>\n              <Controller\n                name=\"citizenship\"\n                rules={type?.id !== 'internal' ? {required: 'Ovo polje je obavezno'} : {}}\n                control={control}\n                render={({field: {onChange, name, value}}) => {\n                  return (\n                    <Dropdown\n                      onChange={onChange}\n                      value={value as any}\n                      name={name}\n                      style={{width: '100%'}}\n                      label=\"DRŽAVLJANSTVO:\"\n                      options={countryOptions || []}\n                      error={errors.citizenship?.message as string}\n                      isDisabled={type?.id === 'internal'}\n                      isSearchable\n                    />\n                  );\n                }}\n              />\n            </RowFullWidth>\n            <RowFullWidth>\n              <Controller\n                name=\"evaluation\"\n                control={control}\n                render={({field: {onChange, name, value}}) => {\n                  return (\n                    <Dropdown\n                      onChange={onChange}\n                      value={value as any}\n                      name={name}\n                      style={{width: '100%'}}\n                      label=\"OCJENA:\"\n                      options={evaluationTypeOptions || []}\n                      isDisabled\n                    />\n                  );\n                }}\n              />\n            </RowFullWidth>\n            <Row>\n              <Controller\n                name=\"date_of_application\"\n                control={control}\n                rules={{required: 'Ovo polje je obavezno'}}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    onChange={onChange}\n                    label=\"DATUM PRIJAVE:\"\n                    name={name}\n                    selected={value}\n                    error={errors.date_of_application?.message as string}\n                  />\n                )}\n              />\n              <Controller\n                name=\"status\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => {\n                  return (\n                    <Dropdown\n                      onChange={onChange}\n                      value={value as any}\n                      name={name}\n                      label=\"STATUS:\"\n                      options={applicationStatusOptions || []}\n                      error={errors.status?.message as string}\n                      placeholder=\"Odaberite status\"\n                    />\n                  );\n                }}\n              />\n            </Row>\n          </ModalContentWrapper>\n        }\n        title={'DODAJTE NOVOG KANDIDATA'}\n      />\n      <Modal\n        open={confirmationModal}\n        onClose={toggleConfirmModal}\n        width={450}\n        leftButtonText=\"Otkaži\"\n        rightButtonText=\"Nastavi\"\n        leftButtonOnClick={toggleConfirmModal}\n        rightButtonOnClick={handleSubmit(onSubmit)}\n        content={\n          <ConfirmModalContent>\n            <TriangleIcon />\n            <Typography\n              content=\"Da li želite kreirati korisnički profil za ovog kandidata?\"\n              variant=\"bodyLarge\"\n              style={{fontWeight: 600}}\n            />\n            <Typography\n              content={'Ukoliko odaberete opciju nastavi, bićete upućeni na stranicu za dodavanje novog zaposlenog.'}\n              variant=\"bodySmall\"\n              style={{textAlign: 'center'}}\n            />\n          </ConfirmModalContent>\n        }\n      />\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/JobTenderApplicationModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/absentsModal/absentsModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dropdownVacationOptions' is defined but never used.","line":8,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'parseDate' is defined but never used.","line":10,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1658,1661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1658,1661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2314,2317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2314,2317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3965,3968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3965,3968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4725,4728],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4725,4728],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5330,5333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5330,5333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":186,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6164,6167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6164,6167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6205,6208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6205,6208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Datepicker, Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {AbsentsModalProps} from '../../screens/employees/absents/types';\nimport useOrganizationUnits from '../../services/graphql/organizationUnits/useOrganizationUnits';\nimport useAbsentInsert from '../../services/graphql/userProfile/absents/useAbsentInsert';\nimport {AbsentType, UserProfileAbsentsParams} from '../../types/graphql/profileAbsentsTypes';\nimport {dropdownOptions, dropdownVacationOptions} from './constants';\nimport {FileUploadWrapper, FormGroup, ModalContentWrapper, UploadedFileContainer, UploadedFileWrapper} from './styles';\nimport {parseDate, parseDateForBackend, parseToDate} from '../../utils/dateUtils';\n\nconst initialValues: UserProfileAbsentsParams = {\n  id: null,\n  user_profile_id: 0,\n  absent_type_id: null,\n  target_organization_unit_id: null,\n  date_of_start: null,\n  date_of_end: null,\n  description: '',\n  file_id: null,\n};\n\nexport const AbsentModal: React.FC<AbsentsModalProps> = ({\n  selectedItem,\n  absentTypes,\n  open,\n  onClose,\n  userProfileId,\n  alert,\n}) => {\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  const [absentChildType, setAbsentChildType] = useState<AbsentType[]>([]);\n  const [isVacation, setIsVacation] = useState<boolean | null>(null);\n  const [selectedAbsentTypeId, setSelectedAbsentTypeId] = useState(null);\n\n  const handleUpload = (files: FileList) => {\n    const fileList = Array.from(files);\n    setUploadedFiles(fileList);\n  };\n\n  const handleTypeChange = (selectedValue: any) => {\n    if (selectedValue.id === 1) {\n      setIsVacation(true);\n      setAbsentChildType([...absentTypes.filter(item => item.accounting_days_off)]);\n    } else {\n      setIsVacation(false);\n      setAbsentChildType([...absentTypes.filter(item => !item.accounting_days_off)]);\n    }\n  };\n\n  const {organizationUnits} = useOrganizationUnits();\n\n  const organizationUnitsList = useMemo(() => {\n    return organizationUnits\n      .filter(i => !i.parent_id)\n      .map(unit => {\n        return {id: unit.id, title: unit.title};\n      });\n  }, [organizationUnits]);\n\n  const {mutate, loading: isSaving} = useAbsentInsert();\n\n  const handleSave = (values: any) => {\n    if (isSaving) return;\n    const payload = {\n      id: values?.id || 0,\n      user_profile_id: userProfileId,\n      date_of_start: parseDateForBackend(values?.date_of_start),\n      date_of_end: parseDateForBackend(values?.date_of_end),\n      absent_type_id: isVacation ? absentChildType[0]?.id : values?.absent_type?.id,\n      description: values?.description,\n      target_organization_unit_id: values?.target_organization_unit?.id || null,\n      file_id: values?.file_id || null,\n    };\n\n    mutate(\n      payload,\n      () => {\n        onClose(true);\n        alert.success('Uspješno sačuvano.');\n        reset(initialValues);\n      },\n      () => {\n        alert.error('Greška. Promjene nisu sačuvane.');\n      },\n    );\n  };\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm<UserProfileAbsentsParams>({defaultValues: initialValues});\n\n  useEffect(() => {\n    if (selectedItem) {\n      reset({\n        ...selectedItem,\n        date_of_end: parseToDate(selectedItem.date_of_end),\n        date_of_start: parseToDate(selectedItem?.date_of_start),\n      });\n      if (selectedItem.id !== 0) {\n        if (selectedItem?.absent_type.accounting_days_off) {\n          setAbsentChildType([...absentTypes.filter(item => item.accounting_days_off)]);\n          setIsVacation(true);\n        } else {\n          setAbsentChildType([...absentTypes.filter(item => !item.accounting_days_off)]);\n          handleAbsentTypeChange(selectedItem?.absent_type.title);\n          setIsVacation(false);\n        }\n      }\n    }\n  }, [selectedItem, reset]);\n\n  const handleAbsentTypeChange = (selectedValue: any) => {\n    setSelectedAbsentTypeId(selectedValue);\n  };\n\n  const VacationValue = () => {\n    if (isVacation) {\n      return dropdownOptions[1];\n    } else if (isVacation === false) {\n      return dropdownOptions[2];\n    } else {\n      return dropdownOptions[0];\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset(initialValues);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(handleSave)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <FormGroup>\n            <Dropdown\n              label=\"VRSTA ZAHTJEVA:\"\n              options={dropdownOptions.slice(1)}\n              value={VacationValue() as any}\n              onChange={handleTypeChange}\n              placeholder=\"Birajte vrstu\"\n              name=\"vacation\"\n            />\n          </FormGroup>\n          {!isVacation && (\n            <FormGroup>\n              <Controller\n                name=\"absent_type\"\n                control={control}\n                rules={{required: 'Ovo polje je obavezno'}}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    label=\"VRSTA:\"\n                    name={name}\n                    options={absentChildType}\n                    value={value as any}\n                    onChange={selectedValue => {\n                      handleAbsentTypeChange(selectedValue.title);\n                      onChange(selectedValue);\n                    }}\n                    error={errors.absent_type?.message}\n                    placeholder=\"Birajte vrstu\"\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n          {!isVacation && selectedAbsentTypeId === 'Upućivanje u drugi državni organ' && (\n            <FormGroup>\n              <Controller\n                name=\"target_organization_unit\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    label=\"DRŽAVNI ORGAN:\"\n                    name={name}\n                    options={organizationUnitsList as any}\n                    value={value as any}\n                    onChange={onChange}\n                    error={errors.target_organization_unit?.message}\n                    placeholder=\"Birajte državni organ\"\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n          <FormGroup>\n            <Controller\n              name=\"date_of_start\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"POČETAK TRAJANJA:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_start?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Controller\n              name=\"date_of_end\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"KRAJ TRAJANJA (Uključujuci taj dan):\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_end?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Input {...register('description')} label=\"OPIS:\" placeholder=\"Unesite opis...\" textarea />\n          </FormGroup>\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={handleUpload}\n              note={<Typography variant=\"bodySmall\" content=\"Validacija\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n          {uploadedFiles.length > 0 && (\n            <UploadedFileWrapper>\n              {uploadedFiles.map((file, index) => (\n                <UploadedFileContainer key={index}>\n                  <Typography variant=\"bodySmall\" content={file.name} />\n                </UploadedFileContainer>\n              ))}\n            </UploadedFileWrapper>\n          )}\n        </ModalContentWrapper>\n      }\n      title={'ZAHTJEVI'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/absentsModal/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/absentsModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/confirmationsModal/confirmationsModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1664,1667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1664,1667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3339,3342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3339,3342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Datepicker, Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport React, {useEffect, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {ConfirmationsModalProps} from '../../screens/employees/confirmations/types';\nimport useResolutionInsert from '../../services/graphql/userProfile/resolution/useResolutionInsert';\nimport {DropdownDataNumber} from '../../types/dropdownData';\nimport {parseDateForBackend, parseToDate} from '../../utils/dateUtils';\nimport {FileUploadWrapper, FormGroup, ModalContentWrapper, UploadedFileContainer, UploadedFileWrapper} from './styles';\n\nconst confirmationSchema = yup.object().shape({\n  resolution_purpose: yup.string(),\n  date_of_start: yup.date().required('Ovo polje je obavezno'),\n  resolution_type: yup.object().required('Ovo polje je obavezno'),\n});\n\nexport const ConfirmationsModal: React.FC<ConfirmationsModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  userProfileId,\n  alert,\n}) => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({\n    resolver: yupResolver(confirmationSchema),\n  });\n\n  const dropdownOptions: DropdownDataNumber[] = [\n    {id: 1, title: 'Potvrde'},\n    {id: 2, title: 'Rješenja'},\n  ];\n\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n\n  const handleUpload = (files: FileList) => {\n    const fileList = Array.from(files);\n    setUploadedFiles(fileList);\n  };\n\n  const {mutate: saveUserProfileResolution, loading: isSaving} = useResolutionInsert();\n\n  const handleSave = (value: any) => {\n    if (isSaving) return;\n\n    const payload = {\n      ...value,\n      id: value?.id || 0,\n      user_profile_id: Number(userProfileId),\n      date_of_start: parseDateForBackend(value?.date_of_start),\n      date_of_end: null,\n      file_id: value?.file_id || 0,\n      resolution_purpose: value?.resolution_purpose || '',\n      resolution_type_id: value?.resolution_type.id || null,\n    };\n\n    delete payload.created_at;\n    delete payload.updated_at;\n    delete payload.resolution_type;\n    delete payload.user_profile;\n\n    saveUserProfileResolution(\n      payload,\n      () => {\n        onClose(true);\n        alert.success('Uspješno sačuvano.');\n      },\n      () => {\n        onClose(true);\n        alert.error('Greška. Promjene nisu sačuvane.');\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (selectedItem) {\n      reset({\n        ...selectedItem,\n        date_of_end: parseToDate(selectedItem?.date_of_end),\n        date_of_start: parseToDate(selectedItem?.date_of_start),\n      });\n    }\n  }, [selectedItem]);\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        reset();\n        onClose();\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(handleSave)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <FormGroup>\n            <Controller\n              name=\"resolution_type\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"VRSTA:\"\n                  name={name}\n                  options={dropdownOptions}\n                  value={value as any}\n                  onChange={onChange}\n                  error={errors.resolution_type?.message}\n                  placeholder=\"Birajte vrstu\"\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Controller\n              name=\"date_of_start\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"DATUM RJEŠENJA/POTVRDE:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_start?.message}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Input {...register('resolution_purpose')} label=\"SVRHA:\" placeholder=\"Unesite opis...\" textarea />\n          </FormGroup>\n\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={handleUpload}\n              note={<Typography variant=\"bodySmall\" content=\"Validacija\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n\n          {!!uploadedFiles.length && (\n            <UploadedFileWrapper>\n              {uploadedFiles.map((file, index) => (\n                <UploadedFileContainer key={index}>\n                  <Typography variant=\"bodySmall\" content={file.name} />\n                </UploadedFileContainer>\n              ))}\n            </UploadedFileWrapper>\n          )}\n        </ModalContentWrapper>\n      }\n      title={'SVRHA POTVRDE I RJEŠENJA'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/confirmationsModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/academicEducationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckIcon' is defined but never used.","line":1,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Theme' is defined but never used.","line":1,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":61},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":26,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":26,"endColumn":13,"fix":{"range":[1165,1177],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":27,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":27,"endColumn":13,"fix":{"range":[1194,1206],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":28,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":28,"endColumn":11,"fix":{"range":[1293,1303],"text":"        "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3453,3456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3453,3456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4077,4080],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4077,4080],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4573,4576],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4573,4576],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import {CheckIcon, Dropdown, FileUpload, Input, Modal, Theme, Typography} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {ModalProps} from '../../../screens/employees/education/types';\nimport {UserProfileEducationFormValues} from '../../../types/graphql/userProfileGetEducation';\nimport {academicTitles, educationTypes, initialValues} from './constants';\nimport {FileUploadWrapper, FormGroup, ModalContentWrapper} from './styles';\nimport useEducationInsert from '../../../services/graphql/userProfile/education/useEducationInsert';\nimport useSettingsDropdownOverview from '../../../services/graphql/settingsDropdown/useSettingsDropdownOverview';\n\nexport const AcademicEducationModal: React.FC<ModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  alert,\n  refetchList,\n  navigation,\n}) => {\n  const {data: types} = useSettingsDropdownOverview({entity: educationTypes.education_academic_types});\n  const typesOptions = useMemo(() => types?.map(type => ({id: type.id as number, title: type.title})) || [], [types]);\n\n  const item = useMemo(\n    () =>\n      selectedItem\n        ? {\n            ...selectedItem,\n            academic_title: {id: selectedItem.academic_title, title: selectedItem.academic_title},\n          }\n        : initialValues,\n    [selectedItem],\n  );\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: selectedItem});\n\n  const {mutate, loading: isSaving} = useEducationInsert();\n\n  useEffect(() => {\n    item && reset(item);\n  }, [item]);\n\n  const onSubmit = async (values: UserProfileEducationFormValues) => {\n    if (isSaving) return;\n\n    const data = {\n      id: values.id,\n      title: values.title,\n      date_of_certification: null,\n      price: values.price,\n      date_of_start: null,\n      date_of_end: null,\n      expertise_level: values.expertise_level,\n      certificate_issuer: values.certificate_issuer,\n      description: values.description,\n      file_id: values.file_id,\n      academic_title: values.academic_title?.id || '',\n      type_id: values.type?.id || 0,\n      user_profile_id: Number(navigation.location.pathname.split('/')[4]),\n    };\n\n    try {\n      mutate(\n        data,\n        () => {\n          alert.success('Uspješno sačuvano.');\n          refetchList && refetchList();\n          onClose();\n        },\n        () => {\n          alert.error('Greška. Promjene nisu sačuvane.');\n          onClose();\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <FormGroup>\n            <Input\n              {...register('certificate_issuer', {required: 'Ovo polje je obavezno'})}\n              label=\"INSTITUCIJA:\"\n              error={errors.certificate_issuer?.message as string}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Controller\n              name=\"type\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"STEPEN ŠKOLSKOG OBRAZOVANJA:\"\n                    options={typesOptions}\n                    error={errors.type?.message as string}\n                  />\n                );\n              }}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Controller\n              name=\"academic_title\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"STEPEN STRUČNE OSPOSOBLJENOSTI:\"\n                  options={academicTitles}\n                  error={errors.academic_title?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <FileUploadWrapper>\n              <FileUpload\n                icon={<></>}\n                style={{width: '100%'}}\n                variant=\"secondary\"\n                onUpload={(item: any) => console.log(item)}\n                note={<Typography variant=\"bodySmall\" content=\"Obrazovni sertifikat\" />}\n                buttonText=\"Učitaj\"\n              />\n            </FileUploadWrapper>\n          </FormGroup>\n        </ModalContentWrapper>\n      }\n      title={'DODAJTE NOVO AKADEMSKO OBRAZOVANJE'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/functionalAcknowledgmentsModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3814,3817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3814,3817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Datepicker, Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {ModalProps} from '../../../screens/employees/education/types';\nimport useSettingsDropdownOverview from '../../../services/graphql/settingsDropdown/useSettingsDropdownOverview';\nimport useEducationInsert from '../../../services/graphql/userProfile/education/useEducationInsert';\nimport {UserProfileEducationFormValues} from '../../../types/graphql/userProfileGetEducation';\nimport {educationTypes, initialValues} from './constants';\nimport {FileUploadWrapper, ModalContentWrapper, Row} from './styles';\nimport {parseDateForBackend, parseToDate} from '../../../utils/dateUtils';\n\nexport const FunctionalAcknowledgmentModal: React.FC<ModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  alert,\n  refetchList,\n  navigation,\n}) => {\n  const {data: types} = useSettingsDropdownOverview({entity: educationTypes.education_functional_types});\n  const typesOptions = useMemo(() => types?.map(type => ({id: type.id as number, title: type.title})) || [], [types]);\n\n  const item = useMemo(() => selectedItem || initialValues, [selectedItem]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: item});\n\n  const {mutate, loading: isSaving} = useEducationInsert();\n\n  useEffect(() => {\n    item &&\n      reset({...item, date_of_start: parseToDate(item.date_of_start), date_of_end: parseToDate(item.date_of_end)});\n  }, [item]);\n\n  const onSubmit = async (values: UserProfileEducationFormValues) => {\n    if (isSaving) return;\n\n    const data = {\n      id: values.id,\n      title: values.title,\n      date_of_certification: null,\n      price: Number(values.price),\n      date_of_start: parseDateForBackend(values?.date_of_start),\n      date_of_end: parseDateForBackend(values?.date_of_end),\n      expertise_level: values?.expertise_level,\n      certificate_issuer: values.certificate_issuer,\n      description: values.description,\n      file_id: values.file_id,\n      academic_title: values.academic_title?.id || '',\n      type_id: values.type?.id || 0,\n      user_profile_id: Number(navigation.location.pathname.split('/')[4]),\n    };\n\n    try {\n      mutate(\n        data,\n        () => {\n          alert.success('Uspješno sačuvano.');\n          refetchList && refetchList();\n          onClose();\n          reset(initialValues);\n        },\n        () => {\n          alert.error('Greška. Promjene nisu sačuvane.');\n          onClose();\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    } finally {\n      reset(initialValues);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset(initialValues);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <Row>\n            <Input\n              {...register('expertise_level', {required: 'Ovo polje je obavezno'})}\n              label=\"FUNKCIONALNA ZNANJA:\"\n              error={errors.expertise_level?.message as string}\n            />\n            <Input\n              {...register('certificate_issuer', {required: 'Ovo polje je obavezno'})}\n              label=\"IZVOĐAČ:\"\n              error={errors.certificate_issuer?.message as string}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"type\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"OCJENA:\"\n                  options={typesOptions}\n                  error={errors.type?.message as string}\n                />\n              )}\n            />\n            <Input\n              {...register('price', {required: 'Ovo polje je obavezno'})}\n              label=\"KOTIZACIJA:\"\n              leftContent={<Typography content={<div>&euro;</div>} />}\n              style={{maxWidth: '300px'}}\n              error={errors.price?.message as string}\n              type=\"number\"\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"date_of_start\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"POČETAK:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_start?.message as string}\n                />\n              )}\n            />\n            <Controller\n              name=\"date_of_end\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"KRAJ:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_end?.message as string}\n                />\n              )}\n            />\n          </Row>\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={item => console.log(item)}\n              note={<Typography variant=\"bodySmall\" content=\"Funkcionalni sertifikat\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n        </ModalContentWrapper>\n      }\n      title={'DODAJTE NOVA FUNKCIONALNA ZNANJA'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/judicalStateExamsModal.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":27,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":27,"endColumn":13,"fix":{"range":[1210,1222],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":28,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":28,"endColumn":13,"fix":{"range":[1239,1251],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":29,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":29,"endColumn":15,"fix":{"range":[1269,1283],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":30,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":30,"endColumn":15,"fix":{"range":[1317,1331],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":31,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":31,"endColumn":13,"fix":{"range":[1368,1380],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":32,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":32,"endColumn":11,"fix":{"range":[1383,1393],"text":"        "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3446,3449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3446,3449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import {Datepicker, Dropdown, FileUpload, Modal, Typography} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {ModalProps} from '../../../screens/employees/education/types';\nimport useSettingsDropdownOverview from '../../../services/graphql/settingsDropdown/useSettingsDropdownOverview';\nimport useEducationInsert from '../../../services/graphql/userProfile/education/useEducationInsert';\nimport {UserProfileEducationFormValues} from '../../../types/graphql/userProfileGetEducation';\nimport {educationTypes, initialValues} from './constants';\nimport {FileUploadWrapper, FormGroup, ModalContentWrapper} from './styles';\nimport {parseDateForBackend, parseToDate} from '../../../utils/dateUtils';\n\nexport const JudicalAndStateExamsModal: React.FC<ModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  alert,\n  refetchList,\n  navigation,\n}) => {\n  const {data: types} = useSettingsDropdownOverview({entity: educationTypes.education_exam_types});\n  const typesOptions = useMemo(() => types?.map(type => ({id: type.id as number, title: type.title})) || [], [types]);\n\n  const item = useMemo(\n    () =>\n      selectedItem\n        ? {\n            ...selectedItem,\n            academic_title: {\n              id: selectedItem?.academic_title,\n              title: selectedItem?.academic_title,\n            },\n          }\n        : initialValues,\n    [selectedItem],\n  );\n\n  const {\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: initialValues});\n\n  const {mutate, loading: isSaving} = useEducationInsert();\n\n  useEffect(() => {\n    item && reset({...item, date_of_certification: parseToDate(item.date_of_certification)});\n  }, [item]);\n\n  const onSubmit = async (values: UserProfileEducationFormValues) => {\n    if (isSaving) return;\n\n    const data = {\n      id: values.id,\n      title: values.title,\n      date_of_certification: parseDateForBackend(values.date_of_certification),\n      price: values.price,\n      date_of_start: null,\n      date_of_end: null,\n      expertise_level: values.expertise_level,\n      certificate_issuer: values.certificate_issuer,\n      description: values.description,\n      file_id: values.file_id,\n      academic_title: values.academic_title?.id || '',\n      type_id: values.type?.id || 0,\n      user_profile_id: Number(navigation.location.pathname.split('/')[4]),\n    };\n\n    try {\n      mutate(\n        data,\n        () => {\n          alert.success('Uspješno sačuvano.');\n          refetchList && refetchList();\n          onClose();\n        },\n        () => {\n          alert.error('Greška. Promjene nisu sačuvane.');\n          onClose();\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    } finally {\n      reset(initialValues);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset(initialValues);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <FormGroup>\n            <Controller\n              name=\"type\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"VRSTA ISPITA\"\n                  options={typesOptions}\n                  error={errors.type?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Controller\n              name=\"date_of_certification\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"DATUM POLAGANJA:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_certification?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup>\n            <FileUploadWrapper>\n              <FileUpload\n                icon={<></>}\n                style={{width: '100%'}}\n                variant=\"secondary\"\n                onUpload={item => console.log(item)}\n                note={<Typography variant=\"bodySmall\" content=\"Obrazovni sertifikat\" />}\n                buttonText=\"Učitaj\"\n              />\n            </FileUploadWrapper>\n          </FormGroup>\n        </ModalContentWrapper>\n      }\n      title={'DODAJTE NOVI PRAVOSUDNI/DRŽAVNI ISPIT'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/languageAcknowledgmentModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckIcon' is defined but never used.","line":1,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Theme' is defined but never used.","line":1,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":54},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":28,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":28,"endColumn":13,"fix":{"range":[1074,1086],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":29,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":29,"endColumn":13,"fix":{"range":[1103,1115],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":30,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":30,"endColumn":15,"fix":{"range":[1134,1148],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":31,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":31,"endColumn":15,"fix":{"range":[1188,1202],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":32,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":32,"endColumn":13,"fix":{"range":[1246,1258],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":33,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":33,"endColumn":11,"fix":{"range":[1261,1271],"text":"        "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1535,1538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1535,1538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3105,3108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3105,3108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3684,3687],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3684,3687],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import {CheckIcon, Dropdown, FileUpload, Modal, Theme} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {ModalProps} from '../../../screens/employees/education/types';\nimport {educationTypes, initialValues, languageAcknowledgmentLevels} from './constants';\nimport {ModalContentWrapper, Row} from './styles';\nimport useEducationInsert from '../../../services/graphql/userProfile/education/useEducationInsert';\nimport useSettingsDropdownOverview from '../../../services/graphql/settingsDropdown/useSettingsDropdownOverview';\n\nexport const LanguageAcknowledgmentModal: React.FC<ModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  alert,\n  refetchList,\n  navigation,\n}) => {\n  const {data: languages} = useSettingsDropdownOverview({entity: educationTypes.education_language_types});\n  const languagesOptions = useMemo(\n    () => languages?.map(type => ({id: type.id as number, title: type.title})) || [],\n    [languages],\n  );\n\n  const item = useMemo(\n    () =>\n      selectedItem\n        ? {\n            ...selectedItem,\n            expertise_level: {\n              id: selectedItem.expertise_level || '',\n              title: selectedItem?.expertise_level || '',\n            },\n          }\n        : initialValues,\n    [selectedItem],\n  );\n\n  const {\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: item});\n\n  const {mutate, loading: isSaving} = useEducationInsert();\n\n  const onSubmit = async (values: any) => {\n    if (isSaving) return;\n\n    const data = {\n      id: values.id,\n      title: values.title,\n      date_of_certification: null,\n      price: values.price,\n      date_of_start: null,\n      date_of_end: null,\n      expertise_level: values.expertise_level.id,\n      certificate_issuer: values.certificate_issuer,\n      description: values.description,\n      file_id: values.file_id,\n      academic_title: values.academic_title?.id || '',\n      type_id: values.type?.id || 0,\n      user_profile_id: Number(navigation.location.pathname.split('/')[4]),\n    };\n\n    try {\n      mutate(\n        data,\n        () => {\n          alert?.success('Uspješno sačuvano');\n          refetchList && refetchList();\n          onClose();\n        },\n        () => {\n          alert.error('Greška. Promjene nisu sačuvane.');\n          onClose();\n        },\n      );\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    item && reset(item);\n  }, [item]);\n\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      style={{width: '560px'}}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <Row>\n            <Controller\n              name=\"type\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"ZNANJE STRANOG JEZIKA:\"\n                  isSearchable\n                  options={languagesOptions}\n                  error={errors.type?.message as string}\n                />\n              )}\n            />\n            <Controller\n              name=\"expertise_level\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"STEPEN:\"\n                  options={languageAcknowledgmentLevels}\n                  error={errors.expertise_level?.message as string}\n                />\n              )}\n            />\n            <FileUpload\n              icon={<></>}\n              style={{border: 'none', padding: '0px', width: 'auto'}}\n              variant=\"primary\"\n              onUpload={item => console.log(item)}\n              buttonText=\"Učitaj\"\n            />\n          </Row>\n        </ModalContentWrapper>\n      }\n      title={'DODAJTE NOVI JEZIK'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/tables/academicEducationTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/tables/functionalAcknowledgementsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/tables/judicalAndStateExamsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/tables/languageAcknowledgementsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/tables/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/employeeDetails/employeeDetails.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":51,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":51,"endColumn":7,"fix":{"range":[2081,2087],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":52,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":52,"endColumn":9,"fix":{"range":[2106,2114],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":53,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":53,"endColumn":7,"fix":{"range":[2154,2160],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":54,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":54,"endColumn":9,"fix":{"range":[2182,2190],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":55,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":55,"endColumn":7,"fix":{"range":[2233,2239],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":56,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":56,"endColumn":9,"fix":{"range":[2257,2265],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":57,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":57,"endColumn":7,"fix":{"range":[2309,2315],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":58,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":58,"endColumn":9,"fix":{"range":[2334,2342],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":59,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":59,"endColumn":7,"fix":{"range":[2387,2393],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":60,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":60,"endColumn":9,"fix":{"range":[2416,2424],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":61,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":61,"endColumn":7,"fix":{"range":[2465,2471],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":62,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":62,"endColumn":9,"fix":{"range":[2497,2505],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":63,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":63,"endColumn":7,"fix":{"range":[2546,2552],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":64,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":64,"endColumn":9,"fix":{"range":[2574,2582],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":65,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":65,"endColumn":7,"fix":{"range":[2630,2636],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":66,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":66,"endColumn":9,"fix":{"range":[2656,2664],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":67,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":67,"endColumn":7,"fix":{"range":[2710,2716],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":68,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":68,"endColumn":9,"fix":{"range":[2732,2740],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":69,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":69,"endColumn":7,"fix":{"range":[2778,2784],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":70,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":70,"endColumn":9,"fix":{"range":[2793,2801],"text":"      "}}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":20,"fixableWarningCount":0,"source":"import React, {useEffect, useMemo, useState} from 'react';\nimport {EmployeeDetailsBox, StyledTabs} from './styles';\nimport {Tab} from '@oykos-development/devkit-react-ts-styled-components';\nimport {employeeTabs} from '../../screens/employees/constants';\nimport {getRouteName} from '../../utils/getRouteName';\nimport {MicroserviceProps} from '../../types/micro-service-props';\nimport {BasicInfo} from '../../screens/employees/basicInfo/basicInfo';\nimport {EducationPage} from '../../screens/employees/education/education';\nimport {ExperiencePage} from '../../screens/employees/experience/experience';\nimport {FamilyPage} from '../../screens/employees/family/family';\nimport Foreigners from '../../screens/employees/foreigners/foreigners';\nimport {ConfirmationsPage} from '../../screens/employees/confirmations/confirmations';\nimport {EvaluationsPage} from '../../screens/employees/evaluations/evaluations';\nimport {SalaryParams} from '../../screens/employees/salaryParams/salaryParams';\nimport Absents from '../../screens/employees/absents/absents';\n\ninterface EmployeeDetailsProps {\n  context: MicroserviceProps;\n  setAlert: (alert: {variant: string; message: string}) => void;\n}\n\nconst getCurrentTab = (pathname: string) => {\n  const path = pathname.split('/');\n  const name = path[path.length - 1];\n  return employeeTabs.find(tab => tab.routeName === name)?.id;\n};\n\nconst EmployeeDetails: React.FC<EmployeeDetailsProps> = ({context}) => {\n  const [activeTab, setActiveTab] = useState(getCurrentTab(context.navigation.location.pathname) || 1);\n  const {\n    navigation: {\n      navigate,\n      location: {pathname},\n    },\n  } = context;\n\n  const employeesPath = pathname && pathname.split('/')[pathname.split('/').length - 1];\n\n  const onTabChange = (tab: Tab) => {\n    setActiveTab(tab.id as number);\n    const routeName = getRouteName(tab.title as string);\n\n    const pathname = context.navigation.location.pathname.split('/');\n    pathname.pop();\n\n    navigate(`${pathname.join('/')}/${routeName}`);\n  };\n\n  const employeesRoute = useMemo(() => {\n    switch (employeesPath) {\n      case 'basic-info':\n        return <BasicInfo context={context} />;\n      case 'salary-params':\n        return <SalaryParams context={context} />;\n      case 'education':\n        return <EducationPage context={context} />;\n      case 'experience':\n        return <ExperiencePage context={context} />;\n      case 'family-members':\n        return <FamilyPage context={context} />;\n      case 'foreigner-permits':\n        return <Foreigners context={context} />;\n      case 'confirmations':\n        return <ConfirmationsPage context={context} />;\n      case 'evaluations':\n        return <EvaluationsPage context={context} />;\n      case 'absents':\n        return <Absents context={context} />;\n      default:\n        return <></>;\n    }\n  }, [employeesPath, context]);\n\n  useEffect(() => {\n    setActiveTab(getCurrentTab(context.navigation.location.pathname) || 1);\n  }, [context.navigation.location.pathname]);\n\n  // TODO: find a better way of handling this\n  if (employeesPath === 'employees') {\n    return null;\n  }\n\n  return (\n    <EmployeeDetailsBox>\n      <StyledTabs\n        tabs={employeeTabs}\n        activeTab={activeTab}\n        onChange={onTabChange}\n        //TODO: change in devkit/library\n        style={{borderWidth: '1px', borderRadius: '0.5em 0.5em 0 0', whiteSpace: 'nowrap'}}\n      />\n      {employeesRoute}\n    </EmployeeDetailsBox>\n  );\n};\n\nexport default EmployeeDetails;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/employeeDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/employeesList/employeesList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OrganizationUnit' is defined but never used.","line":11,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[898,901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[898,901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1028,1031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1028,1031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1109,1112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1109,1112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":50,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":50,"endColumn":11,"fix":{"range":[1779,1789],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":51,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":51,"endColumn":11,"fix":{"range":[1835,1845],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":52,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":52,"endColumn":13,"fix":{"range":[1880,1892],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":53,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":53,"endColumn":11,"fix":{"range":[1933,1943],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":54,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":54,"endColumn":9,"fix":{"range":[1947,1955],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2461,2464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2461,2464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3037,3040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3037,3040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3171,3174],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3171,3174],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3392,3395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3392,3395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3516,3519],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3516,3519],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3711,3714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3711,3714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3823,3826],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3823,3826],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":5,"fixableWarningCount":0,"source":"import React, {ChangeEvent, RefObject, useEffect, useMemo, useRef} from 'react';\nimport {Controls, FilterDropdown, FilterInput, Filters, Header, MainTitle, OverviewBox} from './styles';\nimport {tableHeads} from '../../screens/employees/constants';\nimport {Button, Pagination, Table, Divider, Theme, SearchIcon} from 'client-library';\nimport {UserProfile} from '../../types/graphql/userProfiles';\nimport useOrganizationUnits from '../../services/graphql/organizationUnits/useOrganizationUnits';\nimport {EmployeeListFilters} from '../../screens/employees';\nimport {statusOptions} from '../../constants';\nimport useJobPositions from '../../services/graphql/jobPositions/useJobPositionOverview';\nimport {scrollToTheNextElement} from '../../utils/scrollToTheNextElement';\nimport {OrganizationUnit} from '../../types/graphql/organizationUnitsTypes';\n\nexport interface EmployeesListProps {\n  navigation?: any;\n  navigate: (path: string) => void;\n  toggleEmployeeImportModal: () => void;\n  onPageChange: (page: number) => void;\n  data: any;\n  search: string;\n  filters: EmployeeListFilters;\n  onFilterChange: (value: any, name: string) => void;\n  onSearch: (e: ChangeEvent<HTMLInputElement>) => void;\n  parentRef: RefObject<HTMLDivElement>;\n  loading: boolean;\n}\n\nconst EmployeesList: React.FC<EmployeesListProps> = ({\n  navigation,\n  navigate,\n  toggleEmployeeImportModal,\n  onPageChange,\n  data,\n  search,\n  filters,\n  onFilterChange,\n  onSearch,\n  parentRef,\n  loading,\n}) => {\n  const overviewRef = useRef<HTMLDivElement>(null);\n  const state = navigation.location.state;\n\n  const {organizationUnits} = useOrganizationUnits(undefined, true);\n\n  const {data: jobPositions} = useJobPositions('');\n\n  const organizationUnitsList = useMemo(() => {\n    return organizationUnits\n      ? [\n          {id: 0, title: 'Sve organizacione jedinice'},\n          ...organizationUnits.map(unit => {\n            return {id: unit.id, title: unit.title};\n          }),\n        ]\n      : [];\n  }, [organizationUnits]);\n\n  const list = useMemo(() => {\n    if (data.items) {\n      return data?.items?.map((item: UserProfile) => ({\n        full_name: `${item.first_name} ${item.last_name}`,\n        ...item,\n        active: item.active ? 'Aktivan' : 'Neaktivan',\n      }));\n    }\n    return [];\n  }, [data]);\n\n  const jobPositionOptions = useMemo(() => {\n    return [\n      {id: 0, title: 'Sva radna mjesta'},\n      ...(jobPositions?.items\n        ? jobPositions.items.map((jobPosition: any) => ({id: jobPosition.id, title: jobPosition.title}))\n        : []),\n    ];\n  }, [jobPositions]);\n\n  useEffect(() => {\n    state?.scroll && scrollToTheNextElement(parentRef, overviewRef);\n  }, []);\n\n  return (\n    <OverviewBox ref={overviewRef}>\n      <MainTitle variant=\"bodyMedium\" content=\"PREGLED SVIH ZAPOSLENIH\" />\n      {/*TODO: theme color */}\n      <Divider color={Theme?.palette?.gray200} height=\"1px\" />\n      <Header>\n        <Filters>\n          <FilterDropdown\n            label=\"FILTER ORGANIZACIONIH JEDINICA:\"\n            options={organizationUnitsList as any}\n            onChange={value => onFilterChange(value, 'organization_unit_id')}\n            value={filters.organization_unit_id as any}\n            name=\"organization_unit_id\"\n            placeholder=\"Odaberite organizacionu jedinicu\"\n          />\n\n          <FilterDropdown\n            label=\"RADNO MJESTO:\"\n            options={jobPositionOptions as any}\n            onChange={value => onFilterChange(value, 'job_position_id')}\n            value={filters.job_position_id as any}\n            name=\"job_position_id\"\n            placeholder=\"Odaberite radno mjesto\"\n          />\n\n          <FilterDropdown\n            label=\"STATUS:\"\n            options={statusOptions as any}\n            onChange={value => onFilterChange(value, 'is_active')}\n            value={filters.is_active as any}\n            name=\"is_active\"\n            placeholder=\"Odaberite status\"\n          />\n\n          <FilterInput\n            onChange={onSearch}\n            label=\"PRETRAGA PO IMENU I PREZIMENU:\"\n            value={search}\n            rightContent={<SearchIcon />}\n            placeholder=\"Unesite ime i prezime\"\n          />\n        </Filters>\n        <Controls>\n          <Button\n            content=\"Uvoz zaposlenih\"\n            variant=\"secondary\"\n            style={{marginRight: 10, width: 170}}\n            onClick={() => toggleEmployeeImportModal()}\n          />\n          <Button\n            content=\"Dodaj zaposlenog\"\n            variant=\"secondary\"\n            style={{width: 170}}\n            onClick={() => {\n              navigate('/hr/employees/add-new');\n            }}\n          />\n        </Controls>\n      </Header>\n      <Table\n        tableHeads={tableHeads}\n        data={list || []}\n        style={{marginBottom: 22}}\n        isLoading={loading}\n        onRowClick={row => {\n          navigate(`/hr/employees/details/${row.id}/basic-info`);\n          scrollToTheNextElement(parentRef, overviewRef);\n        }}\n      />\n      <Pagination\n        pageCount={Math.ceil(data.total / 10)}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={2}\n        previousLabel=\"Previous\"\n        nextLabel=\"Next\"\n        pageRangeDisplayed={3}\n      />\n    </OverviewBox>\n  );\n};\n\nexport default EmployeesList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/employeesList/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/evaluationModal/evaluationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2014,2017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2014,2017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2070,2073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2070,2073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4239,4242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4239,4242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4805,4808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4805,4808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Datepicker, Dropdown, FileUpload, Modal, Typography} from 'client-library';\nimport React, {useEffect, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {yesOrNoOptionsString} from '../../constants';\nimport {EvaluationModalProps} from '../../screens/employees/evaluations/types';\nimport useEvaluationInsert from '../../services/graphql/userProfile/evaluation/useEvaluationInsert';\nimport {DropdownDataNumber} from '../../types/dropdownData';\nimport {parseDateForBackend, parseToDate} from '../../utils/dateUtils';\nimport {FileUploadWrapper, FormWrapper, Row} from './styles';\n\nconst evaluationSchema = yup.object().shape({\n  date_of_evaluation: yup.date().required('Ovo polje je obavezno'),\n  is_relevant: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string(), title: yup.string()})\n    .required('Ovo polje je obavezno'),\n  score: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string(), title: yup.string()})\n    .required('Ovo polje je obavezno'),\n  user_profile_id: yup.number().required('Ovo polje je obavezno'),\n});\n\nexport const EvaluationModal: React.FC<EvaluationModalProps> = ({\n  alert,\n  refetchList,\n  selectedItem,\n  open,\n  onClose,\n  userProfileId,\n  evaluationTypes,\n}) => {\n  const [evaluationTypesOption, setEvaluationTypesOption] = useState<DropdownDataNumber[]>([]);\n\n  const {\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({\n    resolver: yupResolver(evaluationSchema),\n    defaultValues: {user_profile_id: Number(userProfileId) ?? null},\n  });\n\n  useEffect(() => {\n    if (Array.isArray(evaluationTypes) && evaluationTypes.length > 0) {\n      const newData = evaluationTypes.map(item => ({id: item.id || 0, title: item.title || ''}));\n      setEvaluationTypesOption(newData);\n    }\n  }, [evaluationTypes]);\n\n  const {mutate, loading: isSaving} = useEvaluationInsert();\n\n  const onSubmit = async (data: any) => {\n    if (isSaving) return;\n\n    const payload: any = {\n      user_profile_id: data?.user_profile_id,\n      score: data?.score.title,\n      is_relevant: data?.is_relevant?.id === 'Da' ? true : false,\n      date_of_evaluation: parseDateForBackend(data?.date_of_evaluation),\n      file_id: data?.file_id,\n      evaluation_type_id: data?.score.id,\n      evaluator: '',\n    };\n\n    if (selectedItem) {\n      payload.id = selectedItem.id ? selectedItem.id : 0;\n    }\n\n    await mutate(\n      payload,\n      () => {\n        refetchList();\n        alert.success('Uspješno sačuvano.');\n        onClose();\n        reset();\n      },\n      () => {\n        alert.error('Greška. Promjene nisu sačuvane.');\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (selectedItem) {\n      reset({\n        ...selectedItem,\n        is_relevant: {id: selectedItem?.is_relevant ? 'Da' : 'Ne', title: selectedItem?.is_relevant ? 'Da' : 'Ne'},\n        date_of_evaluation: parseToDate(selectedItem?.date_of_evaluation),\n        score: {id: selectedItem?.evaluation_type.id, title: selectedItem?.evaluation_type.title},\n        user_profile_id: Number(userProfileId),\n      });\n    }\n  }, [selectedItem]);\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset();\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <FormWrapper>\n          <Row>\n            <Controller\n              name=\"date_of_evaluation\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  selected={value ? new Date(value) : ''}\n                  name={name}\n                  label=\"DATUM:\"\n                  error={errors.date_of_evaluation?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"is_relevant\"\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"PRAVOSNAŽNOST:\"\n                    options={yesOrNoOptionsString}\n                    error={errors.is_relevant?.message}\n                  />\n                );\n              }}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"score\"\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"OCJENA:\"\n                    options={evaluationTypesOption}\n                    error={errors.is_relevant?.message}\n                  />\n                );\n              }}\n            />\n          </Row>\n\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={(item: File | FileList) => console.log(item)}\n              note={<Typography variant=\"bodySmall\" content=\"Validacija\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n        </FormWrapper>\n      }\n      title={'DODAJTE NOVO ZAPOSLENJE'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/evaluationModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/experienceModal/experienceModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3345,3348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3345,3348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4626,4629],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4626,4629],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":173,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5638,5641],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5638,5641],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Datepicker, Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport React, {useEffect} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {yesOrNoOptionsString} from '../../constants';\nimport {ExperienceModalProps} from '../../screens/employees/experience/types';\nimport {formatData} from '../../screens/employees/experience/utils';\nimport useOrganizationUnits from '../../services/graphql/organizationUnits/useOrganizationUnits';\nimport useExperienceInsert from '../../services/graphql/userProfile/experience/useExperienceInsert';\nimport {DropdownDataString} from '../../types/dropdownData';\nimport {calculateExperience, parseToDate} from '../../utils/dateUtils';\nimport {FileUploadWrapper, FormWrapper, Row} from './styles';\n\nconst experienceSchema = yup.object().shape({\n  relevant: yup\n    .object()\n    .default(undefined)\n    .required('Ovo polje je obavezno')\n    .shape({id: yup.string().required(), title: yup.string().required()}),\n  amount_of_experience: yup.number().required('Ovo polje je obavezno'),\n  amount_of_insured_experience: yup\n    .number()\n    .transform(value => (!value || isNaN(value) ? null : value))\n    .nullable()\n    .required('Ovo polje je obavezno'),\n  date_of_end: yup\n    .date()\n    .required('Ovo polje je obavezno')\n    .min(yup.ref('date_of_start'), 'Kraj radnog odnosa ne može biti prije početka radnog odnosa.')\n    .nullable(),\n  date_of_start: yup.date().required('Ovo polje je obavezno').nullable(),\n  organization_unit: yup.string().when('relevant', {\n    is: (value: DropdownDataString) => value && value.id === 'Ne',\n    then: schema => schema.required('Ovo polje je obavezno'),\n    otherwise: schema => schema.optional(),\n  }),\n  organization_unit_id: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string().required(), title: yup.string().required()})\n    .when('relevant', {\n      is: (value: DropdownDataString) => value && value.id === 'Da',\n      then: schema => schema.required('Ovo polje je obavezno'),\n      otherwise: schema => schema.optional(),\n    }),\n  user_profile_id: yup.number().required(),\n});\n\nexport const ExperienceModal: React.FC<ExperienceModalProps> = ({\n  refetchList,\n  selectedItem,\n  open,\n  onClose,\n  units,\n  userProfileId,\n  alert,\n}) => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: {errors},\n    reset,\n    setValue,\n  } = useForm({resolver: yupResolver(experienceSchema), defaultValues: {user_profile_id: userProfileId}});\n\n  const {mutate, loading: isSaving} = useExperienceInsert();\n  const {organizationUnitsList} = useOrganizationUnits();\n\n  const {relevant, date_of_start, date_of_end} = watch();\n\n  useEffect(() => {\n    if (selectedItem) {\n      reset({\n        ...selectedItem,\n        relevant: {id: selectedItem?.relevant ? 'Da' : 'Ne', title: selectedItem?.relevant ? 'Da' : 'Ne'},\n        organization_unit_id: organizationUnitsList\n          .slice(1)\n          .find(orgUnit => orgUnit.id === selectedItem?.organization_unit_id),\n        date_of_start: parseToDate(selectedItem?.date_of_start),\n        date_of_end: parseToDate(selectedItem?.date_of_end),\n        user_profile_id: userProfileId,\n      });\n    }\n  }, [selectedItem]);\n\n  const onSubmit = (data: any) => {\n    if (isSaving) return;\n\n    const payload = formatData(data, !selectedItem);\n\n    try {\n      mutate(\n        payload,\n        () => {\n          alert.success('Uspješno sačuvano.');\n          refetchList();\n          onClose();\n        },\n        () => {\n          alert.error('Greška. Promjene nisu sačuvane.');\n          onClose();\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    } finally {\n      reset();\n    }\n  };\n\n  useEffect(() => {\n    if (date_of_end && date_of_start) {\n      const calculatedExperience = calculateExperience(date_of_start, date_of_end);\n      setValue('amount_of_experience', calculatedExperience);\n    }\n  }, [date_of_end, date_of_start]);\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset();\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <FormWrapper>\n          <Row>\n            <Controller\n              name=\"relevant\"\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"SUDSTVO:\"\n                    options={yesOrNoOptionsString}\n                    error={errors.relevant?.message}\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"date_of_start\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"POČETAK RADNOG ODNOSA:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_start?.message}\n                />\n              )}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"organization_unit_id\"\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"JEDINICA:\"\n                    options={units}\n                    isDisabled={relevant?.id === 'Ne' || !relevant}\n                    error={errors.organization_unit_id?.message}\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"date_of_end\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"KRAJ RADNOG ODNOSA:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_end?.message}\n                />\n              )}\n            />\n          </Row>\n          <Row>\n            <Input\n              {...register('organization_unit')}\n              label=\"ORGANIZACIJA/INSTITUCIJA:\"\n              error={errors.organization_unit?.message}\n              disabled={relevant?.id === 'Da' || !relevant}\n            />\n            <Input {...register('amount_of_insured_experience')} label=\"PRIJAVLJENI STAŽ (MJESECI):\" type=\"number\" />\n          </Row>\n\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={item => console.log(item)}\n              note={<Typography variant=\"bodySmall\" content=\"Dokaz o zaposlenju\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n        </FormWrapper>\n      }\n      title={'DODAJTE NOVO ZAPOSLENJE'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/experienceModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/familyMemberModal/familyMemberModal.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":56,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":56,"endColumn":11,"fix":{"range":[1615,1625],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":57,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":57,"endColumn":11,"fix":{"range":[1642,1652],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":58,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":58,"endColumn":13,"fix":{"range":[1674,1686],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":59,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":59,"endColumn":13,"fix":{"range":[1738,1750],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":60,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":60,"endColumn":11,"fix":{"range":[1805,1815],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":61,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":61,"endColumn":11,"fix":{"range":[1818,1828],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":62,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":62,"endColumn":13,"fix":{"range":[1850,1862],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":63,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":63,"endColumn":13,"fix":{"range":[1923,1935],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":64,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":64,"endColumn":11,"fix":{"range":[1999,2009],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":65,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":65,"endColumn":11,"fix":{"range":[2012,2022],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":66,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":66,"endColumn":11,"fix":{"range":[2132,2142],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":67,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":67,"endColumn":13,"fix":{"range":[2241,2253],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":68,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":68,"endColumn":13,"fix":{"range":[2297,2309],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":69,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":69,"endColumn":11,"fix":{"range":[2356,2366],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":70,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":70,"endColumn":11,"fix":{"range":[2369,2379],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":71,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":71,"endColumn":11,"fix":{"range":[2459,2469],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":72,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":72,"endColumn":11,"fix":{"range":[2534,2544],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":73,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":73,"endColumn":11,"fix":{"range":[2592,2602],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":74,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":74,"endColumn":11,"fix":{"range":[2659,2669],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":75,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":75,"endColumn":11,"fix":{"range":[2762,2772],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":76,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":76,"endColumn":9,"fix":{"range":[2852,2860],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3550,3553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3550,3553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":154,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4649,4652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4649,4652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5278,5281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5278,5281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5937,5940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5937,5940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6661,6664],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6661,6664],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7612,7615],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7612,7615],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":253,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8196,8199],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8196,8199],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":269,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8719,8722],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8719,8722],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onChange' is defined but never used.","line":289,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":289,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":324,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10845,10848],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10845,10848],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":21,"fixableWarningCount":0,"source":"import {Datepicker, Dropdown, Input, Modal} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {nationalMinorities} from '../../constants';\nimport {FamilyMemberModalProps} from '../../screens/employees/family/types';\nimport {formatData} from '../../screens/employees/family/utils';\nimport useFamilyInsert from '../../services/graphql/userProfile/family/useFamilyInsert';\nimport {UserProfileFamilyParams} from '../../types/graphql/userProfileGetFamilyTypes';\nimport {cityData, employeeRelationshipDropdownData} from '../../utils/constants';\nimport {FormWrapper, Row} from './styles';\nimport {parseToDate} from '../../utils/dateUtils';\n\nconst initialValues: UserProfileFamilyParams = {\n  id: 0,\n  user_profile_id: 0,\n  first_name: '',\n  last_name: '',\n  date_of_birth: null,\n  country_of_birth: null,\n  city_of_birth: '',\n  nationality: null,\n  citizenship: null,\n  address: '',\n  father_name: '',\n  mother_name: '',\n  mother_birth_last_name: '',\n  official_personal_id: '',\n  gender: '',\n  insurance_coverage: '',\n  handicapped_person: false,\n  employee_relationship: '',\n  national_minority: null,\n};\n\nexport const FamilyMemberModal: React.FC<FamilyMemberModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  countries,\n  userProfileId,\n  alert,\n  refetch,\n}) => {\n  const citizenshipArray = useMemo(() => {\n    return countries?.map(country => {\n      return {\n        id: country.alpha_3_code,\n        title: country.nationality,\n      };\n    });\n  }, [countries]);\n\n  const item = useMemo(() => {\n    return selectedItem\n      ? {\n          ...selectedItem,\n          handicapped_person: {\n            id: selectedItem?.handicapped_person ? 'Da' : 'Ne',\n            title: selectedItem?.handicapped_person ? 'Da' : 'Ne',\n          },\n          insurance_coverage: {\n            id: selectedItem?.insurance_coverage === 'Ne' ? 'Ne' : 'Da',\n            title: selectedItem?.insurance_coverage === 'Ne' ? 'Ne' : 'Da',\n          },\n          employee_relationship: {id: selectedItem?.employee_relationship, title: selectedItem?.employee_relationship},\n          country_of_birth: {id: selectedItem?.country_of_birth, title: selectedItem?.country_of_birth} || {\n            id: selectedItem?.city_of_birth_montenegro,\n            title: selectedItem?.city_of_birth_montenegro,\n          },\n          citizenship: {id: selectedItem?.citizenship, title: selectedItem?.citizenship},\n          gender: {id: selectedItem?.gender, title: selectedItem?.gender},\n          user_profile_id: selectedItem?.user_profile_id,\n          date_of_birth: parseToDate(selectedItem?.date_of_birth),\n          national_minority: nationalMinorities?.find(nm => nm.id === selectedItem.national_minority),\n          nationality: citizenshipArray?.find(c => c.title === selectedItem.nationality),\n        }\n      : {...initialValues, user_profile_id: Number(userProfileId)};\n  }, [selectedItem]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: {errors},\n    reset,\n    setValue,\n  } = useForm({defaultValues: item || initialValues});\n\n  const {mutate, loading: isSaving} = useFamilyInsert();\n\n  const country_of_birth = watch('country_of_birth');\n\n  const countriesForDropdown = useMemo(() => {\n    return countries?.map(country => {\n      return {\n        id: country.alpha_3_code,\n        title: country.en_short_name,\n      };\n    });\n  }, [countries]);\n\n  useEffect(() => {\n    if (item) {\n      reset(item);\n    }\n  }, [item]);\n\n  const onSubmit = (data: any) => {\n    if (isSaving) return;\n\n    const payload = formatData(data);\n    mutate(\n      payload,\n      () => {\n        alert.success('Uspješno sačuvano.');\n        refetch();\n        onClose();\n      },\n      () => {\n        alert.error('Greška. Promjene nisu sačuvane.');\n        onClose();\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (country_of_birth) {\n      setValue('city_of_birth', null, {shouldValidate: true});\n    }\n  }, [country_of_birth]);\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <FormWrapper>\n          <Row>\n            <Controller\n              name=\"employee_relationship\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"SRODSTVO:\"\n                    options={employeeRelationshipDropdownData}\n                    error={errors.employee_relationship?.message as string}\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"country_of_birth\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    isSearchable\n                    label=\"DRŽAVA ROĐENJA:\"\n                    options={countriesForDropdown || []}\n                    error={errors.country_of_birth?.message as string}\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"insurance_coverage\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"KORISNIK OSIGURANJA:\"\n                    options={[\n                      {id: 'Da', title: 'Da'},\n                      {id: 'Ne', title: 'Ne'},\n                    ]}\n                    error={errors.insurance_coverage?.message as string}\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"handicapped_person\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"LICE SA INVALIDITETOM:\"\n                    options={[\n                      {id: 'Da', title: 'Da'},\n                      {id: 'Ne', title: 'Ne'},\n                    ]}\n                    error={errors.handicapped_person?.message as string}\n                  />\n                );\n              }}\n            />\n          </Row>\n          <Row>\n            <Input\n              {...register('first_name', {required: 'Ovo polje je obavezno'})}\n              label=\"IME:\"\n              error={errors.first_name?.message as string}\n            />\n            <Controller\n              name=\"citizenship\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"DRŽAVLJANSTVO:\"\n                    options={citizenshipArray || []}\n                    error={errors.citizenship?.message as string}\n                    isSearchable\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"nationality\"\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"NACIONALNOST:\"\n                    options={citizenshipArray || []}\n                    isSearchable\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"national_minority\"\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"NACIONALNA MANJINA:\"\n                    options={nationalMinorities || []}\n                  />\n                );\n              }}\n            />\n          </Row>\n          <Row>\n            <Input\n              {...register('last_name', {required: 'Ovo polje je obavezno'})}\n              label=\"PREZIME:\"\n              error={errors.last_name?.message as string}\n            />\n            {country_of_birth?.title === 'Montenegro' ? (\n              <Controller\n                name=\"city_of_birth\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => {\n                  const valueToUse = typeof value === 'string' ? {id: value, title: value} : null;\n                  return (\n                    <Dropdown\n                      onChange={selectedValue => {\n                        setValue('city_of_birth', selectedValue, {shouldValidate: true}); // Manually set the value and trigger validation\n                      }}\n                      value={valueToUse || value}\n                      name={name}\n                      label=\"OPŠTINA:\"\n                      options={cityData}\n                      error={errors.city_of_birth?.message as string}\n                      isSearchable\n                    />\n                  );\n                }}\n              />\n            ) : (\n              <Input\n                {...register('city_of_birth', {required: 'Ovo polje je obavezno'})}\n                label=\"OPŠTINA:\"\n                error={errors.city_of_birth?.message as string}\n              />\n            )}\n            <Input {...register('address')} label=\"ADRESA:\" />\n          </Row>\n          <Row>\n            <Controller\n              name=\"gender\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"POL:\"\n                    options={[\n                      {id: 'Muški', title: 'Muški'},\n                      {id: 'Ženski', title: 'Ženski'},\n                    ]}\n                    error={errors.gender?.message as string}\n                  />\n                );\n              }}\n            />\n            <Input\n              {...register('father_name', {required: 'Ovo polje je obavezno'})}\n              label=\"IME OCA:\"\n              error={errors.father_name?.message as string}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"date_of_birth\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"DATUM ROĐENJA:\"\n                  name={name}\n                  selected={value ? new Date(value) : ''}\n                  error={errors.date_of_birth?.message as string}\n                />\n              )}\n            />\n            <Input\n              {...register('mother_name', {required: 'Ovo polje je obavezno'})}\n              label=\"IME MAJKE:\"\n              error={errors.mother_name?.message as string}\n            />\n          </Row>\n          <Row>\n            <Input\n              {...register('official_personal_id', {required: 'Ovo polje je obavezno'})}\n              label=\"JMBG:\"\n              error={errors.official_personal_id?.message as string}\n            />\n            <Input {...register('mother_birth_last_name')} label=\"PREZIME PO ROĐENJU:\" />\n          </Row>\n        </FormWrapper>\n      }\n      title={'DODAJTE ČLANA PORODICE'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/familyMemberModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/importEmployeeModal/importEmployeeModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/internalRevisionList/internalRevisionList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[795,798],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[795,798],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[957,960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[957,960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useState} from 'react';\nimport {Table, Pagination, Divider, Dropdown, Button} from 'client-library';\nimport {internalRevisionTableHeads} from '../../screens/internalRevision/constants';\nimport {EditIconTwo, Theme, TrashIconTwo} from '@oykos-development/devkit-react-ts-styled-components';\nimport {DeleteModal} from '../../shared/deleteModal/deleteModal';\nimport {FilterContainer, MainTitle, RevisionListContainer, TableHeader} from './styles';\nimport {DropdownDataNumber} from '../../types/dropdownData';\nimport useInternalRevisionDelete from '../../services/graphql/internalRevision/useRevisionDelete';\n\ninterface InternalRevisionListProps {\n  navigate: (path: string) => void;\n  toggleInternalRevisionModal: (id: number) => void;\n  onPageChange: (page: number) => void;\n  data: any;\n  total: number;\n  revisorOptions: DropdownDataNumber[];\n  revisorFilter: number;\n  onFilter: (revisor: number) => void;\n  refetchList: () => void;\n  alert: any;\n  loading: boolean;\n}\n\nconst InternalRevisionList: React.FC<InternalRevisionListProps> = ({\n  data,\n  onPageChange,\n  toggleInternalRevisionModal,\n  total,\n  revisorOptions,\n  revisorFilter,\n  onFilter,\n  refetchList,\n  alert,\n  loading,\n}) => {\n  const [deleteModal, setDeleteModal] = useState(0);\n\n  const {mutate} = useInternalRevisionDelete();\n\n  const handleEdit = (id: number) => {\n    toggleInternalRevisionModal(id);\n  };\n\n  const toggleDeleteModal = (id: number) => {\n    setDeleteModal(id);\n  };\n\n  const handleDelete = () => {\n    mutate(\n      deleteModal,\n      () => {\n        toggleDeleteModal(0);\n        refetchList();\n        alert.success('Uspješno obrisano.');\n      },\n      () => {\n        toggleDeleteModal(0);\n        alert.error('Greška. Brisanje nije moguće.');\n      },\n    );\n  };\n\n  return (\n    <RevisionListContainer>\n      <MainTitle variant=\"bodyMedium\" content=\"GODIŠNJI PLAN REVIZIJA\" />\n      <Divider color={Theme?.palette?.gray200} height=\"1px\" />\n      <TableHeader>\n        <FilterContainer>\n          <Dropdown\n            name=\"revisor\"\n            value={revisorOptions.find(item => item.id === revisorFilter)}\n            onChange={value => onFilter(value.id as number)}\n            label=\"REVIZOR KOJI JE DAO PREPORUKU\"\n            options={[{id: 0, title: 'Svi revizori'}, ...revisorOptions]}\n            placeholder=\"Izaberite revizora\"\n          />\n        </FilterContainer>\n        <Button content=\"Dodaj registar preporuka\" variant=\"secondary\" onClick={() => toggleInternalRevisionModal(0)} />\n      </TableHeader>\n      <Table\n        tableHeads={internalRevisionTableHeads}\n        data={data}\n        style={{marginBottom: 22}}\n        onRowClick={item => handleEdit(item.id)}\n        isLoading={loading}\n        tableActions={[\n          {name: 'edit', onClick: item => handleEdit(item.id), icon: <EditIconTwo stroke={Theme?.palette?.gray800} />},\n          {\n            name: 'delete',\n            onClick: item => toggleDeleteModal(item.id),\n            icon: <TrashIconTwo stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={Math.ceil(total / 10)}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={2}\n        previousLabel=\"Previous\"\n        nextLabel=\"Next\"\n        pageRangeDisplayed={3}\n      />\n      <DeleteModal open={!!deleteModal} onClose={() => toggleDeleteModal(0)} handleDelete={handleDelete} />\n    </RevisionListContainer>\n  );\n};\n\nexport default InternalRevisionList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/internalRevisionList/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/internalRevisionModal/internalRevisionModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1457,1460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1457,1460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":179,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":179,"endColumn":17,"fix":{"range":[6220,6236],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":180,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":180,"endColumn":17,"fix":{"range":[6281,6297],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":181,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":181,"endColumn":15,"fix":{"range":[6348,6362],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":186,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":186,"endColumn":17,"fix":{"range":[6508,6524],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":187,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":187,"endColumn":17,"fix":{"range":[6569,6585],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":188,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":188,"endColumn":15,"fix":{"range":[6636,6650],"text":"            "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":297,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10801,10804],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10801,10804],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":315,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11503,11506],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11503,11506],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":344,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12584,12587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12584,12587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":346,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":346,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12687,12690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12687,12690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":361,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":361,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13293,13296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13293,13296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":363,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13384,13387],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13384,13387],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":381,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":381,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14081,14084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14081,14084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":400,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":400,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14868,14871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14868,14871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":402,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":402,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14966,14969],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14966,14969],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":437,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":437,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16413,16416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16413,16416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":504,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":504,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19225,19228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19225,19228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":582,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":582,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22264,22267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22264,22267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":609,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":609,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23332,23335],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23332,23335],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":627,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":627,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24102,24105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24102,24105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import {FileUploadVariants} from '@oykos-development/devkit-react-ts-styled-components';\nimport {Datepicker, Dropdown, FileUpload, Input} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {quarterOptions, revisionDeadlineOptions, revisionPriorityOptions, revisionStatusOptions} from '../../constants';\nimport {InternalRevisionFormValues, InternalRevisionInsertParams} from '../../screens/internalRevision/types';\nimport useRevisionDetails from '../../services/graphql/internalRevision/useRevision';\nimport useRevisionInsert from '../../services/graphql/internalRevision/useRevisionInsert';\nimport useOrganizationUnits from '../../services/graphql/organizationUnits/useOrganizationUnits';\nimport useSettingsDropdownOverview from '../../services/graphql/settingsDropdown/useSettingsDropdownOverview';\nimport useSuppliersOverview from '../../services/graphql/suppliers/useGetSuppliersOverview';\nimport {DropdownDataNumber, DropdownDataString} from '../../types/dropdownData';\nimport {yearsForDropdown} from '../../utils/constants';\nimport {parseBackToDate, parseDate} from '../../utils/dateUtils';\nimport {FormGroup, ModalForm, ModalSection, ModalSectionTitle, RevisionModal, Row} from './styles';\n\ninterface InternalRevisionModalProps {\n  open: boolean;\n  onClose: () => void;\n  id: number;\n  refetchList: () => void;\n  revisorOptions: DropdownDataNumber[];\n  alert: any;\n}\n\nconst secondFormSectionFields = [\n  'serial_number',\n  'priority',\n  'date_of_revision',\n  'responsible_user_profile',\n  'date_of_acceptance',\n  'date_of_rejection',\n  'implementation_month_span',\n  'date_of_implementation',\n  'implementation_suggestion',\n];\n\nconst initialValues: InternalRevisionFormValues = {\n  revision_type: null,\n  revision_type_id: 0,\n  revisor_user_profile: null,\n  revisor_user_profile_id: 0,\n  internal_organization_unit_id: null,\n  external_organization_unit_id: null,\n  responsible_user_profile: '',\n  implementation_user_profile: null,\n  implementation_user_profile_id: null,\n  title: '',\n  planned_year: null,\n  planned_quarter: null,\n  serial_number: '',\n  priority: null,\n  date_of_revision: '',\n  date_of_acceptance: '',\n  date_of_rejection: '',\n  implementation_suggestion: '',\n  implementation_month_span: null,\n  date_of_implementation: '',\n  state_of_implementation: null,\n  implementation_failed_description: '',\n  second_implementation_month_span: null,\n  second_date_of_revision: '',\n  file_id: 0,\n  ref_document: '',\n};\n\nconst InternalRevisionModal: React.FC<InternalRevisionModalProps> = ({\n  open,\n  onClose,\n  id,\n  refetchList,\n  revisorOptions,\n  alert,\n}) => {\n  const {data} = useRevisionDetails(id);\n  const {mutate, loading: isSaving} = useRevisionInsert();\n  const {organizationUnits} = useOrganizationUnits();\n  const {suppliers} = useSuppliersOverview();\n\n  const {data: revisionTypes} = useSettingsDropdownOverview({entity: 'revision_types'});\n\n  const revisionList = useMemo(\n    () =>\n      revisionTypes &&\n      revisionTypes?.map(unit => {\n        return {\n          id: unit.id,\n          title: unit.title,\n        };\n      }),\n    [revisionTypes],\n  );\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors, dirtyFields},\n    control,\n    setValue,\n    reset,\n    watch,\n  } = useForm({\n    defaultValues: initialValues,\n  });\n\n  const onSubmit = (values: InternalRevisionFormValues) => {\n    if (isSaving) return;\n\n    const data: InternalRevisionInsertParams = {\n      implementation_user_profile_id: values?.implementation_user_profile?.id || null,\n      revision_type_id: values?.revision_type?.id,\n      responsible_user_profile: values?.responsible_user_profile || '',\n      revisor_user_profile_id: values.revisor_user_profile?.id || null,\n      internal_organization_unit_id: values.internal_organization_unit_id?.id || null,\n      external_organization_unit_id: values.external_organization_unit_id?.id || null,\n      planned_year: values.planned_year?.id || '',\n      planned_quarter: values.planned_quarter?.id || '',\n      state_of_implementation: values.state_of_implementation?.id || '',\n      priority: values?.priority?.id,\n      date_of_revision: values?.date_of_revision ? values?.date_of_revision : undefined,\n      date_of_acceptance: values?.date_of_acceptance ? values?.date_of_acceptance : undefined,\n      date_of_rejection: values?.date_of_rejection ? values?.date_of_rejection : undefined,\n      date_of_implementation: values?.date_of_implementation ? values?.date_of_implementation : undefined,\n      implementation_month_span: values?.implementation_month_span?.id || '',\n      second_date_of_revision: values?.second_date_of_revision ? values?.second_date_of_revision : undefined,\n      second_implementation_month_span: values?.second_implementation_month_span?.id || '',\n      id: id,\n      title: values?.title,\n      serial_number: values?.serial_number,\n      implementation_suggestion: values?.implementation_suggestion,\n      implementation_failed_description: values?.implementation_failed_description,\n      ref_document: values?.ref_document,\n    };\n\n    mutate(\n      data,\n      () => {\n        refetchList();\n        onClose();\n        alert.success(id ? 'Revizija uspješno sačuvana.' : 'Revizija je uspešno dodata.');\n        reset(initialValues);\n      },\n      () => {\n        alert.error(\n          id ? 'Došlo je do greške prilikom izmjena revizije.' : 'Došlo je do greške prilikom dodavanja revizije.',\n        );\n      },\n    );\n  };\n\n  const shouldValidateSecondSection = () => {\n    let shouldValidate = false;\n\n    for (const field of secondFormSectionFields) {\n      if (Object.keys(dirtyFields).includes(field)) {\n        shouldValidate = true;\n        break;\n      }\n    }\n\n    return shouldValidate;\n  };\n\n  const onUpload = () => {\n    console.log('upload');\n  };\n\n  useEffect(() => {\n    if (data && data.item && id && data.status === 'success') {\n      reset({\n        ...data.item,\n        planned_year: {\n          id: data.item.planned_year,\n          title: data.item.planned_year,\n        },\n        internal_organization_unit_id:\n          data.item.revision_organization_unit?.value === 'internal'\n            ? {\n                id: data.item.revision_organization_unit.id,\n                title: data.item.revision_organization_unit.title,\n              }\n            : null,\n        external_organization_unit_id:\n          data.item.revision_organization_unit?.value === 'external'\n            ? {\n                id: data.item.revision_organization_unit.id,\n                title: data.item.revision_organization_unit.title,\n              }\n            : null,\n        planned_quarter: {id: data.item.planned_quarter, title: data.item.planned_quarter},\n        priority: revisionPriorityOptions.find(option => option.id === data.item.priority),\n        responsible_user_profile: data.item.responsible_user_profile?.title,\n        implementation_month_span: revisionDeadlineOptions.find(\n          option => option.id == data.item.implementation_month_span,\n        ),\n        state_of_implementation: revisionStatusOptions.find(option => option.id === data.item.state_of_implementation),\n        second_implementation_month_span: revisionDeadlineOptions.find(\n          option => option.id == data.item.second_implementation_month_span,\n        ),\n      });\n    }\n  }, [data]);\n\n  const [dateOfImplementation, setDateOfImplementation] = useState<string | undefined>(undefined);\n  const [newDateOfImplementation, setNewDateOfImplementation] = useState<string>('');\n\n  const dateOfRevision = watch('date_of_revision');\n  const implementationMonthSpan = watch('implementation_month_span');\n  const secondMonthSpan = watch('second_implementation_month_span');\n\n  const calculateDateOfImplementation = (revisionDate: string, monthSpan: DropdownDataString | null) => {\n    const parsedDateOfRevision = new Date(revisionDate);\n    const monthsToAdd = Number(monthSpan?.id);\n    parsedDateOfRevision.setMonth(parsedDateOfRevision.getMonth() + monthsToAdd);\n\n    return parseDate(parsedDateOfRevision);\n  };\n\n  const calculateSecondDateOfImplementation = (revisionDate: string, monthSpan: DropdownDataString | null) => {\n    const parsedDateOfRevision = parseBackToDate(revisionDate);\n    const monthsToAdd = Number(monthSpan?.id);\n    parsedDateOfRevision.setMonth(parsedDateOfRevision.getMonth() + monthsToAdd);\n\n    return parseDate(parsedDateOfRevision);\n  };\n\n  useEffect(() => {\n    if (dateOfRevision && implementationMonthSpan) {\n      const formattedDate = calculateDateOfImplementation(dateOfRevision, implementationMonthSpan);\n      setDateOfImplementation(formattedDate);\n    }\n  }, [dateOfRevision, implementationMonthSpan]);\n\n  useEffect(() => {\n    if (dateOfImplementation && secondMonthSpan) {\n      const formattedDate = calculateSecondDateOfImplementation(dateOfImplementation, secondMonthSpan);\n      setNewDateOfImplementation(formattedDate);\n\n      setValue('second_date_of_revision', formattedDate);\n    }\n  }, [dateOfImplementation, secondMonthSpan, setValue]);\n\n  const yearOptions = useMemo(\n    () => yearsForDropdown().map(year => ({id: year.id.toString(), title: year.title.toString()})),\n    [],\n  );\n\n  const implemented = watch('state_of_implementation')?.id === 'Sprovedena';\n  const internalSubject = watch('internal_organization_unit_id');\n  const externalSubject = watch('external_organization_unit_id');\n\n  const organizationUnitsList = useMemo(() => {\n    return organizationUnits\n      .filter(i => !i.parent_id)\n      .map(unit => {\n        return {id: unit.id, title: unit.title};\n      });\n  }, [organizationUnits]);\n\n  useEffect(() => {\n    if (internalSubject) {\n      setValue('external_organization_unit_id', null);\n    }\n  }, [internalSubject, setValue]);\n\n  useEffect(() => {\n    if (externalSubject) {\n      setValue('internal_organization_unit_id', null);\n    }\n  }, [externalSubject, setValue]);\n\n  return (\n    <RevisionModal\n      onClose={() => {\n        reset(initialValues);\n        onClose();\n      }}\n      open={open}\n      title={id ? 'IZMJENA REVIZIJE' : 'DODAVANJE REVIZIJE'}\n      width={805}\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <ModalForm>\n          {/* ***** PLAN REVIZIJE ****** */}\n          <ModalSection>\n            <ModalSectionTitle content=\"PLAN REVIZIJE:\" variant=\"bodyMedium\" />\n            <Row>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"planned_year\"\n                  rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={yearOptions}\n                      error={errors.planned_year?.message as string}\n                      placeholder=\"Izaberite godinu\"\n                      label=\"GODINA:\"\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"planned_quarter\"\n                  rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={quarterOptions}\n                      error={errors.planned_quarter?.message as string}\n                      placeholder=\"Izaberite kvartal\"\n                      label=\"KVARTAL ZA SPROVOĐENJE REVIZIJE:\"\n                    />\n                  )}\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Input\n                  {...register('title', {required: 'Ovo polje je obavezno'})}\n                  label=\"NAZIV REVIZIJE:\"\n                  placeholder=\"Izaberite naziv\"\n                  error={errors.title?.message as string}\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"internal_organization_unit_id\"\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={organizationUnitsList as any}\n                      error={errors.internal_organization_unit_id?.message as string}\n                      placeholder=\"Izaberite subjekt\"\n                      label=\"SUBJEKT REVIZIJE (interna):\"\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"external_organization_unit_id\"\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={suppliers as any}\n                      error={errors.external_organization_unit_id?.message as string}\n                      placeholder=\"Izaberite subjekt\"\n                      label=\"SUBJEKT REVIZIJE (eksterna):\"\n                    />\n                  )}\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"revisor_user_profile\"\n                  rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={revisorOptions}\n                      error={errors.revisor_user_profile?.message as string}\n                      placeholder=\"Izaberite revizore\"\n                      label=\"REVIZOR KOJI JE DAO PREPORUKU:\"\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                {revisionList && (\n                  <Controller\n                    control={control}\n                    name=\"revision_type\"\n                    rules={{required: 'Ovo polje je obavezno'}}\n                    render={({field: {name, value, onChange}}) => (\n                      <Dropdown\n                        name={name}\n                        value={value as any}\n                        onChange={onChange}\n                        options={revisionList as any}\n                        error={errors.revision_type?.message as string}\n                        placeholder=\"Izaberite vrstu revizije\"\n                        label=\"VRSTA REVIZIJE:\"\n                      />\n                    )}\n                  />\n                )}\n              </FormGroup>\n            </Row>\n            <FileUpload variant={FileUploadVariants.tertiary} onUpload={onUpload} />\n          </ModalSection>\n\n          {/* ***** PREPORUKE REVIZIJE ****** */}\n          <ModalSection>\n            <ModalSectionTitle content=\"PREPORUKE REVIZIJE:\" variant=\"bodyMedium\" />\n            <Row>\n              <FormGroup>\n                <Input\n                  {...register('serial_number', {\n                    required: {value: shouldValidateSecondSection(), message: 'Ovo polje je obavezno'},\n                  })}\n                  label=\"BROJ REVIZIJE:\"\n                  placeholder=\"Unesite broj revizije\"\n                  error={errors.serial_number?.message as string}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"priority\"\n                  rules={{required: {value: shouldValidateSecondSection(), message: 'Ovo polje je obavezno'}}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={revisionPriorityOptions}\n                      error={errors.priority?.message as string}\n                      placeholder=\"Izaberite prioritet revizije\"\n                      label=\"PRIORITET REVIZIJE:\"\n                    />\n                  )}\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Controller\n                  name=\"date_of_revision\"\n                  control={control}\n                  rules={{required: {value: shouldValidateSecondSection(), message: 'Ovo polje je obavezno'}}}\n                  render={({field: {onChange, name, value}}) => (\n                    <Datepicker\n                      onChange={onChange}\n                      label=\"DATUM REVIZIJE:\"\n                      name={name}\n                      selected={value ? new Date(value) : ''}\n                      error={errors.date_of_revision?.message as string}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  {...register('responsible_user_profile', {\n                    required: {\n                      value: shouldValidateSecondSection(),\n                      message: 'Ovo polje je obavezno',\n                    },\n                  })}\n                  error={errors.responsible_user_profile?.message as string}\n                  placeholder=\"Unesite odgovorno lice\"\n                  label=\"ODGOVORNO LICE ZA PROVOĐENJE PREPORUKE:\"\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Controller\n                  name=\"date_of_acceptance\"\n                  control={control}\n                  rules={{required: {value: shouldValidateSecondSection(), message: 'Ovo polje je obavezno'}}}\n                  render={({field: {onChange, name, value}}) => (\n                    <Datepicker\n                      onChange={onChange}\n                      label=\"DATUM PRIHVATANJA AKCIONOG PLANA:\"\n                      name={name}\n                      selected={value ? new Date(value) : ''}\n                      error={errors.date_of_acceptance?.message as string}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"implementation_month_span\"\n                  rules={{required: {value: shouldValidateSecondSection(), message: 'Ovo polje je obavezno'}}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={revisionDeadlineOptions}\n                      error={errors.implementation_month_span?.message as string}\n                      placeholder=\"Izaberite rok\"\n                      label=\"ROK SPROVOĐENJA PREPORUKE:\"\n                    />\n                  )}\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Controller\n                  name=\"date_of_rejection\"\n                  control={control}\n                  render={({field: {onChange, name, value}}) => (\n                    <Datepicker\n                      onChange={onChange}\n                      label=\"DATUM NEPRIHVATANJA PREPORUKE:\"\n                      name={name}\n                      selected={value ? new Date(value) : ''}\n                      error={errors.date_of_rejection?.message as string}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  {...register('date_of_implementation')}\n                  label=\"DATUM SPROVOĐENJA PREPORUKE:\"\n                  value={dateOfImplementation}\n                  disabled\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Input\n                  {...register('implementation_suggestion', {\n                    required: {value: shouldValidateSecondSection(), message: 'Ovo polje je obavezno'},\n                  })}\n                  label=\"PREPORUKA:\"\n                  placeholder=\"Unesite preporuku\"\n                  error={errors.implementation_suggestion?.message as string}\n                />\n              </FormGroup>\n            </Row>\n            {/* <Controller\n              name=\"state_of_implementation\"\n              control={control}\n              render={({field: {name, value}}) => {\n                return (\n                  <CheckboxContainer>\n                    <Checkbox\n                      onChange={() => setValue('state_of_implementation', !value)}\n                      name={name}\n                      checked={value}\n                    />\n                    <CheckboxLabel content=\"Neograničeno Trajanje\" variant=\"bodySmall\" />\n                  </CheckboxContainer>\n                );\n              }}\n            /> */}\n          </ModalSection>\n\n          {/* ***** SPROVODJENJE REVIZIJE ****** */}\n          <ModalSection>\n            <ModalSectionTitle content=\"SPROVOĐENJE REVIZIJE:\" variant=\"bodyMedium\" />\n            <Row>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"state_of_implementation\"\n                  // rules={{required: {value: shouldValidateThirdSection, message: 'Ovo polje je obavezno'}}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={revisionStatusOptions}\n                      error={errors.state_of_implementation?.message as string}\n                      placeholder=\"Izaberite status\"\n                      label=\"STATUS SPROVOĐENJA:\"\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  {...register('ref_document')}\n                  label=\"REF. DOKUMENTA ZA PRAĆENJE SPROVOĐENJE PREPORUKA:\"\n                  placeholder=\"Unesite dokumenta za praćenje\"\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"implementation_user_profile\"\n                  // rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={revisorOptions}\n                      // error={errors.implementation_user_profile?.message as string}\n                      placeholder=\"Izaberite opciju\"\n                      label=\"IMPLEMENTACIJU PREPORUKE POTVRDIO:\"\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"second_implementation_month_span\"\n                  // rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={revisionDeadlineOptions}\n                      error={errors.second_implementation_month_span?.message as string}\n                      placeholder=\"Izaberite novi rok\"\n                      label=\"NOVI ROK SPROVOĐENJA PREPORUKE:\"\n                      isDisabled={implemented}\n                    />\n                  )}\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Input\n                  {...register('implementation_failed_description')}\n                  label=\"RAZLOZI NESPROVOĐENJA:\"\n                  placeholder=\"Unesite razloge\"\n                  error={errors.implementation_failed_description?.message as string}\n                  disabled={implemented}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  {...register('second_date_of_revision')}\n                  label=\"NOVI DATUM SPROVOĐENJA PREPORUKE:\"\n                  disabled\n                  value={newDateOfImplementation}\n                />\n              </FormGroup>\n            </Row>\n          </ModalSection>\n        </ModalForm>\n      }\n    />\n  );\n};\n\nexport default InternalRevisionModal;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/internalRevisionModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobPositionTable/jobPositionTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1583,1586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1583,1586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1684,1687],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1684,1687],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1908,1911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1908,1911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2372,2375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2372,2375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3152,3155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3152,3155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3216,3219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3216,3219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4117,4120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4117,4120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4826,4829],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4826,4829],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5288,5291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5288,5291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":155,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5510,5513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5510,5513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5773,5776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5773,5776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6146,6149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6146,6149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'jobPositionResponse' is defined but never used.","line":174,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":174,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6564,6567],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6564,6567],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7392,7395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7392,7395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":231,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7929,7932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7929,7932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7997,8000],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7997,8000],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":261,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9161,9164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9161,9164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":286,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9969,9972],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9969,9972],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":292,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":292,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10203,10206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10203,10206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":200,"column":15,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":200,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":245,"column":19,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":245,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  CheckIcon,\n  Dropdown,\n  EditIconTwo,\n  Input,\n  MinusCircleIcon,\n  PlusCircleIcon,\n  TableHead,\n  Theme,\n  TrashIcon,\n  XIcon,\n} from 'client-library';\nimport React, {useEffect, useState} from 'react';\nimport useEmployeeInOrganizationUnitDelete from '../../services/graphql/organizationUnitsEmployees/useOrganizationUnitEmployeeDelete';\nimport useOrganizationUnitEmployeeInsert from '../../services/graphql/organizationUnitsEmployees/useOrganizationUnitEmployeeInsert';\nimport useOrganizationUnitDeleteJobPosition from '../../services/graphql/organizationUnitsJobPositions/useOrganizationUnitDeleteJobPosition';\nimport useOrganizationUnitInsertJobPosition from '../../services/graphql/organizationUnitsJobPositions/useOrganizationUnitInsertJobPosition';\nimport {DeleteModal} from '../../shared/deleteModal/deleteModal';\nimport {DropdownDataNumber} from '../../types/dropdownData';\nimport {EmployeeDropdownWrapper, StyledTable} from './styles';\nimport {JobPositionTableProps} from './types';\n\nexport const JobPositionTable: React.FC<JobPositionTableProps> = ({\n  data,\n  sectorID,\n  systematizationID,\n  refetch,\n  alert,\n  jobPositionData,\n  allEmployees,\n  activeEmployees,\n  cancel,\n  isActive,\n}) => {\n  const {mutate: insertJobPosition} = useOrganizationUnitInsertJobPosition();\n  const {mutate: deleteJobPosition} = useOrganizationUnitDeleteJobPosition();\n\n  const {mutate: insertEmployee} = useOrganizationUnitEmployeeInsert();\n  const {mutate: deleteEmployee} = useEmployeeInOrganizationUnitDelete();\n\n  const jobPositionsForDropdown = jobPositionData?.map((item: any) => ({id: item.id, title: item.title}));\n  const employeesForDropdown = allEmployees?.map((item: any) => ({\n    id: item.id,\n    title: `${item.first_name} ${item.last_name}`,\n  }));\n\n  const [selectedEmployee, setSelectedEmployee] = useState<DropdownDataNumber>();\n  const [tableDataState, setTableDataState] = useState<any[]>([]);\n  const [editTableRow, setEditTableRow] = useState<null | number>(null);\n  const [deleteItemId, setDeleteItemId] = useState<null | number>(null);\n  const selectRow = (id: number) => {\n    setSelectedEmployee(undefined);\n    setEditTableRow(id);\n  };\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const deleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setDeleteItemId(id);\n  };\n\n  const handleChange = (value: any, name: string) => {\n    if (name === 'employees') {\n      const index = activeEmployees.findIndex(item => item.id === value.id);\n      const position = tableDataState?.find(item => item.id === editTableRow);\n      const is_judge_president = jobPositionData.find(\n        item => item.id === position?.job_position?.id,\n      )?.is_judge_president;\n\n      if (index > -1 && !is_judge_president) {\n        alert.error(\n          `Zaposleni ${activeEmployees[index].full_name} već pokriva radno mjesto ${activeEmployees[index]?.job_position?.title} u odjeljenju ${activeEmployees[index]?.sector}!`,\n        );\n        setSelectedEmployee(undefined);\n      } else {\n        setSelectedEmployee(value);\n      }\n    } else {\n      const updatedTableData = tableDataState.map((item: any) => {\n        const jobPosition = jobPositionData?.find((i: any) => i.id === value?.id);\n        if (item.id !== editTableRow) return item;\n        if (name === 'available_slots') {\n          return {\n            ...item,\n            [name]: {...item[name], value: value},\n          };\n        } else {\n          return {\n            ...item,\n            description: jobPosition?.description,\n            requirements: jobPosition?.requirements,\n            is_judge_president: jobPosition?.is_judge_president,\n            available_slots: jobPosition?.is_judge_president ? {value: 1} : item.available_slots,\n            job_position: {id: jobPosition?.id, title: jobPosition?.title},\n          };\n        }\n      });\n      setTableDataState(updatedTableData);\n    }\n  };\n\n  const handleEditEmployees = (id?: number) => {\n    //if id is passed, we are deleting employee from table otherwise we are adding\n    const updatedTableData = tableDataState.map((item: any) => {\n      if (item.id !== editTableRow) return item;\n      if (item.id === editTableRow) {\n        if (editTableRow !== 0) {\n          if (id) {\n            deleteEmployee(id, () => {\n              refetch && refetch();\n            });\n          } else {\n            insertEmployee(\n              {\n                id: 0,\n                user_profile_id: selectedEmployee?.id || 0,\n                position_in_organization_unit_id: item?.id,\n                active: true,\n              },\n              () => {\n                refetch && refetch();\n              },\n            );\n          }\n        }\n        return {\n          ...item,\n          employees: id\n            ? item.employees.filter((i: any) => i.id !== id)\n            : [...item.employees, {...selectedEmployee, row_id: editTableRow}],\n        };\n      }\n    });\n    setTableDataState(updatedTableData);\n    setSelectedEmployee(undefined);\n  };\n\n  const handleDelete = () => {\n    deleteJobPosition(\n      Number(deleteItemId),\n      () => {\n        refetch && refetch(true);\n        setShowDeleteModal(false);\n        setDeleteItemId(null);\n        setTableDataState(tableDataState.filter((item: any) => item.id !== deleteItemId));\n\n        alert.success('Uspješno obrisano.');\n      },\n      () => {\n        alert.error('Greška. Brisanje nije moguće.');\n      },\n    );\n  };\n\n  const getEmployeesForDropdown = (item: any): DropdownDataNumber[] => {\n    const itemIds = item.map((elem: DropdownDataNumber) => elem?.id);\n    return employeesForDropdown.filter(emp => !itemIds.includes(emp.id));\n  };\n\n  const handleSave = () => {\n    const selectedItem = tableDataState.find((item: any) => item.id === editTableRow);\n\n    const payload = {\n      id: selectedItem.id ? selectedItem.id : 0,\n      systematization_id: systematizationID,\n      parent_organization_unit_id: sectorID,\n      job_position_id: selectedItem?.job_position?.id,\n      available_slots: Number(selectedItem?.available_slots.value),\n      employees: selectedItem?.employees?.map((item: any) => item.id),\n    };\n\n    insertJobPosition(\n      payload,\n      jobPositionResponse => {\n        refetch && refetch(true);\n      },\n      () => {\n        alert.error('Greška. Promjene nisu sačuvane.');\n      },\n    );\n    setEditTableRow(null);\n  };\n\n  const tableHeads: TableHead[] = [\n    {\n      title: 'Naziv radnog mjesta',\n      accessor: 'job_position',\n      type: 'custom',\n      renderContents: (item: any, row) => {\n        const isDisabled = row?.id !== editTableRow || Number(row.id) > 0;\n        return (\n          <div key={`item-job-position-${item.id}`}>\n            <Dropdown\n              value={item}\n              name=\"job_position\"\n              onChange={handleChange}\n              options={jobPositionsForDropdown}\n              // @TODO remove ts-ignore\n              //eslint-disable-next-line @typescript-eslint/ban-ts-comment\n              //@ts-ignore\n              maxMenuHeight={200}\n              style={{width: '235px'}}\n              isDisabled={isDisabled}\n            />\n          </div>\n        );\n      },\n    },\n    {title: 'Uvjeti', accessor: 'requirements', type: 'text'},\n    {\n      title: 'Broj izvršilaca',\n      accessor: 'available_slots',\n      type: 'custom',\n      renderContents: (item: any, row) => {\n        return (\n          <Input\n            value={item.value}\n            name=\"available_slots\"\n            style={{width: 100}}\n            disabled={item?.row_id !== editTableRow || isActive || row.is_judge_president}\n            onChange={ev => handleChange(ev.target.value, 'available_slots')}\n          />\n        );\n      },\n    },\n    {title: 'Opis poslova', accessor: 'description', type: 'text'},\n    {\n      title: 'Zaposleni',\n      accessor: 'employees',\n      type: 'custom',\n      renderContents: (item: any, row) => {\n        const selectedItem = tableDataState.find((i: any) => i.id === editTableRow);\n\n        return (\n          <div>\n            {row?.id === editTableRow && item.length < selectedItem?.available_slots?.value && (\n              <EmployeeDropdownWrapper>\n                <Dropdown\n                  value={selectedEmployee}\n                  name=\"employees\"\n                  options={getEmployeesForDropdown(item)}\n                  onChange={handleChange}\n                  // @TODO remove ts-ignore\n                  //eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                  //@ts-ignore\n                  maxMenuHeight={200}\n                  style={{width: '235px'}}\n                  isSearchable\n                />\n                {selectedEmployee && item.length < selectedItem?.available_slots?.value && (\n                  <PlusCircleIcon\n                    stroke={Theme?.palette?.gray500}\n                    height=\"17px\"\n                    width=\"17px\"\n                    onClick={() => handleEditEmployees()}\n                  />\n                )}\n              </EmployeeDropdownWrapper>\n            )}\n            {Array.isArray(item) &&\n              item?.map((employee: any) => {\n                return (\n                  <div key={`employee-${employee?.id}`}>\n                    <Input\n                      value={employee.title}\n                      rightContent={\n                        <MinusCircleIcon\n                          stroke={Theme?.palette?.gray500}\n                          onClick={() => handleEditEmployees(employee?.id)}\n                        />\n                      }\n                      style={{width: '235px'}}\n                      disabled={employee?.row_id !== editTableRow}\n                    />\n                  </div>\n                );\n              })}\n          </div>\n        );\n      },\n    },\n    {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n  ];\n\n  useEffect(() => {\n    const transformedData = data?.map((item: any) => {\n      if (item.id === 0) setEditTableRow(0);\n      return {\n        ...item,\n        serial_number: item?.serial_number || 0,\n        job_position: {...item.job_positions},\n        employees: item?.employees?.map((employee: any) => ({\n          ...employee,\n          row_id: item?.id,\n        })),\n        available_slots: {value: item?.available_slots, row_id: item?.id},\n      };\n    });\n\n    setTableDataState(transformedData);\n  }, [data, jobPositionData]);\n\n  return (\n    <>\n      <StyledTable\n        tableHeads={tableHeads}\n        data={tableDataState}\n        tableActions={[\n          {\n            name: 'edit',\n            onClick: item => selectRow(item.id),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            shouldRender: item => editTableRow !== item.id,\n          },\n          {name: 'save', onClick: handleSave, icon: <CheckIcon />, shouldRender: item => editTableRow === item.id},\n          {\n            name: 'delete',\n            onClick: item => deleteIconClick(item.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: item => editTableRow !== item.id && !isActive,\n          },\n          {\n            name: 'cancel',\n            onClick: () => {\n              if (cancel) cancel();\n              setEditTableRow(null);\n            },\n            icon: <XIcon />,\n            shouldRender: item => editTableRow === item.id,\n          },\n        ]}\n      />\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobPositionTable/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobPositionTable/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[432,435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[432,435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {JobPosition, SystematizationJobPositions} from '../../types/graphql/jobPositions';\nimport {ActiveEmployees} from '../../types/graphql/systematizationsGetDetailsTypes';\nimport {UserProfile} from '../../types/graphql/userProfiles';\n\nexport interface JobPositionTableProps {\n  data: SystematizationJobPositions[];\n  sectorID: number;\n  systematizationID: number;\n  refetch?: (availableSlotsChanged?: boolean) => void;\n  alert: any;\n  jobPositionData: JobPosition[];\n  allEmployees: UserProfile[];\n  activeEmployees: ActiveEmployees[];\n  cancel?: () => void;\n  isActive: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderApplicationsList/jobTenderApplicationsList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[944,947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[944,947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2996,2999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2996,2999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3334,3337],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3334,3337],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3681,3684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3681,3684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {EditIconTwo, Pagination, Table, Theme, Typography, PlusIcon, TrashIcon} from 'client-library';\nimport React, {useMemo, useState} from 'react';\nimport {DeleteModal} from '../../shared/deleteModal/deleteModal';\nimport {PlusButton, TableHeader} from './styles';\nimport {applicationsTableHeads} from '../../screens/jobTenders/constants';\nimport {JobTenderApplication} from '../../types/graphql/jobTenders';\nimport useJobTenderApplications from '../../services/graphql/jobTenders/useJobTenderApplicationOverview';\nimport useJobTendersDeleteApplication from '../../services/graphql/jobTenders/useJobTenderApplicationDelete';\nimport {ScreenProps} from '../../types/screen-props';\nimport {JobTenderApplicationModal} from '../JobTenderApplicationModal/JobTenderApplicationModal';\nimport {MicroserviceProps} from '../../types/micro-service-props';\n\nexport interface JobTenderDetailsListProps extends ScreenProps {\n  jobTenderId: number;\n  alert: any;\n  context: MicroserviceProps;\n}\n\nconst JobTenderApplicationsList: React.FC<JobTenderDetailsListProps> = ({jobTenderId, alert, context, ...props}) => {\n  const [showModal, setShowModal] = useState(false);\n  const [editItemId, setEditItemId] = useState(0);\n  const [page, setPage] = useState(1);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [deleteItemID, setDeleteItemID] = useState(0);\n  const {\n    data: applications,\n    refreshData,\n    loading,\n  } = useJobTenderApplications({page, size: 10, job_tender_id: jobTenderId});\n\n  const {mutate: deleteJobTenderApplication} = useJobTendersDeleteApplication();\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const handleCloseDeleteModal = () => {\n    setDeleteItemID(0);\n    setShowDeleteModal(false);\n  };\n\n  const handleDelete = () => {\n    deleteJobTenderApplication(\n      deleteItemID,\n      () => {\n        refreshData();\n        context.alert.success('Uspješno obrisano.');\n      },\n      () => {\n        context.alert.error('Greška. Brisanje nije moguće');\n      },\n    );\n\n    setDeleteItemID(0);\n    setShowDeleteModal(false);\n  };\n\n  const handleEdit = (id: number) => {\n    setEditItemId(id ?? 0);\n    setShowModal(true);\n  };\n\n  const toggleApplicationModal = (id?: number) => {\n    setShowModal(prev => !prev);\n\n    handleEdit(id || 0);\n  };\n\n  const editItem = useMemo(\n    () => applications?.items?.find((item: JobTenderApplication) => item.id === editItemId),\n    [applications, editItemId],\n  );\n\n  return (\n    <>\n      <TableHeader>\n        <Typography variant=\"bodyMedium\" content=\"Kandidati za ovaj oglas\" />\n        <PlusButton onClick={() => toggleApplicationModal()}>\n          <PlusIcon width=\"12px\" height=\"12px\" stroke={Theme.palette.primary500} />\n        </PlusButton>\n      </TableHeader>\n      <Table\n        tableHeads={applicationsTableHeads}\n        data={applications.items}\n        style={{marginBottom: 22}}\n        isLoading={loading}\n        onRowClick={() =>\n          applications.items.find((item: any) => item.status === 'Na čekanju' && toggleApplicationModal(item.id))\n        }\n        tableActions={[\n          {\n            name: 'edit',\n            onClick: item => toggleApplicationModal(item.id),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            shouldRender: () => applications.items.find((item: any) => item.status === 'Na čekanju'),\n          },\n          {\n            name: 'delete',\n            onClick: item => {\n              setShowDeleteModal(true);\n              setDeleteItemID(item.id);\n            },\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: () => applications.items.find((item: any) => item.status === 'Na čekanju'),\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={applications.total / 10}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={2}\n        previousLabel=\"Previous\"\n        nextLabel=\"Next\"\n        pageRangeDisplayed={3}\n      />\n      <DeleteModal\n        open={showDeleteModal}\n        onClose={() => {\n          handleCloseDeleteModal();\n        }}\n        handleDelete={handleDelete}\n      />\n      {showModal && (\n        <JobTenderApplicationModal\n          context={context}\n          countries={context?.countries || []}\n          selectedItem={editItem}\n          open={showModal}\n          onClose={() => setShowModal(false)}\n          jobTenderId={jobTenderId}\n          alert={alert}\n          refetchList={refreshData}\n          {...props}\n        />\n      )}\n    </>\n  );\n};\nexport default JobTenderApplicationsList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderApplicationsList/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderInfo/jobTenderInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderInfo/styles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Theme' is defined but never used.","line":2,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import styled from 'styled-components';\nimport {Typography, Theme} from 'client-library';\n\nexport const Container = styled.div``;\nexport const InfoPreview = styled.div`\n  display: flex;\n`;\n\nexport const Details = styled.div`\n  display: flex;\n  gap: 20px;\n  margin-block: 22px;\n`;\n\nexport const Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const StyledLabel = styled(Typography)`\n  text-transform: uppercase;\n  font-weight: bold;\n  margin-right: 1rem;\n`;\n\nexport const StyledValue = styled(Typography)``;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 22px;\n`;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderModal/jobTenderModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":2,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2209,2212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2209,2212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3589,3592],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3589,3592],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4089,4092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4089,4092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Datepicker, Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport useJobTenderInsert from '../../services/graphql/jobTenders/useJobTenderInsert';\nimport {JobTendersModalProps} from '../../types/graphql/jobTenders';\nimport {FileUploadWrapper, ModalContentWrapper, Row} from '../education/modals/styles';\nimport {parseDateForBackend, parseToDate} from '../../utils/dateUtils';\nimport * as yup from 'yup';\nimport {yupResolver} from '@hookform/resolvers/yup';\n\nconst jobTenderSchema = yup.object().shape({\n  type: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.number(), title: yup.string()})\n    .required('Ovo polje je obavezno'),\n  organization_unit_id: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string(), title: yup.string()})\n    .required('Ovo polje je obavezno'),\n  date_of_start: yup.date().required('Ovo polje je obavezno'),\n  date_of_end: yup\n    .date()\n    .required('Ovo polje je obavezno')\n    .min(yup.ref('date_of_start'), 'Datum mora biti veći od datuma početka'),\n  serial_number: yup.string().required('Ovo polje je obavezno'),\n  id: yup.number(),\n});\n\nconst initialValues = {\n  id: 0,\n  organization_unit_id: undefined,\n  date_of_start: undefined,\n  date_of_end: undefined,\n  serial_number: '',\n  type: undefined,\n  description: '',\n  file_id: 0,\n};\n\nexport const JobTenderModal: React.FC<JobTendersModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  organizationUnitsList,\n  jobTenderTypeOptions,\n  alert,\n  refetch,\n}) => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({resolver: yupResolver(jobTenderSchema)});\n\n  const {mutate, loading: isSaving} = useJobTenderInsert();\n\n  useEffect(() => {\n    if (selectedItem) {\n      reset({\n        ...selectedItem,\n        date_of_end: parseToDate(selectedItem.date_of_end),\n        date_of_start: parseToDate(selectedItem.date_of_start),\n        organization_unit_id: organizationUnitsList.find(org => org.id === selectedItem.organization_unit?.id),\n      });\n    }\n  }, [selectedItem]);\n\n  const onSubmit = (values: any) => {\n    if (isSaving) return;\n\n    try {\n      mutate(\n        {\n          id: values.id,\n          organization_unit_id: values?.organization_unit_id?.id,\n          type: values?.type?.id,\n          description: '',\n          serial_number: values.serial_number,\n          date_of_start: parseDateForBackend(values?.date_of_start),\n          date_of_end: parseDateForBackend(values?.date_of_end),\n          file_id: values.file_id,\n        },\n        () => {\n          alert.success('Uspješno sačuvano.');\n          refetch();\n          onClose();\n          reset(initialValues);\n        },\n        () => {\n          alert.success('Uspješno sačuvano.');\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset(initialValues);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <Row>\n            <Controller\n              name=\"type\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"TIP OGLASA:\"\n                  name={name}\n                  options={jobTenderTypeOptions}\n                  value={value as any}\n                  onChange={onChange}\n                  error={errors.type?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"organization_unit_id\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"ORGANIZACIONA JEDINICA:\"\n                  name={name}\n                  options={organizationUnitsList.slice(1)}\n                  value={value as any}\n                  onChange={onChange}\n                  error={errors.organization_unit_id?.message}\n                />\n              )}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"date_of_start\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"DATUM OBJAVE:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_start?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"date_of_end\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"OGLAS JE VALIDAN DO:\"\n                  name={name}\n                  selected={value}\n                  error={errors.date_of_end?.message}\n                />\n              )}\n            />\n          </Row>\n          <Row>\n            <Input {...register('serial_number')} label=\"BROJ OGLASA:\" error={errors.serial_number?.message} />\n          </Row>\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={item => console.log(item)}\n              note={<Typography variant=\"bodySmall\" content=\"Dokument oglasa\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n        </ModalContentWrapper>\n      }\n      title={selectedItem?.id ? 'IZMJENITE OGLAS' : 'DODAJTE NOVI OGLAS'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTendersList/jobTendersList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[896,899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[896,899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[928,931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[928,931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[961,964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[961,964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2027,2030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2027,2030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2070,2073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2070,2073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2333,2336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2333,2336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2389,2392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2389,2392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2676,2679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2676,2679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2783,2786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2783,2786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {Button, Divider, EditIconTwo, Pagination, Table, Theme, TrashIcon} from 'client-library';\nimport {FC, useState} from 'react';\nimport {JobTendersListFilters} from '../../screens/jobTenders';\nimport {tableHeads} from '../../screens/jobTenders/constants';\nimport {DeleteModal} from '../../shared/deleteModal/deleteModal';\nimport {JobTender, JobTendersResponse} from '../../types/graphql/jobTenders';\nimport {MicroserviceProps} from '../../types/micro-service-props';\nimport {Controls, FilterDropdown, Filters, Header, MainTitle, OverviewBox} from './styles';\nimport {statusOptions} from '../../constants';\n\nexport interface JobTendersListProps {\n  navigate: (path: string) => void;\n  toggleJobTenderImportModal: (item?: JobTender) => void;\n  onPageChange: (page: number) => void;\n  data: JobTendersResponse['data']['jobTenders_Overview'];\n  dropdownJobTenderType: any[];\n  organizationUnitsList: any[];\n  onFilterChange: (value: any, name: string) => void;\n  filters: JobTendersListFilters;\n  deleteJobTender: (id: number) => void;\n  context: MicroserviceProps;\n  loading: boolean;\n}\n\nconst JobTendersList: FC<JobTendersListProps> = ({\n  navigate,\n  toggleJobTenderImportModal,\n  onPageChange,\n  data,\n  dropdownJobTenderType,\n  organizationUnitsList,\n  onFilterChange,\n  filters,\n  deleteJobTender,\n  context,\n  loading,\n}) => {\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [deleteItemID, setDeleteItemID] = useState(0);\n\n  const handleCloseDeleteModal = () => {\n    setDeleteItemID(0);\n    setShowDeleteModal(false);\n  };\n\n  const handleDelete = () => {\n    deleteJobTender(deleteItemID);\n    setDeleteItemID(0);\n    setShowDeleteModal(false);\n  };\n\n  return (\n    <OverviewBox>\n      <MainTitle variant=\"bodyMedium\" content=\"PREGLED SVIH OGLASA\" />\n      {/*TODO: theme color */}\n      <Divider color=\"#615959\" height=\"1px\" />\n      <Header>\n        <Filters>\n          <FilterDropdown\n            label=\"TIP OGLASA:\"\n            options={dropdownJobTenderType as any}\n            value={filters.type_id as any}\n            name=\"type_id\"\n            onChange={value => onFilterChange(value, 'type_id')}\n            placeholder=\"Tip oglasa\"\n          />\n          <FilterDropdown\n            label=\"ORGANIZACIONA JEDINICA:\"\n            options={organizationUnitsList as any}\n            value={filters.organization_unit_id as any}\n            name=\"organization_unit_id\"\n            onChange={value => onFilterChange(value, 'organization_unit_id')}\n            placeholder=\"Odaberite organizacionu jedinicu\"\n          />\n          <FilterDropdown\n            label=\"STATUS:\"\n            options={statusOptions as any}\n            onChange={value => onFilterChange(value, 'active')}\n            value={filters?.active as any}\n            name=\"active\"\n            placeholder=\"Odaberite status\"\n          />\n        </Filters>\n        <Controls>\n          <Button\n            content=\"Dodaj novi oglas\"\n            variant=\"secondary\"\n            style={{width: 170}}\n            onClick={() => toggleJobTenderImportModal()}\n          />\n        </Controls>\n      </Header>\n      <Table\n        tableHeads={tableHeads}\n        data={data.items || []}\n        style={{marginBottom: 22}}\n        isLoading={loading}\n        onRowClick={item => {\n          navigate(`/hr/job-tenders/job-tenders-list/${item.id}`);\n          context.breadcrumbs.add({\n            name: `${item.id}`,\n            to: `/hr/job-tenders/job-tenders-list/${item.id}`,\n          });\n        }}\n        tableActions={[\n          {\n            name: 'edit',\n            onClick: item => toggleJobTenderImportModal(item),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n          },\n          {\n            name: 'delete',\n            onClick: item => {\n              setShowDeleteModal(true);\n              setDeleteItemID(item.id);\n            },\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={data.total / 10}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={2}\n        previousLabel=\"Previous\"\n        nextLabel=\"Next\"\n        pageRangeDisplayed={3}\n      />\n      <DeleteModal\n        open={showDeleteModal}\n        onClose={() => {\n          handleCloseDeleteModal();\n        }}\n        handleDelete={handleDelete}\n      />\n    </OverviewBox>\n  );\n};\n\nexport default JobTendersList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTendersList/styles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Theme' is defined but never used.","line":1,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":55}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Typography, Dropdown, Breadcrumbs, Tabs, Theme} from 'client-library';\nimport styled from 'styled-components';\nimport SectionBox from '../../shared/sectionBox';\nimport {Input} from 'client-library';\n\nexport const Header = styled.div`\n  display: flex;\n  margin-block: 22px;\n  align-items: center;\n  flex-wrap: wrap;\n  row-gap: 30px;\n  column-gap: 10px;\n`;\n\nexport const Controls = styled.div`\n  display: flex;\n`;\n\nexport const Filters = styled.div`\n  display: flex;\n  gap: 8px;\n  flex-grow: 1;\n  flex-wrap: wrap;\n`;\n\nexport const FilterLabel = styled(Typography)`\n  font-weight: 600;\n`;\n\n//TODO: on devkit and/or storybook, make dropdown to be at least the width of its label ??\nexport const FilterDropdown = styled(Dropdown)`\n  width: 300px;\n`;\n\nexport const MainTitle = styled(Typography)`\n  margin-bottom: 10px;\n  font-weight: 600;\n`;\n\nexport const OverviewBox = styled(SectionBox)`\n  margin-top: 25px;\n`;\n\nexport const ScreenWrapper = styled.div`\n  background-color: #f8f8f8;\n  padding: 28px 40px;\n  height: calc(100vh - 157px);\n  overflow-y: auto;\n  box-sizing: border-box;\n\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nexport const StyledBreadcrumbs = styled(Breadcrumbs)`\n  padding: 0;\n  margin: 0;\n`;\n\nexport const StyledTabs = styled(Tabs)`\n  /* width: 100%; */\n  overflow-x: auto;\n`;\n\nexport const FormInput = styled(Input)`\n  width: 300px;\n  & ::placeholder {\n    font-family: Source Sans Pro, sans-serif;\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 20px;\n    color: #aba2a2;\n  }\n`;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/judgeNormModal/judgeNormModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Norms' is defined but never used.","line":7,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":29},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":54,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":54,"endColumn":11,"fix":{"range":[1905,1915],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":55,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":55,"endColumn":11,"fix":{"range":[1932,1942],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":59,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":59,"endColumn":11,"fix":{"range":[2117,2127],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":60,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":60,"endColumn":9,"fix":{"range":[2230,2238],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2598,2601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2598,2601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4208,4211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4208,4211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4247,4250],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4247,4250],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4952,4955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4952,4955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4991,4994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4991,4994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import {Dropdown, Input, Modal} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {ModalProps} from '../../screens/employees/education/types';\nimport {topicOptions} from '../../screens/judges/constants';\nimport useJudgeNormsInsert from '../../services/graphql/judges/useJudgeNormInsert';\nimport {JudgeNormForm, Norms} from '../../types/graphql/judges';\nimport {ModalContentWrapper, Row} from '../education/modals/styles';\nimport {parseDateForBackend} from '../../utils/dateUtils';\nimport * as yup from 'yup';\nimport {yupResolver} from '@hookform/resolvers/yup';\n\nconst initialValues: JudgeNormForm = {\n  id: 0,\n  title: '',\n  user_profile_id: null,\n  number_of_norm_decrease: null,\n  number_of_items: null,\n  number_of_items_solved: null,\n  evaluation_id: null,\n  relocation_id: null,\n  date_of_evaluation: null,\n  date_of_evaluation_validity: null,\n  topic: null,\n};\n\nconst schema = yup.object().shape({\n  user_profile_id: yup.object().required('Ovo polje je obavezno'),\n  number_of_norm_decrease: yup\n    .number()\n    .transform(value => (Number.isNaN(value) ? null : value))\n    .nullable()\n    .required('Ovo polje je obavezno')\n    .min(0, 'Najmanji broj je 0')\n    .max(100, 'Najveći broj je 100'),\n  topic: yup.object().required('Ovo polje je obavezno'),\n  number_of_items: yup\n    .number()\n    .transform(value => (Number.isNaN(value) ? null : value))\n    .nullable()\n    .required('Ovo polje je obavezno'),\n  title: yup.string().required('Ovo polje je obavezno'),\n  number_of_items_solved: yup\n    .number()\n    .transform(value => (Number.isNaN(value) ? null : value))\n    .nullable()\n    .required('Ovo polje je obavezno'),\n});\n\nconst JudgeNormModal: React.FC<ModalProps> = ({alert, refetchList, open, onClose, selectedItem, dropdownData}) => {\n  const item = useMemo(() => {\n    return selectedItem\n      ? {\n          ...selectedItem,\n          user_profile_id:\n            selectedItem.user_profile_id != 0\n              ? dropdownData?.find(user => user.id === selectedItem.user_profile_id)\n              : undefined,\n          topic: selectedItem.topic ? topicOptions?.find(item => item.title === selectedItem.topic) : undefined,\n        }\n      : initialValues;\n  }, [selectedItem]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({resolver: yupResolver(schema)});\n\n  const {mutate, loading: isSaving} = useJudgeNormsInsert();\n\n  useEffect(() => {\n    if (item) {\n      reset(item);\n    }\n  }, [item]);\n\n  const onSubmit = async (values: any) => {\n    if (isSaving) return;\n\n    try {\n      await mutate(\n        {\n          id: values?.id,\n          title: values?.title,\n          user_profile_id: values?.user_profile_id?.id,\n          topic: values?.topic?.title,\n          number_of_norm_decrease: values?.number_of_norm_decrease || 1,\n          number_of_items: values?.number_of_items || 1,\n          number_of_items_solved: values?.number_of_items_solved || 1,\n          evaluation_id: values?.evaluation?.id || 1,\n          relocation_id: values?.relocation?.id || 1,\n          date_of_evaluation: parseDateForBackend(values?.date_of_start),\n          date_of_evaluation_validity: parseDateForBackend(values?.date_of_end),\n        },\n        () => {\n          refetchList && refetchList();\n          reset();\n          alert.success('Uspješno sačuvano.');\n          onClose();\n        },\n        () => {\n          alert.error('Greška. Promjene nisu sačuvane.');\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset(item);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <Row>\n            <Controller\n              name=\"user_profile_id\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"SUDIJA:\"\n                  name={name}\n                  options={dropdownData as any}\n                  value={value as any}\n                  onChange={onChange}\n                  error={errors.user_profile_id?.message as string}\n                />\n              )}\n            />\n            <Input\n              {...register('number_of_norm_decrease')}\n              label=\"UMANJENJE NORME %:\"\n              error={errors.number_of_norm_decrease?.message as string}\n              type=\"number\"\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"topic\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"MATERIJA:\"\n                  name={name}\n                  options={topicOptions as any}\n                  value={value as any}\n                  onChange={onChange}\n                  error={errors.topic?.message as string}\n                />\n              )}\n            />\n            <Input\n              {...register('number_of_items')}\n              label=\"BROJ PREDMETA:\"\n              error={errors.number_of_items?.message as string}\n              type=\"number\"\n            />\n          </Row>\n          <Row>\n            <Input {...register('title')} label=\"NORMA:\" error={errors.title?.message as string} />\n            <Input\n              {...register('number_of_items_solved')}\n              label=\"RIJEŠENO PREDMETA:\"\n              error={errors.number_of_items_solved?.message as string}\n              type=\"number\"\n            />\n          </Row>\n        </ModalContentWrapper>\n      }\n      title={selectedItem?.id ? 'IZMJENA NORME' : 'DODAJ NORMU'}\n    />\n  );\n};\n\nexport default JudgeNormModal;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/judgeNormModal/style.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/judgesList/judgesList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[583,586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[583,586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[608,611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[608,611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[658,661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[658,661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1655,1658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1655,1658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1708,1711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1708,1711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1993,1996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1993,1996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2041,2044],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2041,2044],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useMemo} from 'react';\nimport {Button, Divider, Pagination, Table} from 'client-library';\nimport {JudgesListFilters} from '../../screens/judges/judgeNorms/judges';\nimport {JudgeOverview} from '../../types/graphql/judges';\nimport {Controls, FilterDropdown, Filters, Header, MainTitle, OverviewBox} from './styles';\nimport {judgeTableHeads} from '../../screens/judges/judgeNorms/constants';\n\nexport interface JudgesListProps {\n  toggleJudgesNorms: (item?: JudgeOverview) => void;\n  onPageChange: (page: number) => void;\n  data: JudgeOverview[];\n  organizationUnitsList: any[];\n  usersUnitsList: any[];\n  total: number;\n  onFilterChange: (value: any, name: string) => void;\n  filters: JudgesListFilters;\n  addNorm: () => void;\n  loading: boolean;\n}\n\nconst JudgesList: React.FC<JudgesListProps> = ({\n  toggleJudgesNorms,\n  onPageChange,\n  data,\n  organizationUnitsList,\n  usersUnitsList,\n  total,\n  onFilterChange,\n  filters,\n  addNorm,\n  loading,\n}) => {\n  const list: JudgeOverview[] = useMemo(\n    () =>\n      data?.map((item: JudgeOverview) => ({\n        ...item,\n        evaluation_title: item?.norms[0]?.evaluation?.score ? item?.norms[0]?.evaluation?.score : '',\n        relocation_title: item?.norms[0]?.relocation?.location ? item?.norms[0]?.relocation?.location : '',\n      })),\n    [data],\n  );\n\n  return (\n    <OverviewBox>\n      <MainTitle variant=\"bodyMedium\" content=\"PREGLED SUDIJA I PREDSJEDNIKA\" />\n      {/*TODO: theme color */}\n      <Divider color=\"#615959\" height=\"1px\" />\n      <Header>\n        <Filters>\n          <FilterDropdown\n            label=\"ORGANIZACIONA JEDINICA:\"\n            options={organizationUnitsList as any}\n            value={filters.organization_unit as any}\n            name=\"organization_unit_id\"\n            onChange={value => onFilterChange(value, 'organization_unit')}\n            placeholder=\"Odaberite organizacionu jedinicu\"\n          />\n          <FilterDropdown\n            label=\"SUDIJA:\"\n            options={usersUnitsList as any}\n            value={filters.user_profile as any}\n            name=\"user_profile_id\"\n            onChange={value => onFilterChange(value, 'user_profile')}\n            placeholder=\"Odaberite sudiju\"\n            isSearchable\n          />\n        </Filters>\n        <Controls>\n          <Button content=\"Dodaj normu\" variant=\"secondary\" style={{width: 130}} onClick={() => addNorm()} />\n        </Controls>\n      </Header>\n      <Table\n        tableHeads={judgeTableHeads}\n        data={list}\n        style={{marginBottom: 22}}\n        isLoading={loading}\n        onRowClick={item => toggleJudgesNorms(item)}\n      />\n      <Pagination\n        pageCount={Math.ceil(total / 10)}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={2}\n        previousLabel=\"Previous\"\n        nextLabel=\"Next\"\n        pageRangeDisplayed={3}\n      />\n    </OverviewBox>\n  );\n};\n\nexport default JudgesList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/judgesList/styles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Theme' is defined but never used.","line":1,"column":57,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":62}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Typography, Dropdown, Breadcrumbs, Tabs, Input, Theme} from 'client-library';\nimport styled from 'styled-components';\nimport SectionBox from '../../shared/sectionBox';\n\nexport const Header = styled.div`\n  display: flex;\n  margin-block: 22px;\n  align-items: center;\n  flex-wrap: wrap;\n  row-gap: 30px;\n  column-gap: 10px;\n`;\n\nexport const Controls = styled.div`\n  display: flex;\n`;\n\nexport const Filters = styled.div`\n  display: flex;\n  gap: 8px;\n  flex-grow: 1;\n  flex-wrap: wrap;\n`;\n\n//TODO: on devkit and/or storybook, make dropdown to be at least the width of its label ??\nexport const FilterDropdown = styled(Dropdown)`\n  width: 300px;\n`;\n\nexport const FilterInput = styled(Input)`\n  width: 300px;\n`;\n\nexport const MainTitle = styled(Typography)`\n  margin-bottom: 10px;\n  font-weight: 600;\n`;\n\nexport const OverviewBox = styled(SectionBox)`\n  margin-top: 25px;\n`;\n\nexport const ScreenWrapper = styled.div`\n  background-color: #f8f8f8;\n  padding: 28px 40px;\n  height: calc(100vh - 157px);\n  overflow-y: auto;\n  box-sizing: border-box;\n\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nexport const StyledBreadcrumbs = styled(Breadcrumbs)`\n  padding: 0;\n  margin: 0;\n`;\n\nexport const StyledTabs = styled(Tabs)`\n  /* width: 100%; */\n  overflow-x: auto;\n`;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/judgesNumbersList/judgesNumbersList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[926,929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[926,929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1039,1042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1039,1042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2357,2360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2357,2360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useMemo, useState} from 'react';\nimport {Controls, FilterDropdown, Filters, Header, MainTitle, OverviewBox} from '../judgesList/styles';\nimport {JudgeResolutionOverview} from '../../types/graphql/judges';\nimport {DropdownDataString} from '../../types/dropdownData';\nimport {JudgesNumberListFilters} from '../../screens/judges/judgesNumberDecisions/judgesNumberDecision';\nimport {judgesNumberResolutionTableHeads} from '../../screens/judges/judgeNorms/constants';\nimport {EditIconTwo, Theme, TrashIcon, Button, Divider, Pagination, Table} from 'client-library';\nimport {DeleteModal} from '../../shared/deleteModal/deleteModal';\nimport useJudgeResolutionsDelete from '../../services/graphql/judges/useJudgeResolutionDelete';\n\nexport interface JudgesNumbersListProps {\n  data: JudgeResolutionOverview[];\n  total: number;\n  years: DropdownDataString[];\n  filters: JudgesNumberListFilters;\n  onFilterChange: (value: any, name: string) => void;\n  onPageChange: (page: number) => void;\n  navigate: (path: string) => void;\n  alert: any;\n  refetch: () => void;\n  loading: boolean;\n}\n\nconst JudgesNumbersList: React.FC<JudgesNumbersListProps> = ({\n  data,\n  total,\n  years,\n  filters,\n  onFilterChange,\n  onPageChange,\n  navigate,\n  alert,\n  refetch,\n  loading,\n}) => {\n  const [deleteId, setDeleteId] = useState(0);\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const {mutate} = useJudgeResolutionsDelete();\n\n  const list: JudgeResolutionOverview[] = useMemo(\n    () =>\n      data?.map((item: JudgeResolutionOverview) => ({\n        ...item,\n      })),\n    [data],\n  );\n\n  const openDeleteModal = (id: number) => {\n    setDeleteId(id);\n    setDeleteModal(true);\n  };\n\n  const handleDelete = () => {\n    if (deleteId) {\n      mutate(\n        deleteId,\n        () => {\n          refetch();\n          alert.success('Uspješno obrisano.');\n          setDeleteModal(false);\n        },\n        () => {\n          alert.error('Greška. Brisanje nije moguće.');\n          setDeleteModal(false);\n        },\n      );\n    }\n  };\n\n  return (\n    <OverviewBox>\n      <MainTitle variant=\"bodyMedium\" content=\"PREGLED ODLUKA O BROJU SUDIJA I PREDSJEDNIKA\" />\n      <Divider color=\"#615959\" height=\"1px\" />\n      <Header>\n        <Filters>\n          <FilterDropdown\n            label=\"GODINA:\"\n            options={years}\n            value={filters.year as any}\n            name=\"year\"\n            onChange={value => onFilterChange(value, 'year')}\n            placeholder=\"Odaberite godinu\"\n          />\n        </Filters>\n        <Controls>\n          <Button\n            content=\"Dodaj odluku\"\n            variant=\"secondary\"\n            style={{width: 130}}\n            onClick={() => navigate('/hr/judges/number-decision/new-decision')}\n          />\n        </Controls>\n      </Header>\n      <Table\n        tableHeads={judgesNumberResolutionTableHeads}\n        data={list}\n        style={{marginBottom: 22}}\n        isLoading={loading}\n        tableActions={[\n          {\n            name: 'edit',\n            onClick: row => navigate(`/hr/judges/number-decision/${row.id}`),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n          },\n          {\n            name: 'delete',\n            onClick: item => openDeleteModal(item.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={Math.ceil(total / 10)}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={2}\n        previousLabel=\"Previous\"\n        nextLabel=\"Next\"\n        pageRangeDisplayed={3}\n      />\n      <DeleteModal open={deleteModal} onClose={() => setDeleteModal(false)} handleDelete={handleDelete} />\n    </OverviewBox>\n  );\n};\n\nexport default JudgesNumbersList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/landingPage/animation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/landingPage/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/newEmployeeSearch/newEmployeeSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/normsList/normsList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[822,825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[822,825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {EditIconTwo, Table, Theme, TrashIcon} from 'client-library';\nimport React, {useMemo, useState} from 'react';\nimport {Norms} from '../../types/graphql/judges';\nimport {FilterDropdown, Filters, Header, OverviewBox} from '../judgesList/styles';\nimport {DropdownDataString} from '../../types/dropdownData';\nimport {judgeNormsTableHeads} from '../../screens/judges/judgeNorms/constants';\nimport {topicOptions} from '../../screens/judges/constants';\n\ninterface NormsListProps {\n  data: Norms[];\n  toggleNormsModal: (item: Norms) => void;\n  handleDeleteIconClick: (id: number) => void;\n  loading: boolean;\n}\n\nconst NormsList: React.FC<NormsListProps> = ({data, toggleNormsModal, handleDeleteIconClick, loading}) => {\n  const [topic, setTopic] = useState<DropdownDataString | null>(null);\n\n  const onTopicChange = (value: any) => {\n    if (value.id === 'Sve') {\n      setTopic(null);\n      return;\n    }\n    setTopic(value);\n  };\n\n  const list = useMemo(() => {\n    const filteredData = topic ? data?.filter(norm => norm.topic === topic?.id) : data;\n    return filteredData?.map(item => ({\n      ...item,\n      number_of_items: Number(item.title) - Number(item.title) * (Number(item.number_of_norm_decrease) / 100),\n    }));\n  }, [data, topic]);\n\n  return (\n    <OverviewBox>\n      <Header>\n        <Filters>\n          <FilterDropdown\n            label=\"MATERIJA:\"\n            options={topicOptions}\n            value={topic}\n            name=\"topic\"\n            onChange={value => onTopicChange(value)}\n            placeholder=\"Odaberite materiju\"\n          />\n        </Filters>\n      </Header>\n      <Table\n        tableHeads={judgeNormsTableHeads}\n        data={list}\n        style={{marginBottom: 22}}\n        isLoading={loading}\n        tableActions={[\n          {\n            name: 'edit',\n            onClick: item => toggleNormsModal(item),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n          },\n          {\n            name: 'delete',\n            onClick: item => handleDeleteIconClick(item.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n    </OverviewBox>\n  );\n};\n\nexport default NormsList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/organizationUnitModal/organizationUnitModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckIcon' is defined but never used.","line":1,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Theme' is defined but never used.","line":1,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":49},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":32,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":32,"endColumn":11,"fix":{"range":[882,892],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":33,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":33,"endColumn":11,"fix":{"range":[909,919],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":34,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":34,"endColumn":9,"fix":{"range":[990,998],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":36,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":36,"endColumn":11,"fix":{"range":[1010,1020],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":37,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":37,"endColumn":11,"fix":{"range":[1038,1048],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":38,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":38,"endColumn":9,"fix":{"range":[1119,1127],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1478,1481],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1478,1481],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2759,2762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2759,2762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import {CheckIcon, Dropdown, Input, Modal, Theme} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {FormGroup, ModalContentWrapper} from './styles';\nimport {OrganizationUnitModalProps} from './types';\nimport {OrganizationUnit} from '../../types/graphql/organizationUnitsTypes';\nimport useOrganizationUnitInsert from '../../services/graphql/organizationUnits/useOrganizationUnitInsert';\n\nconst initialValues: OrganizationUnit = {\n  id: 0,\n  parent_id: 0,\n  number_of_judges: 0,\n  title: '',\n  abbreviation: '',\n  color: '',\n  folder_id: 0,\n  icon: '',\n};\n\nexport const OrganizationalUnitModal: React.FC<OrganizationUnitModalProps> = ({\n  open,\n  onClose,\n  dropdownData,\n  organizationUnit,\n  selectedItem,\n  alert,\n  refetch,\n}) => {\n  const item = useMemo(() => {\n    return selectedItem\n      ? {\n          ...selectedItem,\n          parent_id: {id: organizationUnit?.id, title: organizationUnit?.title},\n        }\n      : {\n          ...initialValues,\n          parent_id: {id: organizationUnit?.id, title: organizationUnit?.title},\n        };\n  }, [selectedItem]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: item || initialValues});\n\n  const {mutate, loading: isSaving} = useOrganizationUnitInsert();\n\n  useEffect(() => {\n    if (item) {\n      reset(item);\n    }\n  }, [item]);\n\n  const onSubmit = async (values: any) => {\n    if (isSaving) return;\n\n    try {\n      mutate(\n        {\n          ...values,\n          title: values?.title,\n          abbreviation: values?.abbreviation,\n          parent_id: organizationUnit?.id,\n          description: values?.description,\n          address: values?.address,\n          number_of_judges: values?.number_of_judges || 0,\n          folder_id: values?.folder_id || 0,\n        },\n        () => {\n          alert.success('Uspješno sačuvano.');\n          refetch();\n          onClose(true);\n          reset(initialValues);\n        },\n        () => {\n          alert.error('Greška. Promjena nije sačuvana.');\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose(false);\n        reset(item);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <ModalContentWrapper>\n          <FormGroup>\n            <Controller\n              name=\"parent_id\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"PARENT:\"\n                  options={dropdownData || []}\n                  error={errors.parent_id?.message as string}\n                  isDisabled\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Input\n              {...register('title', {required: 'Ovo polje je obavezno'})}\n              label=\"NAZIV:\"\n              error={errors.title?.message as string}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Input\n              {...register('abbreviation', {required: 'Ovo polje je obavezno'})}\n              label=\"SKRAĆENICA:\"\n              error={errors.abbreviation?.message as string}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Input {...register('address')} label=\"ADRESA:\" error={errors.address?.message as string} />\n          </FormGroup>\n\n          <FormGroup>\n            <Input\n              {...register('description')}\n              textarea={true}\n              label=\"OPIS:\"\n              error={errors.description?.message as string}\n            />\n          </FormGroup>\n        </ModalContentWrapper>\n      }\n      title={'DODAJ NOVO ODJELJENJE'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/organizationUnitModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/organizationUnitModal/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[125,128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[125,128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[169,172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[169,172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[184,187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[184,187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[215,218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[215,218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[289,292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[289,292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {DropdownDataNumber} from '../../types/dropdownData';\n\nexport interface OrganizationUnitModalProps {\n  selectedItem?: any;\n  open: boolean;\n  onClose: (refetch?: any, message?: any) => void;\n  dropdownData?: any;\n  action?: string;\n  organizationUnit?: DropdownDataNumber;\n  alert: any;\n  refetch: () => void;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/permitEntryModal/permitEntryModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1226,1229],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1226,1229],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2285,2288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2285,2288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2301,2304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2301,2304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2531,2534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2531,2534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3136,3139],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3136,3139],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3239,3242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3239,3242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3648,3651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3648,3651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":166,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5610,5613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5610,5613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":258,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8994,8997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8994,8997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Checkbox, Datepicker, Dropdown, Input} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {cityData} from '../../constants';\nimport useForeignerPermitInsert from '../../services/graphql/foreignerPermits/useForeignerPermitInsert';\nimport {ForeignerPermit} from '../../types/graphql/foreignerPermits';\nimport {parseDateForBackend, parseToDate} from '../../utils/dateUtils';\nimport {CheckboxContainer, CheckboxLabel, ColumnTitle, Form, FormColumn, FormGroup, PermitModal} from './styles';\n\nconst permitSchema = yup.object().shape({\n  work_permit_number: yup.string().required('Ovo polje je obavezno'),\n  work_permit_issuer: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string(), title: yup.string()})\n    .required('Ovo polje je obavezno'),\n  work_permit_date_of_start: yup.date().required('Ovo polje je obavezno'),\n  work_permit_date_of_end: yup\n    .date()\n    .nullable()\n    .min(yup.ref('work_permit_date_of_start'), 'Datum isteka ne može biti prije datuma izdavanja')\n    .when('residence_permit_indefinite_length', {\n      is: (value: any) => !value,\n      then: schema => schema.required('Ovo polje je obavezno'),\n    }),\n  residence_permit_date_of_end: yup.date(),\n  residence_permit_number: yup.string().required('Ovo polje je obavezno'),\n  country_of_origin: yup\n    .object()\n    .default(undefined)\n    .shape({id: yup.string(), title: yup.string()})\n    .required('Ovo polje je obavezno'),\n  user_profile_id: yup.number().required('Ovo polje je obavezno'),\n  residence_permit_indefinite_length: yup.boolean().required('Ovo polje je obavezno'),\n});\n\nconst initialValues = {\n  user_profile_id: 0,\n  work_permit_number: '',\n  work_permit_issuer: undefined,\n  work_permit_date_of_start: undefined,\n  work_permit_date_of_end: undefined,\n  work_permit_indefinite_length: false,\n  residence_permit_date_of_end: undefined,\n  residence_permit_indefinite_length: false,\n  residence_permit_number: '',\n  country_of_origin: undefined,\n};\n\ninterface PermitEntryModalProps {\n  open: boolean;\n  onClose: () => void;\n  permitData?: ForeignerPermit;\n  id: number;\n  refetchList: () => void;\n  countries: any[];\n  alert: any;\n}\n\nconst PermitEntryModal: React.FC<PermitEntryModalProps> = ({\n  onClose,\n  open,\n  permitData,\n  id,\n  refetchList,\n  countries,\n  alert,\n}) => {\n  const countryOptions = useMemo(() => {\n    return countries?.map((country: any) => {\n      return {\n        id: country.en_short_name,\n        title: country.en_short_name,\n      };\n    });\n  }, [countries]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: {user_profile_id: id ?? 0}, resolver: yupResolver(permitSchema)});\n\n  const indefinite = watch('residence_permit_indefinite_length');\n\n  const {mutate, loading: isSaving} = useForeignerPermitInsert();\n\n  useEffect(() => {\n    if (permitData) {\n      reset({\n        ...permitData,\n        country_of_origin: countryOptions.find((country: any) => country.id === permitData.country_of_origin),\n        work_permit_issuer: cityData.find((city: any) => city.id === permitData.work_permit_issuer),\n        work_permit_date_of_start: parseToDate(permitData.work_permit_date_of_start) ?? undefined,\n        work_permit_date_of_end: parseToDate(permitData.work_permit_date_of_end),\n        residence_permit_date_of_end: parseToDate(permitData.residence_permit_date_of_end) ?? undefined,\n      });\n    }\n  }, [permitData]);\n\n  const onSubmit = async (values: any) => {\n    if (isSaving) return;\n\n    const data = {\n      ...values,\n      work_permit_issuer: values.work_permit_issuer.id,\n      country_of_origin: values.country_of_origin.id,\n      user_profile_id: id,\n      work_permit_date_of_start: parseDateForBackend(values.work_permit_date_of_start),\n      work_permit_date_of_end: values.residence_permit_indefinite_length\n        ? null\n        : parseDateForBackend(values.work_permit_date_of_end),\n      residence_permit_date_of_end: parseDateForBackend(values.residence_permit_date_of_end),\n      residence_permit_file_id: values.residence_permit_file_id || 0,\n      work_permit_file_id: values.work_permit_file_id || 0,\n    };\n\n    try {\n      mutate(data, () => {\n        refetchList();\n        alert.success('Uspješno sačuvano.');\n        onClose();\n        reset(initialValues);\n      });\n    } catch (e) {\n      alert.error('Greška. Promjene nisu sačuvane.');\n      console.log(e);\n    }\n  };\n\n  return (\n    <PermitModal\n      onClose={() => {\n        reset(initialValues);\n        onClose();\n      }}\n      open={open}\n      title=\"DODAJTE DOZVOLU\"\n      style={{width: '1020px'}}\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      buttonLoading={isSaving}\n      content={\n        <Form>\n          <FormColumn>\n            <ColumnTitle content=\"PODACI O RADNOJ DOZVOLI\" variant=\"bodySmall\" style={{fontWeight: 600}} />\n            <FormGroup>\n              <Input\n                {...register('work_permit_number')}\n                label=\"BROJ:\"\n                error={errors.work_permit_number?.message}\n                placeholder=\"Unesite broj radne dozvole\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Controller\n                name=\"work_permit_issuer\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"IZDAVALAC:\"\n                    options={cityData}\n                    error={errors.work_permit_issuer?.message}\n                    placeholder=\"Izaberite izdavaoca\"\n                  />\n                )}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Controller\n                name=\"work_permit_date_of_start\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    onChange={onChange}\n                    label=\"VAŽI OD:\"\n                    name={name}\n                    selected={value}\n                    error={errors.work_permit_date_of_start?.message}\n                  />\n                )}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Controller\n                name=\"work_permit_date_of_end\"\n                control={control}\n                render={({field: {onChange, name, value}}) => {\n                  return (\n                    <Datepicker\n                      onChange={onChange}\n                      label=\"VAŽI DO:\"\n                      name={name}\n                      selected={value}\n                      error={errors.work_permit_date_of_end?.message}\n                      disabled={indefinite}\n                    />\n                  );\n                }}\n              />\n            </FormGroup>\n\n            <Controller\n              name=\"residence_permit_indefinite_length\"\n              control={control}\n              render={({field: {name, value, onChange}}) => {\n                return (\n                  <CheckboxContainer>\n                    <Checkbox onChange={onChange} name={name} checked={value} />\n                    <CheckboxLabel content=\"Neograničeno Trajanje\" variant=\"bodySmall\" />\n                  </CheckboxContainer>\n                );\n              }}\n            />\n          </FormColumn>\n          <FormColumn>\n            <ColumnTitle content=\"PODACI O BORAVIŠNOJ VIZI\" variant=\"bodySmall\" style={{fontWeight: 600}} />\n            <FormGroup>\n              <Input\n                {...register('residence_permit_number')}\n                label=\"BROJ PASOŠA:\"\n                error={errors.residence_permit_number?.message}\n                placeholder=\"Unesite broj pasoša\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Controller\n                name=\"residence_permit_date_of_end\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    onChange={onChange}\n                    label=\"VAŽI DO:\"\n                    name={name}\n                    selected={value}\n                    error={errors.residence_permit_date_of_end?.message}\n                  />\n                )}\n              />\n            </FormGroup>\n          </FormColumn>\n          <FormColumn>\n            <ColumnTitle content=\"REZIDENTSTVO\" variant=\"bodySmall\" style={{fontWeight: 600}} />\n            <FormGroup>\n              <Controller\n                name=\"country_of_origin\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    label=\"DRŽAVA:\"\n                    name={name}\n                    options={countryOptions}\n                    error={errors.country_of_origin?.message}\n                    placeholder=\"Izaberite državu\"\n                    isSearchable\n                  />\n                )}\n              />\n            </FormGroup>\n          </FormColumn>\n        </Form>\n      }\n    />\n  );\n};\n\nexport default PermitEntryModal;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/permitEntryModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/vacationModal/VacationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1183,1186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1183,1186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1776,1779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1776,1779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2811,2814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2811,2814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {VacationModalProps} from '../../screens/employees/absents/types';\nimport useVacationInsert from '../../services/graphql/userProfile/vacation/useVacationInsert';\nimport {yearsForDropdown} from '../../utils/constants';\nimport {FileUploadWrapper, FormGroup, ModalContentWrapper, UploadedFileContainer, UploadedFileWrapper} from './styles';\nimport {UserProfileVacationParams} from '../../types/graphql/profileVacationTypes';\n\nconst initialValues: UserProfileVacationParams = {\n  id: null,\n  user_profile_id: null,\n  file_id: null,\n  number_of_days: null,\n  year: null,\n  resolution_purpose: '',\n};\n\nexport const VacationModal: React.FC<VacationModalProps> = ({selectedItem, open, onClose, userProfileId, alert}) => {\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n\n  const handleUpload = (files: FileList) => {\n    const fileList = Array.from(files);\n    setUploadedFiles(fileList);\n  };\n\n  const {mutate, loading} = useVacationInsert();\n\n  const handleSave = (values: any) => {\n    const payload = {\n      id: values.id,\n      user_profile_id: userProfileId,\n      year: values.year.id || 0,\n      file_id: values.file_id,\n      number_of_days: values.number_of_days,\n      resolution_purpose: values.resolution_purpose,\n    };\n\n    mutate(\n      payload,\n      () => {\n        onClose(true);\n        alert.success('Uspješno sačuvano.');\n        reset();\n      },\n      () => {\n        alert.error('Greška. Promjene nisu sačuvane.');\n      },\n    );\n  };\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm<any>({defaultValues: initialValues});\n\n  useEffect(() => {\n    console.log(selectedItem);\n    reset({...selectedItem, year: yearOptions.find(yearOption => yearOption.id === selectedItem?.year)});\n  }, [selectedItem]);\n\n  const yearOptions = useMemo(() => [...yearsForDropdown().map(year => ({id: +year.id, title: +year.title}))], []);\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset(initialValues);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(handleSave)}\n      buttonLoading={loading}\n      content={\n        <ModalContentWrapper>\n          <FormGroup>\n            <Controller\n              name=\"year\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"GODINA:\"\n                  name={name}\n                  options={yearOptions}\n                  value={value as any}\n                  onChange={onChange}\n                  error={errors.year?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Input\n              {...register('number_of_days', {required: 'Ovo polje je obavezno'})}\n              label=\"UKUPAN BROJ DANA:\"\n              error={errors.number_of_days?.message as string}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Input {...register('resolution_purpose')} label=\"OPIS:\" textarea />\n          </FormGroup>\n\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={handleUpload}\n              note={<Typography variant=\"bodySmall\" content=\"Validacija\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n\n          {uploadedFiles.length > 0 && (\n            <UploadedFileWrapper>\n              {uploadedFiles.map((file, index) => (\n                <UploadedFileContainer key={index}>\n                  <Typography variant=\"bodySmall\" content={file.name} />\n                </UploadedFileContainer>\n              ))}\n            </UploadedFileWrapper>\n          )}\n        </ModalContentWrapper>\n      }\n      title={'Rješenje o godišnjem odmoru'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/vacationModal/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/vacationModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/constants.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EditIconTwo' is defined but never used.","line":1,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Theme' is defined but never used.","line":1,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrashIconTwo' is defined but never used.","line":1,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {EditIconTwo, Theme, TrashIconTwo} from '@oykos-development/devkit-react-ts-styled-components';\nimport {DropdownDataNumber, DropdownDataString} from './types/dropdownData';\n\nexport const cityData: DropdownDataString[] = [\n  {id: 'PJ Andrijevica', title: 'PJ Andrijevica'},\n  {id: 'PJ Bar', title: 'PJ Bar'},\n  {id: 'PJ Berane', title: 'PJ Berane'},\n  {id: 'PJ Bijelo Polje', title: 'PJ Bijelo Polje'},\n  {id: 'PJ Budva', title: 'PJ Budva'},\n  {id: 'PJ Cetinje', title: 'PJ Cetinje'},\n  {id: 'PJ Danilovgrad', title: 'PJ Danilovgrad'},\n  {id: 'PJ Gusinje', title: 'PJ Gusinje'},\n  {id: 'PJ Herceg Novi', title: 'PJ Herceg Novi'},\n  {id: 'PJ Kolašin', title: 'PJ Kolašin'},\n  {id: 'PJ Kotor', title: 'PJ Kotor'},\n  {id: 'PJ Mojkovac', title: 'PJ Mojkovac'},\n  {id: 'PJ Nikšić', title: 'PJ Nikšić'},\n  {id: 'PJ Petnjica', title: 'PJ Petnjica'},\n  {id: 'PJ Plav', title: 'PJ Plav'},\n  {id: 'PJ Plužine', title: 'PJ Plužine'},\n  {id: 'PJ Pljevlja', title: 'PJ Pljevlja'},\n  {id: 'PJ Podgorica', title: 'PJ Podgorica'},\n  {id: 'PJ Rožaje', title: 'PJ Rožaje'},\n  {id: 'PJ Šavnik', title: 'PJ Šavnik'},\n  {id: 'PJ Tivat', title: 'PJ Tivat'},\n  {id: 'PJ Tuzi', title: 'PJ Tuzi'},\n  {id: 'PJ Ulcinj', title: 'PJ Ulcinj'},\n  {id: 'PJ Zeta', title: 'PJ Zeta'},\n  {id: 'PJ Žabljak', title: 'PJ Žabljak'},\n];\n\nexport const countriesData: DropdownDataString[] = [\n  {id: 'Crna Gora', title: 'Crna Gora'},\n  {id: 'Srbija', title: 'Srbija'},\n  {id: 'Hrvatska', title: 'Hrvatska'},\n];\n\nexport const maleMaritalStatusOptions: DropdownDataString[] = [\n  {id: 'Oženjen', title: 'Oženjen'},\n  {id: 'Neoženjen', title: 'Neoženjen'},\n];\n\nexport const femaleMaritalStatusOptions: DropdownDataString[] = [\n  {id: 'Udata', title: 'Udata'},\n  {id: 'Neudata', title: 'Neudata'},\n];\n\nexport const genderOptions: DropdownDataString[] = [\n  {id: 'M', title: 'M'},\n  {id: 'Ž', title: 'Ž'},\n];\n\nexport const nationalMinorities: DropdownDataString[] = [\n  {id: 'Srbin/Srpkinja', title: 'Srbin/Srpkinja'},\n  {id: 'Bošnjak/Bošnjakinja', title: 'Bošnjak/Bošnjakinja'},\n  {id: 'Albanac/Albanka', title: 'Albanac/Albanka'},\n  {id: 'Hrvat/Hrvatica', title: 'Hrvat/Hrvatica'},\n  {id: 'Musliman/Muslimanka', title: 'Musliman/Muslimanka'},\n  {id: 'Bosanac/Bosanka', title: 'Bosanac/Bosanka'},\n  {id: 'Makedonas/Makedonka', title: 'Makedonas/Makedonka'},\n  {id: 'Egipćanin/Egipćanka', title: 'Egipćanin/Egipćanka'},\n  {id: 'Rom/Romkinja', title: 'Rom/Romkinja'},\n  {id: 'Ostalo', title: 'Ostalo'},\n];\n\nexport const statusOptions = [\n  {id: null, title: 'Svi'},\n  {id: true, title: 'Aktivni'},\n  {id: false, title: 'Neaktivni'},\n];\n\nexport const yesOrNoOptionsBoolean = [\n  {id: true, title: 'Da'},\n  {id: false, title: 'Ne'},\n];\n\nexport const yesOrNoOptionsNumber = [\n  {id: 1, title: 'Da'},\n  {id: 2, title: 'Ne'},\n];\n\nexport const yesOrNoOptionsString = [\n  {id: 'Da', title: 'Da'},\n  {id: 'Ne', title: 'Ne'},\n];\n\nexport const EMAIL_REGEX = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\n\nexport const contractTypes: DropdownDataNumber[] = [\n  {id: 1, title: 'Ugovor o radu na neodređeno vrijeme'},\n  {id: 2, title: 'Ugovor o radu na određeno vrijeme'},\n  {id: 3, title: 'Ugovor o privremeno povremenim poslovima'},\n  {id: 4, title: 'Ugovor o radu sa nepunim radnim vremenom'},\n  {id: 5, title: 'Ugovor o djelu'},\n  {id: 6, title: 'Ugovor o radu sa strancem'},\n  {\n    id: 7,\n    title: 'Ugovor o radu za obavljanje poslova van prostorija poslodavca',\n  },\n  {id: 8, title: 'Radni odnos u svojstvu pripravnika'},\n  {\n    id: 9,\n    title: 'Ugovor o radu za obavljanje poslova van prostorija poslodavca',\n  },\n];\n\nexport const quarterOptions = [\n  {id: '1/4', title: '1/4'},\n  {id: '2/4', title: '2/4'},\n  {id: '3/4', title: '3/4'},\n  {id: '4/4', title: '4/4'},\n];\n\nexport const revisionPriorityOptions: DropdownDataString[] = [\n  {id: 'Nizak', title: 'Nizak'},\n  {id: 'Srednji', title: 'Srednji'},\n  {id: 'Visok', title: 'Visok'},\n];\n\nexport const revisionDeadlineOptions: DropdownDataNumber[] = [\n  {id: 1, title: '1 mjesec'},\n  {id: 2, title: '2 mjeseca'},\n  {id: 3, title: '3 mjeseca'},\n  {id: 4, title: '4 mjeseca'},\n  {id: 5, title: '5 mjeseci'},\n  {id: 6, title: '6 mjeseci'},\n  {id: 7, title: '7 mjeseci'},\n  {id: 8, title: '8 mjeseci'},\n  {id: 9, title: '9 mjeseci'},\n  {id: 10, title: '10 mjeseci'},\n  {id: 11, title: '11 mjeseci'},\n  {id: 12, title: '12 mjeseci'},\n];\n\nexport const revisionStatusOptions: DropdownDataString[] = [\n  {id: 'Sprovedena', title: 'Sprovedena'},\n  {id: 'Nesprovedena', title: 'Nesprovedena'},\n];\n\nexport const revisionTypeOptions: DropdownDataNumber[] = [\n  {id: 1, title: 'Redovna'},\n  {id: 2, title: 'Ad Hoc'},\n  {id: 3, title: 'Sporazum'},\n];\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/index.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":14,"column":3,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":14,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":20,"column":5,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":20,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":24,"column":3,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":24,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":27,"column":5,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":27,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/router.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/404.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/absents/absents.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2055,2058],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2055,2058],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2283,2286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2283,2286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4635,4638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4635,4638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4683,4686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4683,4686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Divider} from '@oykos-development/devkit-react-ts-styled-components';\nimport {Button, Dropdown, EditIconTwo, Table, Theme, TrashIcon, Typography} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {AbsentModal} from '../../../components/absentsModal/absentsModal';\nimport useAbsentDelete from '../../../services/graphql/userProfile/absents/useAbsentDelete';\nimport useAbsentOverview from '../../../services/graphql/userProfile/absents/useAbsentOverview';\nimport useAbsentTypesOverview from '../../../services/graphql/userProfile/absents/useAbsentsType';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {UserProfileAbsents, UserProfileAbsentsParams} from '../../../types/graphql/profileAbsentsTypes';\nimport {MicroserviceProps} from '../../../types/micro-service-props';\nimport {\n  ButtonWrapper,\n  Container,\n  Subtitle,\n  SuperTitle,\n  TableHeader,\n  TableTitle,\n  Title,\n  VacationContainer,\n  VacationWrapper,\n  YearContainer,\n  YearWrapper,\n} from './styles';\n\nimport {VacationModal} from '../../../components/vacationModal/VacationModal';\nimport useVacationGet from '../../../services/graphql/userProfile/vacation/useVacationGet';\nimport {yearsForDropdownFilter} from '../../../utils/constants';\nimport {tableHeadsAbsence, tableHeadsVacation, tableHeadsYearVacation} from './constants';\nimport {UserProfileVacationParams, YearVacationType} from '../../../types/graphql/profileVacationTypes';\nimport useVacationDelete from '../../../services/graphql/userProfile/absents/useVacationDelete';\n\nconst Absents: React.FC<{context: MicroserviceProps}> = ({context}) => {\n  const years = yearsForDropdownFilter();\n  const userProfileID = context.navigation.location.pathname.split('/')[4];\n  const {absentsData, refetchData, summary} = useAbsentOverview(userProfileID);\n  const {vacationData, refetcUserVacation} = useVacationGet(userProfileID);\n  const [firstTableData, setFirstTableData] = useState<UserProfileAbsents[]>([]);\n  const [secondTableData, setSecondTableData] = useState<any[]>([]);\n  const [showModal, setShowModal] = useState(false);\n  const [showVacationModal, setShowVacationModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n  const [form, setForm] = useState<any>();\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const {absentsTypeData, loading} = useAbsentTypesOverview();\n  const {mutate} = useAbsentDelete();\n  const {deleteVacation} = useVacationDelete();\n  const [editItem, setEditItem] = useState<UserProfileAbsents | undefined>();\n  const [editItemVacation, setEditItemVacation] = useState<YearVacationType | undefined>();\n  const [showDeleteVacationModal, setShowDeleteVacationModal] = useState<boolean>(false);\n\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const handleAddVacation = () => {\n    setShowVacationModal(true);\n  };\n\n  const handleDelete = async () => {\n    mutate(\n      selectedItemId,\n      () => {\n        refetchData();\n        context.alert.success('Uspješno obrisano.');\n        setShowDeleteModal(false);\n        setSelectedItemId(0);\n      },\n      () => {\n        context.alert.error('Greška. Brisanje nije moguće.');\n      },\n    );\n  };\n\n  const handleDeleteVacation = async () => {\n    deleteVacation(\n      selectedItemId,\n      () => {\n        refetcUserVacation();\n        refetchData();\n        context.alert.success('Uspješno obrisano.');\n        setShowDeleteVacationModal(false);\n        setSelectedItemId(0);\n      },\n      () => {\n        context.alert.error('Greška. Brisanje nije moguće.');\n      },\n    );\n  };\n\n  const handleCloseAbsentsModal = (refetch?: boolean) => {\n    setShowModal(false);\n    setSelectedItemId(0);\n    setEditItem(undefined);\n    refetch && refetchData();\n  };\n\n  const handleCloseVacationModal = (refetch: boolean) => {\n    setShowVacationModal(false);\n    setSelectedItemId(0);\n    setEditItemVacation(undefined);\n    refetchData();\n    refetch && refetcUserVacation();\n  };\n\n  const handleEdit = (item: UserProfileAbsentsParams) => {\n    setShowModal(true);\n    setEditItem(absentsData?.find(tableItem => tableItem.id === item.id));\n  };\n\n  const handleEditVacation = (item: UserProfileVacationParams) => {\n    setShowVacationModal(true);\n    setEditItemVacation(vacationData?.find(tableItem => tableItem.id === item.id));\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedItemId(id);\n  };\n\n  const handleDeleteVacationIconClick = (id: number) => {\n    setShowDeleteVacationModal(true);\n    setSelectedItemId(id);\n  };\n\n  const handleChange = (value: any, name: string) => {\n    setForm((prevState: any) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const filterFirstTableData = () => {\n    if (absentsData) {\n      const filteredData = [...absentsData].filter(absent => !absent?.absent_type?.accounting_days_off);\n      setFirstTableData(filteredData);\n      return filteredData;\n    } else {\n      setFirstTableData([]);\n      return [];\n    }\n  };\n\n  const filterSecondTableData = () => {\n    if (absentsData) {\n      const filteredData = absentsData.filter(item => item?.absent_type?.accounting_days_off);\n      const combinedData = [...filteredData];\n      setSecondTableData(combinedData);\n      return combinedData;\n    } else {\n      setSecondTableData([]);\n      return [];\n    }\n  };\n\n  const filteredFirstTableData = useMemo(() => {\n    return (\n      firstTableData?.filter((item: UserProfileAbsents) => {\n        const yearMatches = !form?.year?.id || item.date_of_start.includes(form.year.id);\n        return yearMatches;\n      }) || []\n    );\n  }, [firstTableData, form?.year?.id]);\n\n  const filteredSecondTableData = useMemo(() => {\n    return (\n      secondTableData?.filter((item: UserProfileAbsents) => {\n        const yearMatches = !form?.year?.id || item.date_of_start.includes(form.year.id);\n        return yearMatches;\n      }) || []\n    );\n  }, [secondTableData, form?.year?.id]);\n\n  const filterVacationData = () => {\n    if (!form) {\n      return vacationData || [];\n    }\n    const isAllYearSelected = form?.year.id.toString() === '';\n    const filteredData = vacationData?.filter(item => {\n      return isAllYearSelected || item.year === form.year.id;\n    });\n\n    return filteredData || [];\n  };\n\n  useEffect(() => {\n    filterFirstTableData();\n    filterSecondTableData();\n  }, [absentsData, vacationData]);\n\n  return (\n    <Container>\n      <VacationWrapper>\n        <VacationContainer>\n          <SuperTitle variant=\"bodySmall\" content={`${summary?.current_available_days}` || null}></SuperTitle>\n          <Title variant=\"bodySmall\" content=\"DOSTUPNI DANI GODIŠNJEG ODMORA\" />\n          <Subtitle variant=\"bodySmall\" content=\"TEKUĆA GODINA\" />\n        </VacationContainer>\n        <VacationContainer>\n          <SuperTitle variant=\"bodySmall\" content={`${summary?.past_available_days}` || null}></SuperTitle>\n          <Title variant=\"bodySmall\" content=\"DOSTUPNI DANI GODIŠNJEG ODMORA\" />\n          <Subtitle variant=\"bodySmall\" content=\"PRETHODNA GODINA\" />\n        </VacationContainer>\n        <VacationContainer>\n          <SuperTitle variant=\"bodySmall\" content={`${summary?.used_days}` || ''}></SuperTitle>\n          <Title variant=\"bodySmall\" content=\"ISKORIŠTENI DANI U TEKUĆOJ GODINI\" />\n          <Subtitle variant=\"bodySmall\" content=\"\" />\n        </VacationContainer>\n        <VacationContainer>\n          <SuperTitle\n            variant=\"bodySmall\"\n            content={`${summary ? summary?.current_available_days + summary?.past_available_days : ''}`}></SuperTitle>\n          <Title variant=\"bodySmall\" content=\"UKUPNO RASPOLOŽIVIH DANA \" />\n          <Subtitle variant=\"bodySmall\" content=\"TEKUĆA + PRETHODNA\" />\n        </VacationContainer>\n      </VacationWrapper>\n      <TableHeader>\n        <YearWrapper>\n          <YearContainer>\n            <Dropdown\n              label={<Typography variant=\"bodySmall\" content=\"GODINA:\" />}\n              options={years}\n              name=\"year\"\n              value={form?.year || null}\n              placeholder=\"Odaberite godinu:\"\n              onChange={handleChange}\n            />\n          </YearContainer>\n        </YearWrapper>\n\n        <ButtonWrapper>\n          <Button\n            variant=\"secondary\"\n            content={<Typography variant=\"bodyMedium\" content=\"Rješenje o godišnjem odmoru\" />}\n            onClick={handleAddVacation}\n          />\n          <Button\n            variant=\"secondary\"\n            content={<Typography variant=\"bodyMedium\" content=\"Zahtjevi\" />}\n            onClick={handleAdd}\n            style={{marginLeft: '10px'}}\n          />\n        </ButtonWrapper>\n      </TableHeader>\n      <div>\n        <div>\n          <TableTitle content=\"GODIŠNJI ODMORI\" variant=\"bodyMedium\" />\n          <Divider height=\"1px\" style={{marginBottom: '30px'}} />\n        </div>\n        <Table\n          tableHeads={tableHeadsYearVacation}\n          data={filterVacationData() || []}\n          isLoading={loading}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEditVacation(item),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteVacationIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n      </div>\n\n      <div>\n        <div>\n          <TableTitle content=\"ODMORI\" variant=\"bodyMedium\" />\n          <Divider height=\"1px\" style={{marginBottom: '30px'}} />\n        </div>\n        <Table\n          tableHeads={tableHeadsVacation}\n          data={filteredSecondTableData || []}\n          isLoading={loading}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n      </div>\n      <div>\n        <div>\n          <TableTitle content=\"ODSUTNOST\" variant=\"bodyMedium\" />\n          <Divider height=\"1px\" />\n        </div>\n        <Table\n          tableHeads={tableHeadsAbsence}\n          data={filteredFirstTableData || []}\n          isLoading={loading}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n      </div>\n      {showModal && (\n        <AbsentModal\n          open={showModal}\n          onClose={refetch => handleCloseAbsentsModal(refetch)}\n          selectedItem={editItem}\n          userProfileId={Number(userProfileID)}\n          alert={context.alert}\n          absentTypes={absentsTypeData || []}\n          key={editItem ? editItem.id : 'new'}\n        />\n      )}\n      {showVacationModal && (\n        <VacationModal\n          open={showVacationModal}\n          onClose={refetch => handleCloseVacationModal(refetch)}\n          selectedItem={editItemVacation}\n          userProfileId={Number(userProfileID)}\n          alert={context.alert}\n          key={editItemVacation ? editItemVacation.id : 'new'}\n        />\n      )}\n\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n      <DeleteModal\n        open={showDeleteVacationModal}\n        handleDelete={handleDeleteVacation}\n        onClose={() => setShowDeleteVacationModal(false)}\n      />\n    </Container>\n  );\n};\n\nexport default Absents;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/absents/constants.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[288,291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[288,291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[517,520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[517,520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[700,703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[700,703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1428,1431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1428,1431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1681,1684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1681,1684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'row' is defined but never used.","line":59,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1869,1872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1869,1872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3001,3004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3001,3004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {TableHead, Typography} from 'client-library';\nimport {parseDate} from '../../../utils/dateUtils';\n\nexport const tableHeadsAbsence: TableHead[] = [\n  {\n    title: 'Godina',\n    accessor: 'date_of_start',\n    type: 'custom',\n    renderContents: (_, item: any) => {\n      return <Typography variant=\"bodyMedium\" content={parseDate(item.date_of_start, true)} />;\n    },\n  },\n  {\n    title: 'Vrsta prilagodbe',\n    accessor: 'absent_type',\n    type: 'custom',\n    renderContents: (item: any) => {\n      return <Typography variant=\"bodyMedium\" content={item.title} />;\n    },\n  },\n  {\n    title: 'Dana',\n    accessor: '',\n    type: 'custom',\n    renderContents: (_, row: any) => {\n      const startDate = new Date(row.date_of_start);\n      const endDate = new Date(row.date_of_end);\n\n      let numberOfDays = 0;\n\n      for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {\n        const dayOfWeek = d.getDay();\n        if (dayOfWeek !== 0 && dayOfWeek !== 6) {\n          numberOfDays += 1;\n        }\n      }\n\n      return <Typography variant=\"bodyMedium\" content={numberOfDays} />;\n    },\n  },\n  {title: 'Datoteka', accessor: 'file_id', type: 'text'},\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n\nexport const tableHeadsVacation: TableHead[] = [\n  {\n    title: 'Godina',\n    accessor: 'date_of_start',\n    type: 'custom',\n    renderContents: (_, item: any) => {\n      return <Typography variant=\"bodyMedium\" content={item.year ? item.year : parseDate(item.date_of_start, true)} />;\n    },\n  },\n  {\n    title: 'Vrsta prilagodbe',\n    accessor: 'absent_type',\n    type: 'custom',\n    renderContents: (item: any, row) => {\n      return <Typography variant=\"bodyMedium\" content={item.title} />;\n    },\n  },\n  {\n    title: 'Dana',\n    accessor: '',\n    type: 'custom',\n    renderContents: (_, row: any) => {\n      const startDate = new Date(row.date_of_start);\n      const endDate = new Date(row.date_of_end);\n\n      let numberOfDays = 0;\n\n      for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {\n        const dayOfWeek = d.getDay();\n        if (dayOfWeek !== 0 && dayOfWeek !== 6) {\n          numberOfDays += 1;\n        }\n      }\n      return <Typography variant=\"bodyMedium\" content={row.number_of_days ? row.number_of_days : numberOfDays} />;\n    },\n  },\n  {title: 'Datoteka', accessor: 'file_id', type: 'text'},\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n\nexport const tableHeadsYearVacation: TableHead[] = [\n  {\n    title: 'Godina',\n    accessor: 'year',\n    type: 'custom',\n    renderContents: year => {\n      return <Typography variant=\"bodyMedium\" content={year} />;\n    },\n  },\n  {\n    title: 'Vrsta prilagodbe',\n    accessor: 'resolution_type',\n    type: 'custom',\n    renderContents: item => {\n      return <Typography variant=\"bodyMedium\" content={item.title} />;\n    },\n  },\n  {\n    title: 'Dana',\n    accessor: '',\n    type: 'custom',\n    renderContents: (_, row: any) => {\n      return <Typography variant=\"bodyMedium\" content={row.number_of_days ? row.number_of_days : ''} />;\n    },\n  },\n  {title: 'Datoteka', accessor: 'file_id', type: 'text'},\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/absents/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/absents/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[126,129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[126,129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[198,201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[198,201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[246,249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[246,249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[309,312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[309,312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[382,385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[382,385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[430,433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[430,433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {AbsentType} from '../../../types/graphql/profileAbsentsTypes';\n\nexport interface AbsentsModalProps {\n  selectedItem?: any;\n  absentTypes: AbsentType[];\n  open: boolean;\n  onClose: (action?: any) => void;\n  userProfileId: number;\n  alert: any;\n}\n\nexport interface VacationModalProps {\n  selectedItem?: any;\n  absentTypes?: AbsentType[];\n  open: boolean;\n  onClose: (action?: any) => void;\n  userProfileId: number;\n  alert: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/addNew/addNew.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[392,395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[392,395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {MainTitle, OverviewBox} from '../../../components/employeesList/styles';\nimport {ScreenWrapper} from '../../../shared/screenWrapper';\nimport {ScreenProps} from '../../../types/screen-props';\nimport {BasicInfo} from '../basicInfo/basicInfo';\nimport {Divider} from 'client-library';\n\nexport const AddNewEmployee: React.FC<ScreenProps> = ({context}: {context: any}) => {\n  return (\n    <ScreenWrapper context={context}>\n      <OverviewBox>\n        <MainTitle content=\"DODAVANJE NOVOG ZAPOSLENOG\" />\n        <Divider />\n        <BasicInfo context={context} />\n      </OverviewBox>\n    </ScreenWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/basicInfo/basicInfo.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2777,2780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2777,2780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":102,"column":14,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":102,"endColumn":105,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[3904,3905],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3847,3850],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3847,3850],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":251,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9517,9520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9517,9520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":285,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10834,10837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10834,10837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":324,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12260,12263],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12260,12263],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":343,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":343,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12950,12953],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12950,12953],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":365,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":365,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13790,13793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13790,13793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":416,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":416,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15604,15607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15604,15607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":437,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":437,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16339,16342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16339,16342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":455,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":455,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17001,17004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17001,17004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":456,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":456,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17059,17062],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17059,17062],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":473,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":473,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17681,17684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17681,17684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":474,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":474,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17739,17742],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17739,17742],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":510,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":510,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18988,18991],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18988,18991],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":511,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":511,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19047,19050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19047,19050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":525,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":525,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19537,19540],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19537,19540],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":528,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":528,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19675,19678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19675,19678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":544,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":544,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20302,20305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20302,20305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":546,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":546,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20392,20395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20392,20395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":590,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":590,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22038,22041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22038,22041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Button, Datepicker, Dropdown, Input, Typography} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {\n  cityData,\n  femaleMaritalStatusOptions,\n  genderOptions,\n  maleMaritalStatusOptions,\n  nationalMinorities,\n  yesOrNoOptionsString,\n} from '../../../constants';\nimport useJobPositionsAvailableOrganizationUnit from '../../../services/graphql/jobPositions/useJobPositionsAvailableOrganizationUnit';\nimport useOrganizationUnits from '../../../services/graphql/organizationUnits/useOrganizationUnits';\nimport useSettingsDropdownOverview from '../../../services/graphql/settingsDropdown/useSettingsDropdownOverview';\nimport useBasicInfoGet from '../../../services/graphql/userProfile/basicInfo/useBasicInfoGet';\nimport useBasicInfoInsert from '../../../services/graphql/userProfile/basicInfo/useBasicInfoInsert';\nimport useBasicInfoUpdate from '../../../services/graphql/userProfile/basicInfo/useBasicInfoUpdate';\nimport {DropdownDataNumber, DropdownDataString} from '../../../types/dropdownData';\nimport {UserProfileBasicInfoFormValues} from '../../../types/graphql/userProfiles';\nimport {initialValues} from './constants';\nimport {\n  Controls,\n  FormColumn,\n  FormContainer,\n  FormFileUpload,\n  FormFooter,\n  FormItem,\n  FormRow,\n  FormWrapper,\n  TextWrapper,\n} from './styles';\nimport {BasicInfoPageProps} from './types';\nimport {booleanToYesOrNo, formatData} from './utils';\nimport {parseToDate} from '../../../utils/dateUtils';\nimport {Switch} from '@oykos-development/devkit-react-ts-styled-components';\n\nconst contractPositions = ['Ugovor na neodređeno vrijeme', 'Ugovor na određeno vrijeme'];\n\nexport const BasicInfo: React.FC<BasicInfoPageProps> = ({context}) => {\n  const {data: profileData, refetch} = useBasicInfoGet(Number(context.navigation.location.pathname.split('/')[4]));\n  const isNew = !profileData?.id;\n  const [isDisabled, setIsDisabled] = useState<boolean>(!isNew);\n\n  const {organizationUnits} = useOrganizationUnits();\n  const {options: contractTypes} = useSettingsDropdownOverview({entity: 'contract_types'});\n  const {mutate: createBasicInfo, loading: isCreating} = useBasicInfoInsert();\n  const {mutate: updateBasicInfo, loading: isUpdating} = useBasicInfoUpdate();\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors, isValid},\n    reset,\n    control,\n    watch,\n    setValue,\n  } = useForm({\n    defaultValues: initialValues,\n  });\n\n  const organizationUnitsList = useMemo(() => {\n    return organizationUnits\n      .filter(i => !i.parent_id)\n      .map(unit => {\n        return {id: unit.id, title: unit.title};\n      });\n  }, [organizationUnits]);\n\n  const countryOptions = useMemo(() => {\n    return context.countries?.map((country: any) => {\n      return {\n        id: country.en_short_name,\n        title: country.en_short_name,\n      };\n    });\n  }, [context.countries]);\n\n  const contractStart = watch('contract.date_of_start');\n\n  const validateDateOfEnd = (date: Date | null) =>\n    !date || !contractStart || (contractStart && date >= contractStart)\n      ? true\n      : 'Kraj radnog odnosa ne može biti prije početka radnog odnosa.';\n\n  const gender = watch('gender')?.id;\n  const contract = watch('contract');\n\n  const maritalOptions = gender === 'M' ? maleMaritalStatusOptions : femaleMaritalStatusOptions;\n\n  const {positions} = useJobPositionsAvailableOrganizationUnit(\n    contract.organization_unit_id?.id,\n    contract.department_id?.id,\n    () => {\n      setValue('contract.job_position_in_organization_unit_id', null);\n    },\n  );\n\n  const departmentOptions: DropdownDataNumber = useMemo(() => {\n    if (!contract?.organization_unit_id) return [];\n\n    if (contract?.organization_unit_id && organizationUnits && organizationUnits.length) {\n      return organizationUnits.find((orgUnit: any) => orgUnit.id === contract.organization_unit_id?.id)!.children;\n    } else {\n      return organizationUnits;\n    }\n  }, [contract?.organization_unit_id, organizationUnits]);\n\n  const onFileUpload = (acceptedFiles: FileList) => {\n    console.log('File(s) uploaded:', acceptedFiles);\n  };\n\n  const handleSave = (values: UserProfileBasicInfoFormValues, close: boolean) => {\n    if (isValid) {\n      if (!profileData?.id) {\n        if (isCreating) return;\n\n        createBasicInfo(\n          formatData(values),\n          userId => {\n            refetch();\n            context.alert.success('Uspješno sačuvano.');\n            setIsDisabled(true);\n\n            if (close) {\n              const overviewPathname = context.navigation.location.pathname.split('/').slice(0, 3).join('/');\n              context.navigation.navigate(overviewPathname);\n            }\n\n            context.navigation.navigate(`/hr/employees/details/${userId}/basic-info`, {state: {scroll: true}});\n          },\n          () => {\n            context.alert.error('Greška. Promjene nisu sačuvane.');\n          },\n        );\n      } else {\n        if (isUpdating) return;\n\n        updateBasicInfo(\n          formatData(values),\n          () => {\n            refetch();\n            context.alert.success('Uspješno sačuvano.');\n            setIsDisabled(true);\n\n            if (close) {\n              const overviewPathname = context.navigation.location.pathname.split('/').slice(0, 3).join('/');\n              context.navigation.navigate(overviewPathname);\n            }\n          },\n          () => {\n            context.alert.error('Greška. Promjene nisu sačuvane.');\n          },\n        );\n      }\n    }\n  };\n\n  useEffect(() => {\n    refetch();\n    // If new employee, enable the form immediately\n    if (context.navigation.location.pathname.split('/')[3] === 'new-employee') {\n      setIsDisabled(false);\n    }\n  }, [context.navigation.location]);\n\n  useEffect(() => {\n    if (profileData) {\n      reset({\n        ...profileData,\n        nationality: countryOptions.find((opt: DropdownDataString) => opt.id === profileData.nationality),\n        citizenship: countryOptions.find((opt: DropdownDataString) => opt.id === profileData.citizenship),\n        date_of_birth: parseToDate(profileData?.date_of_birth),\n        date_of_becoming_judge: parseToDate(profileData?.date_of_becoming_judge),\n        marital_status: maritalOptions.find(opt => opt.id === profileData?.marital_status),\n        country_of_birth: countryOptions.find((opt: DropdownDataString) => opt.id === profileData?.country_of_birth),\n        city_of_birth: profileData?.city_of_birth,\n        housing_done: booleanToYesOrNo(profileData?.housing_done),\n        single_parent: booleanToYesOrNo(profileData?.single_parent),\n        gender: genderOptions.find((opt: DropdownDataString) => opt.id === profileData?.gender),\n        revisor_role: profileData?.revisor_role,\n        national_minority: nationalMinorities.find(\n          (opt: DropdownDataString) => opt.id === profileData?.national_minority,\n        ),\n        official_personal_document_issuer: cityData.find(\n          (opt: DropdownDataString) => opt.id === profileData?.official_personal_document_issuer,\n        ),\n        contract: {\n          organization_unit_id: profileData?.contract?.organization_unit,\n          department_id: profileData?.contract?.department,\n          job_position_in_organization_unit_id: profileData?.contract?.job_position_in_organization_unit,\n          contract_type_id: profileData?.contract?.contract_type,\n          date_of_end: parseToDate(profileData?.contract?.date_of_end),\n          date_of_start: parseToDate(profileData?.contract?.date_of_start),\n          date_of_eligibility: parseToDate(profileData?.contract?.date_of_eligibility),\n          user_profile_id: profileData?.contract?.user_profile,\n          active: profileData?.contract?.active,\n        },\n      });\n    }\n  }, [profileData]);\n\n  // When coming from the job tender applications, when changing an external candidates status to accepted, it leads here to create it in the system, basically becoming an internal candidate in order to be accepted\n  useEffect(() => {\n    if (!context.navigation.location.state) return;\n\n    reset({\n      ...initialValues,\n      ...context.navigation.location.state.user,\n    });\n  }, [context.navigation.location.state]);\n\n  useEffect(() => {\n    if (contract.organization_unit_id) {\n      setValue('contract.department_id', null);\n    }\n  }, [contract?.organization_unit_id]);\n\n  return (\n    <FormContainer>\n      <FormWrapper>\n        <TextWrapper>\n          <Typography content=\"PERSONALNI PODACI\" variant=\"bodyMedium\" />\n        </TextWrapper>\n        <FormRow>\n          <FormColumn>\n            <FormItem>\n              <Input\n                {...register('first_name', {required: 'Ovo polje je obavezno'})}\n                label=\"IME:\"\n                disabled={isDisabled}\n                error={errors.first_name?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('last_name', {required: 'Ovo polje je obavezno'})}\n                label=\"PREZIME\"\n                disabled={isDisabled}\n                error={errors.last_name?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"gender\"\n                control={control}\n                rules={{required: 'Ovo polje je obavezno'}}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"POL:\"\n                    value={value as any}\n                    options={genderOptions}\n                    isDisabled={isDisabled}\n                    onChange={onChange}\n                    error={errors.gender?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('official_personal_id', {required: 'Ovo polje je obavezno'})}\n                label=\"JMBG:\"\n                disabled={isDisabled}\n                error={errors.official_personal_id?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('official_personal_document_number', {required: 'Ovo polje je obavezno'})}\n                label=\"BROJ LIČNE KARTE:\"\n                disabled={isDisabled}\n                error={errors.official_personal_document_number?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"official_personal_document_issuer\"\n                control={control}\n                rules={{required: 'Ovo polje je obavezno'}}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"PJ LIČNE KARTE:\"\n                    value={value as any}\n                    options={cityData}\n                    isDisabled={isDisabled}\n                    onChange={onChange}\n                    error={errors.official_personal_document_issuer?.message}\n                    isSearchable\n                  />\n                )}\n              />\n            </FormItem>\n          </FormColumn>\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"date_of_birth\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    name={name}\n                    selected={value ? new Date(value) : null}\n                    onChange={onChange}\n                    label=\"DATUM ROĐENJA:\"\n                    disabled={isDisabled}\n                    error={errors.date_of_birth?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"country_of_birth\"\n                control={control}\n                rules={{required: 'Ovo polje je obavezno'}}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"DRŽAVA ROĐENJA:\"\n                    onChange={onChange}\n                    value={value as any}\n                    isDisabled={isDisabled}\n                    options={countryOptions}\n                    error={errors.country_of_birth?.message}\n                    isSearchable\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"citizenship\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"DRŽAVLJANSTVO:\"\n                    value={value as any}\n                    options={countryOptions}\n                    isDisabled={isDisabled}\n                    error={errors.nationality?.message}\n                    isSearchable\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Input {...register('city_of_birth')} label=\"OPŠTINA ROĐENJA:\" disabled={isDisabled} />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"national_minority\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"PRIPADNOST NACIONALNOJ MANJINI:\"\n                    onChange={onChange}\n                    noOptionsText=\"Prazno\"\n                    value={value as any}\n                    options={nationalMinorities}\n                    isDisabled={isDisabled}\n                    error={errors.national_minority?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('address', {required: 'Ovo polje je obavezno'})}\n                label=\"ADRESA STANOVANJA:\"\n                disabled={isDisabled}\n                error={errors.address?.message}\n              />\n            </FormItem>\n          </FormColumn>\n          <FormColumn>\n            <FormItem>\n              <Input\n                {...register('father_name', {required: 'Ovo polje je obavezno'})}\n                label=\"IME OCA:\"\n                disabled={isDisabled}\n                error={errors.father_name?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('mother_name', {required: 'Ovo polje je obavezno'})}\n                label=\"IME MAJKE:\"\n                disabled={isDisabled}\n                error={errors.mother_name?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('birth_last_name')}\n                label=\"PREZIME PO ROĐENJU:\"\n                disabled={isDisabled}\n                error={errors.birth_last_name?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"nationality\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"NACIONALNOST:\"\n                    value={value as any}\n                    onChange={onChange}\n                    options={countryOptions}\n                    isDisabled={isDisabled}\n                    error={errors.nationality?.message}\n                    isSearchable\n                  />\n                )}\n              />\n            </FormItem>\n          </FormColumn>\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"marital_status\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"BRAČNO STANJE:\"\n                    value={value as any}\n                    onChange={onChange}\n                    options={maritalOptions}\n                    isDisabled={isDisabled}\n                    error={errors.marital_status?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"single_parent\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"SAMOHRANI RODITELJ:\"\n                    value={value as any}\n                    options={yesOrNoOptionsString as any}\n                    isDisabled={isDisabled}\n                    error={errors.single_parent?.message}\n                    onChange={onChange}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"housing_done\"\n                control={control}\n                rules={{required: 'Ovo polje je obavezno'}}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"RIJEŠENO STAMBENO PITANJE:\"\n                    value={value as any}\n                    options={yesOrNoOptionsString as any}\n                    isDisabled={isDisabled}\n                    onChange={onChange}\n                    error={errors.housing_done?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('housing_description')}\n                label=\"OPIS STAMBENOG PITANJA:\"\n                disabled={isDisabled}\n                error={errors.housing_description?.message}\n              />\n            </FormItem>\n          </FormColumn>\n        </FormRow>\n      </FormWrapper>\n      <FormWrapper>\n        <TextWrapper>\n          <Typography content=\"PODACI O ZAPOSLENJU\" variant=\"bodyMedium\" />\n        </TextWrapper>\n        <FormRow>\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"contract.organization_unit_id\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"ORGANIZACIONA JEDINICA:\"\n                    isDisabled={isDisabled}\n                    value={value as any}\n                    options={organizationUnitsList as any}\n                    error={errors.contract?.organization_unit_id?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"contract.department_id\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"ODJELJENJE:\"\n                    value={value as any}\n                    onChange={onChange}\n                    noOptionsText=\"Prazno\"\n                    options={departmentOptions as any}\n                    isDisabled={isDisabled || !contract?.organization_unit_id}\n                    error={errors.contract?.department_id?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"contract.job_position_in_organization_unit_id\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"RADNO MJESTO:\"\n                    value={value as any}\n                    noOptionsText=\"Prazno\"\n                    options={positions as any}\n                    isDisabled={\n                      isDisabled ||\n                      !contract?.organization_unit_id ||\n                      !contract?.department_id ||\n                      positions.length === 0 ||\n                      !(\n                        contract?.contract_type_id?.title &&\n                        contractPositions.indexOf(contract?.contract_type_id?.title) > -1\n                      )\n                    }\n                    error={errors.contract?.job_position_in_organization_unit_id?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <div>\n              <Controller\n                name=\"revisor_role\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Switch\n                    name={name}\n                    checked={value}\n                    onChange={onChange}\n                    content={<Typography variant=\"bodyMedium\" content=\"REVIZOR:\" style={{marginLeft: 10}} />}\n                    disabled={isDisabled}\n                  />\n                )}\n              />\n            </div>\n          </FormColumn>\n\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"contract.contract_type_id\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"VRSTA UGOVORA:\"\n                    onChange={onChange}\n                    value={value as any}\n                    noOptionsText=\"Prazno\"\n                    options={contractTypes}\n                    isDisabled={isDisabled}\n                    error={errors.contract?.contract_type_id?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"contract.date_of_eligibility\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    name={name}\n                    selected={value ? new Date(value) : ''}\n                    onChange={onChange}\n                    label=\"DATUM IZBORA:\"\n                    disabled={isDisabled}\n                    error={errors.contract?.date_of_eligibility?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <FormFileUpload\n                onUpload={onFileUpload}\n                variant=\"secondary\"\n                buttonVariant=\"primary\"\n                buttonText=\"UČITAJ\"\n                buttonSize={'sm'}\n                icon={<></>}\n                note={<Typography variant=\"bodySmall\" content=\"Ugovor o radu\" />}\n                disabled={isDisabled}\n              />\n            </FormItem>\n          </FormColumn>\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"contract.date_of_start\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    name={name}\n                    label=\"POČETAK RADNOG ODNOSA:\"\n                    selected={value ? new Date(value) : ''}\n                    onChange={onChange}\n                    disabled={isDisabled}\n                    error={errors.contract?.date_of_start?.message}\n                  />\n                )}\n              />\n            </FormItem>\n\n            <FormItem>\n              <Controller\n                name=\"contract.date_of_end\"\n                rules={{\n                  validate: validateDateOfEnd,\n                }}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    name={name}\n                    label=\"KRAJ RADNOG ODNOSA:\"\n                    selected={value ? new Date(value) : ''}\n                    onChange={onChange}\n                    disabled={isDisabled}\n                    error={errors.contract?.date_of_end?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Button\n                size=\"lg\"\n                content={<Typography variant=\"bodyMedium\" content=\"Prekid radnog odnosa\" />}\n                disabled={!contract}\n              />\n            </FormItem>\n          </FormColumn>\n        </FormRow>\n      </FormWrapper>\n\n      {isNew && (\n        <FormWrapper>\n          <TextWrapper>\n            <Typography content=\"KORISNIČKI NALOG\" variant=\"bodyMedium\" />\n          </TextWrapper>\n          <FormRow style={{paddingBottom: 0}}>\n            <FormColumn style={{flexBasis: 'calc(50% + 23px)'}}>\n              <FormItem>\n                {/* TODO value prop needs to be number also */}\n                <Input {...register('id')} label=\"SISTEMSKI ID:\" disabled={true} />\n              </FormItem>\n            </FormColumn>\n          </FormRow>\n          <FormRow style={{padding: 0}}>\n            <FormColumn>\n              <FormItem>\n                <Input\n                  {...register('email', {required: 'Ovo polje je obavezno'})}\n                  label=\"E-MAIL:\"\n                  disabled={isDisabled}\n                  error={errors.email?.message}\n                />\n              </FormItem>\n              <FormItem>\n                <Input\n                  {...register('password', {required: 'Ovo polje je obavezno'})}\n                  label=\"LOZINKA:\"\n                  type=\"password\"\n                  placeholder=\"******\"\n                  disabled={isDisabled}\n                  error={errors?.password?.message}\n                />\n              </FormItem>\n              <FormItem>\n                <Input\n                  {...register('phone', {required: 'Ovo polje je obavezno'})}\n                  label=\"BROJ TELEFONA:\"\n                  disabled={isDisabled}\n                  error={errors?.phone?.message}\n                />\n              </FormItem>\n            </FormColumn>\n            <FormColumn>\n              <FormItem>\n                <Input {...register('secondary_email')} label=\"PRIVATNI E-MAIL:\" disabled={isDisabled} />\n              </FormItem>\n              <FormItem>\n                <Controller\n                  name=\"pin\"\n                  control={control}\n                  render={({field: {value, name}}) => (\n                    <Input\n                      onChange={e => {\n                        if (e.target.value.match(/^(0|[1-9]\\d*)(\\.\\d+)?$/)) {\n                          setValue('pin', e.target.value);\n                        }\n                      }}\n                      value={value}\n                      name={name}\n                      maxLength={4}\n                      label=\"PIN:\"\n                      disabled={isDisabled}\n                      error={errors?.pin?.message}\n                    />\n                  )}></Controller>\n              </FormItem>\n            </FormColumn>\n          </FormRow>\n        </FormWrapper>\n      )}\n\n      <FormFooter>\n        <Controls>\n          {isDisabled ? (\n            <Button content=\"Uredi\" variant=\"secondary\" onClick={() => setIsDisabled(false)} />\n          ) : !isNew ? (\n            <>\n              <Button\n                content=\"Sačuvaj i zatvori\"\n                variant=\"secondary\"\n                onClick={() => handleSubmit((data: UserProfileBasicInfoFormValues) => handleSave(data, true))()}\n                isLoading={isCreating}\n              />\n              <Button\n                content=\"Sačuvaj i nastavi\"\n                variant=\"primary\"\n                onClick={() => handleSubmit((data: UserProfileBasicInfoFormValues) => handleSave(data, false))()}\n                isLoading={isCreating}\n              />\n            </>\n          ) : (\n            <Button\n              content=\"Sačuvaj\"\n              variant=\"primary\"\n              onClick={() => {\n                handleSubmit((data: UserProfileBasicInfoFormValues) => handleSave(data, false))();\n              }}\n              isLoading={isUpdating}\n            />\n          )}\n        </Controls>\n      </FormFooter>\n    </FormContainer>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/basicInfo/constants.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserProfileBasicInfo' is defined but never used.","line":1,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {UserProfileBasicInfo, UserProfileBasicInfoFormValues} from '../../../types/graphql/userProfiles';\n\nexport const initialValues: UserProfileBasicInfoFormValues = {\n  id: 0,\n  first_name: '',\n  last_name: '',\n  date_of_birth: null,\n  birth_last_name: '',\n  country_of_birth: '',\n  city_of_birth: '',\n  nationality: null,\n  citizenship: null,\n  address: '',\n  father_name: '',\n  mother_name: '',\n  mother_birth_last_name: '',\n  official_personal_id: '',\n  official_personal_document_number: '',\n  official_personal_document_issuer: null,\n  gender: null,\n  single_parent: null,\n  housing_done: null,\n  revisor_role: false,\n  housing_description: '',\n  marital_status: null,\n  date_of_becoming_judge: null,\n  email: '',\n  phone: '',\n  national_minority: null,\n  secondary_email: '',\n  pin: '',\n  password: '',\n  middle_name: '',\n  role_id: 0,\n  contract: {\n    contract_type_id: null,\n    organization_unit_id: null,\n    department_id: null,\n    date_of_start: null,\n    date_of_end: null,\n    date_of_eligibility: null,\n    file_id: null,\n    job_position_in_organization_unit_id: null,\n    user_profile_id: null,\n    active: true,\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/basicInfo/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/basicInfo/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[118,121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[118,121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {MicroserviceProps} from '../../../types/micro-service-props';\n\nexport interface BasicInfoPageProps {\n  data?: any[];\n  context: MicroserviceProps;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/basicInfo/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[91,94],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[91,94],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[146,149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[146,149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yesOrNoOptionsString} from '../../../constants';\n\nexport const formatData = (data: any) => {\n  const isNew = !data?.id;\n\n  const payload: any = {\n    id: data?.id,\n    first_name: data?.first_name,\n    last_name: data?.last_name,\n    birth_last_name: data?.birth_last_name,\n    address: data?.address,\n    father_name: data?.father_name,\n    mother_name: data?.mother_name,\n    mother_birth_last_name: data?.mother_birth_last_name,\n    official_personal_id: data?.official_personal_id,\n    official_personal_document_number: data?.official_personal_document_number,\n    housing_description: data?.housing_description,\n    middle_name: data?.middle_name,\n    date_of_birth: data?.date_of_birth,\n    country_of_birth: data?.country_of_birth?.id,\n    city_of_birth: data?.city_of_birth,\n    nationality: data?.nationality?.id,\n    citizenship: data?.citizenship?.id,\n    gender: data?.gender?.id,\n    single_parent: data?.single_parent.id === 'Da' ? true : false,\n    housing_done: data?.housing_done.id === 'Da' ? true : false,\n    revisor_role: data?.revisor_role,\n    marital_status: data?.marital_status?.id,\n    date_of_taking_oath: new Date(),\n    national_minority: data?.national_minority?.id,\n    official_personal_document_issuer: data?.official_personal_document_issuer?.id,\n    contract: {\n      organization_unit_id: data?.contract?.organization_unit_id?.id || null,\n      organization_unit_department_id: data?.contract.department_id?.id || null,\n      job_position_in_organization_unit_id: data?.contract?.job_position_in_organization_unit_id?.id || null,\n      contract_type_id: data?.contract?.contract_type_id?.id || null,\n      date_of_end: data?.contract?.date_of_end ? data?.contract?.date_of_end : null,\n      date_of_start: data?.contract?.date_of_start,\n      user_profile_id: data?.id,\n      active: data?.contract?.active === false ? false : true,\n      date_of_eligibility: data?.contract.date_of_eligibility,\n    },\n  };\n\n  if (isNew) {\n    delete payload.id;\n    payload.password = data?.password;\n    payload.email = data?.email;\n    payload.pin = data?.pin;\n    payload.phone = data?.phone;\n    payload.secondary_email = data?.secondary_email;\n    payload.role_id = 2;\n  }\n\n  return payload;\n};\n\nexport const booleanToYesOrNo = (value: boolean) => {\n  return value !== null ? (value ? yesOrNoOptionsString[0] : yesOrNoOptionsString[1]) : null;\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/confirmations/confirmations.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ReactNode' is defined but never used.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1023,1026],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1023,1026],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1861,1864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1861,1864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2525,2528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2525,2528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2573,2576],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2573,2576],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Button, Dropdown, EditIconTwo, Table, TableHead, Theme, TrashIcon, Typography} from 'client-library';\nimport React, {ReactNode, useMemo, useState} from 'react';\nimport {ConfirmationsModal} from '../../../components/confirmationsModal/confirmationsModal';\nimport useResolutionDelete from '../../../services/graphql/userProfile/resolution/useResolutionDelete';\nimport useResolutionOverview from '../../../services/graphql/userProfile/resolution/useResolutionOverview';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {UserProfileResolutionItem} from '../../../types/graphql/userProfileGetResolution';\nimport {MicroserviceProps} from '../../../types/micro-service-props';\nimport {parseDate} from '../../../utils/dateUtils';\nimport {Container, TableHeader, YearWrapper} from './styles';\nimport {yearsForDropdownFilter} from '../../../utils/constants';\n\nconst tableHeads: TableHead[] = [\n  {\n    title: 'Vrsta',\n    accessor: 'resolution_type',\n    type: 'custom',\n    renderContents: (item: any) => {\n      return <Typography variant=\"bodyMedium\" content={item.title} />;\n    },\n  },\n  {\n    title: 'Datum izdavanja',\n    accessor: 'date_of_start',\n    type: 'custom',\n    renderContents: (date_of_start: string) => <Typography content={date_of_start ? parseDate(date_of_start) : ''} />,\n  },\n  {title: 'Svrha', accessor: 'resolution_purpose', type: 'text'},\n  {title: 'Datoteka', accessor: 'file_id', type: 'text'},\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n\nexport const ConfirmationsPage: React.FC<{context: MicroserviceProps}> = ({context}) => {\n  const years = yearsForDropdownFilter();\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n  const [form, setForm] = useState<any>();\n  const userProfileID = context.navigation.location.pathname.split('/')[4];\n  const {data, fetch, loading} = useResolutionOverview(userProfileID);\n  const tableData = data;\n  const {mutate} = useResolutionDelete();\n\n  const selectedItem = useMemo(\n    () => tableData?.find((item: UserProfileResolutionItem) => item.id === selectedItemId),\n    [selectedItemId, tableData],\n  );\n\n  const filteredTableData = useMemo(() => {\n    if (form?.year?.id) {\n      return tableData?.filter((item: UserProfileResolutionItem) => item.date_of_start.includes(form.year.id));\n    }\n    return tableData;\n  }, [tableData, form?.year?.id]);\n\n  const handleChange = (value: any, name: string) => {\n    setForm((prevState: any) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const handleEdit = (item: UserProfileResolutionItem) => {\n    setSelectedItemId(item.id);\n    setShowModal(true);\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedItemId(id);\n  };\n\n  const handleDelete = () => {\n    mutate(\n      selectedItemId,\n      () => {\n        fetch();\n        context.alert.success('Uspješno obrisano.');\n        setShowDeleteModal(false);\n        setSelectedItemId(0);\n      },\n      () => {\n        context.alert.error('Greška. Brisanje nije moguće.');\n      },\n    );\n    setShowDeleteModal(false);\n    setSelectedItemId(0);\n  };\n\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = (refetch: boolean) => {\n    setShowModal(false);\n    setSelectedItemId(0);\n    refetch && fetch();\n  };\n\n  return (\n    <Container>\n      <TableHeader>\n        <YearWrapper>\n          <Dropdown\n            label={<Typography variant=\"bodySmall\" content=\"GODINA:\" />}\n            options={years}\n            name=\"year\"\n            value={form?.year || null}\n            onChange={handleChange}\n            placeholder=\"Odaberite godinu:\"\n          />\n        </YearWrapper>\n        <div>\n          <Button\n            variant=\"secondary\"\n            content={<Typography variant=\"bodyMedium\" content=\"Dodajte svrhu\" />}\n            onClick={handleAdd}\n          />\n        </div>\n      </TableHeader>\n\n      <div>\n        <Table\n          tableHeads={tableHeads}\n          data={filteredTableData || []}\n          isLoading={loading}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n      </div>\n\n      <ConfirmationsModal\n        open={showModal}\n        onClose={refetch => handleCloseModal(refetch)}\n        selectedItem={selectedItem}\n        userProfileId={userProfileID}\n        key={selectedItem ? selectedItem.id : 'new'}\n        alert={context.alert}\n      />\n\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </Container>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/confirmations/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/confirmations/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[60,63],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[60,63],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[103,106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[103,106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[151,154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[151,154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ConfirmationsModalProps {\n  selectedItem?: any;\n  open: boolean;\n  onClose: (action?: any) => void;\n  userProfileId: number;\n  alert: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/education/education.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/education/styles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Theme' is defined but never used.","line":2,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import styled from 'styled-components';\nimport {Theme, Table} from 'client-library';\n\nexport const EducationContainer = styled.div`\n  padding: 20px 30px 0px 30px;\n  display: grid;\n  overflow-y: auto;\n  height: calc(100vh - 320px);\n`;\n\nexport const TableContainer = styled(Table)`\n  padding-bottom: 22px;\n`;\n\nexport const AlertWrapper = styled.div`\n  position: fixed;\n  bottom: 75px;\n  right: 23px;\n  width: 40%;\n`;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/education/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[154,157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[154,157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[241,244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[241,244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[256,259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[256,259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[276,279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[276,279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[338,341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[338,341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[372,375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[372,375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[493,496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[493,496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[510,513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[510,513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[530,533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[530,533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {ReactElement} from 'react';\nimport {MicroserviceProps} from '../../../types/micro-service-props';\n\nexport interface EducationPageProps {\n  data?: any[];\n  context: MicroserviceProps;\n}\n\nexport interface ModalProps {\n  selectedItem?: any;\n  alert?: any;\n  navigation?: any;\n  open: boolean;\n  onClose: () => void;\n  dropdownData?: any[];\n  handleDelete?: (action?: any) => void;\n  customContent?: ReactElement;\n  refetchList?: () => void;\n}\n\nexport interface TableProps {\n  languages?: any[];\n  alert?: any;\n  navigation?: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/evaluations/evaluations.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1040,1043],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1040,1043],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1285,1288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1285,1288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useMemo, useState} from 'react';\nimport {Typography, Button, Table, TableHead, TrashIcon, Theme, EditIconTwo} from 'client-library';\nimport {EvaluationPageProps} from './types';\nimport {Container} from './styles';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {UserProfileEvaluation} from '../../../types/graphql/userProfileGetEvaluations';\nimport {EvaluationModal} from '../../../components/evaluationModal/evaluationModal';\nimport useEvaluationOverview from '../../../services/graphql/userProfile/evaluation/useEvaluationOverview';\nimport useEvaluationDelete from '../../../services/graphql/userProfile/evaluation/useEvaluationDelete';\nimport useSettingsDropdownOverview from '../../../services/graphql/settingsDropdown/useSettingsDropdownOverview';\nimport {parseDate} from '../../../utils/dateUtils';\n\nconst tableHeads: TableHead[] = [\n  {title: 'Br.', accessor: 'id', type: 'text'},\n  {\n    title: 'Godina',\n    accessor: 'date_of_evaluation',\n    type: 'custom',\n    renderContents: (date: any) => <Typography variant=\"bodyMedium\" content={parseDate(date)} />,\n  },\n  {title: 'Ocjena', accessor: 'score', type: 'text'},\n  {\n    title: 'Pravosnažnost',\n    accessor: 'is_relevant',\n    type: 'custom',\n    renderContents: (is_relevant: any) => <Typography variant=\"bodyMedium\" content={is_relevant ? 'Da' : 'Ne'} />,\n  },\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n\nexport const EvaluationsPage: React.FC<EvaluationPageProps> = ({context}) => {\n  const userProfileID = context.navigation.location.pathname.split('/')[4];\n  const {data: userEvaluationData, refetchData} = useEvaluationOverview(userProfileID);\n  const {data: evaluationTypes, loading} = useSettingsDropdownOverview({entity: 'evaluation_types'});\n\n  const [showModal, setShowModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = useState<number>(0);\n\n  const selectedItem = useMemo(() => {\n    return userEvaluationData?.find((item: UserProfileEvaluation) => item.id === selectedItemId);\n  }, [selectedItemId]);\n\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const {mutate} = useEvaluationDelete(\n    () => {\n      refetchData();\n      context.alert.success('Uspješno obrisano.');\n    },\n    () => {\n      context.alert.error('Greška. Brisanje nije moguće.');\n    },\n  );\n\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedItemId(id);\n  };\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const handleEdit = (item: UserProfileEvaluation) => {\n    setSelectedItemId(item.id as number);\n    setShowModal(true);\n  };\n\n  const closeModal = () => {\n    setShowModal(false);\n    setSelectedItemId(0);\n  };\n\n  const handleDelete = () => {\n    mutate(selectedItemId);\n    setShowDeleteModal(false);\n    setSelectedItemId(0);\n  };\n\n  return (\n    <Container>\n      <span>\n        <Button\n          variant=\"secondary\"\n          content={<Typography variant=\"bodyMedium\" content=\"Dodajte ličnu ocjenu\" />}\n          onClick={handleAdd}\n        />\n      </span>\n      <div>\n        <Table\n          tableHeads={tableHeads}\n          data={userEvaluationData || []}\n          isLoading={loading}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n      </div>\n      {showModal && (\n        <EvaluationModal\n          alert={context.alert}\n          refetchList={refetchData}\n          open={showModal}\n          onClose={closeModal}\n          selectedItem={selectedItem}\n          userProfileId={userProfileID}\n          evaluationTypes={evaluationTypes || []}\n        />\n      )}\n\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </Container>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/evaluations/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/evaluations/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[339,342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[339,342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[388,391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[388,391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[432,435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[432,435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[447,450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[447,450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {SettingsDropdown} from '../../../types/graphql/settingsDropdownType';\nimport {MicroserviceProps} from '../../../types/micro-service-props';\n\nexport interface EvaluationPageProps {\n  context: MicroserviceProps;\n}\n\nexport type YearType = {\n  id: number | string;\n  title: string;\n};\n\nexport interface EvaluationModalProps {\n  alert: any;\n  refetchList: () => void;\n  selectedItem?: any;\n  open: boolean;\n  onClose: (refetch?: any, message?: any) => void;\n  userProfileId?: number;\n  evaluationTypes: SettingsDropdown[];\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/experience/constants.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[322,325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[322,325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[644,647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[644,647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[836,839],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[836,839],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1053,1056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1053,1056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1288,1291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1288,1291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {TableHead, Typography} from 'client-library';\nimport {parseDate} from '../../../utils/dateUtils';\n\nexport const tableHeads: TableHead[] = [\n  {title: 'Br.', accessor: 'id', type: 'text'},\n  {\n    title: 'Sudstvo',\n    accessor: 'relevant',\n    type: 'custom',\n    renderContents: (item: any) => {\n      return item === 'hide' ? <></> : <Typography variant=\"bodyMedium\" content={item ? 'Da' : 'Ne'} />;\n    },\n  },\n  {\n    title: 'Organizacija',\n    accessor: 'organization_unit',\n    type: 'custom',\n  },\n  {\n    title: 'Početak',\n    accessor: 'date_of_start',\n    type: 'custom',\n    renderContents: (item: any) => (item ? <Typography variant=\"bodyMedium\" content={parseDate(item)} /> : <></>),\n  },\n  {\n    title: 'Kraj',\n    accessor: 'date_of_end',\n    type: 'custom',\n    renderContents: (item: any) => (item ? <Typography variant=\"bodyMedium\" content={parseDate(item)} /> : <></>),\n  },\n  {\n    title: 'Radni staž',\n    accessor: 'amount_of_insured_experience',\n    type: 'custom',\n    renderContents: (_, row: any) => {\n      return <Typography variant=\"bodyMedium\" content={row.amount_of_insured_experience} />;\n    },\n  },\n  {\n    title: 'Radno iskustvo',\n    accessor: 'amount_of_experience',\n    type: 'custom',\n    renderContents: (_, row: any) => <Typography variant=\"bodyMedium\" content={row.amount_of_experience} />,\n  },\n  {title: 'Dosije', accessor: 'reference_file_id', type: 'text'},\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/experience/experience.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TableHead' is defined but never used.","line":2,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1263,1266],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1263,1266],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1970,1973],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1970,1973],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4512,4515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4512,4515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4763,4766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4763,4766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useMemo, useState} from 'react';\nimport {Typography, Button, Table, TableHead, EditIconTwo, TrashIcon, Theme} from 'client-library';\nimport {ExperiencePageProps, UnitType} from './types';\nimport {ExperienceModal} from '../../../components/experienceModal/experienceModal';\nimport {Container} from './styles';\nimport useOrganizationUnits from '../../../services/graphql/organizationUnits/useOrganizationUnits';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {UserProfileExperience} from '../../../types/graphql/userProfileGetExperienceTypes';\nimport useExperience from '../../../services/graphql/userProfile/experience/useExperienceOverview';\nimport useExperienceDelete from '../../../services/graphql/userProfile/experience/useExperienceDelete';\nimport {tableHeads} from './constants';\n\nexport const ExperiencePage: React.FC<ExperiencePageProps> = ({context}) => {\n  const userProfileID = context.navigation.location.pathname.split('/')[4];\n  const {experienceData, refetchData, loading} = useExperience(userProfileID);\n  const {organizationUnits} = useOrganizationUnits(context);\n\n  const tableData = useMemo(() => {\n    let totalInsuredExperience = 0;\n    let totalExperience = 0;\n\n    experienceData?.forEach((item: any) => {\n      totalExperience += item.amount_of_experience;\n      totalInsuredExperience += item.amount_of_insured_experience;\n    });\n\n    return (\n      experienceData && [\n        ...experienceData,\n        {\n          id: '',\n          relevant: 'hide',\n          organization_unit: '',\n          date_of_start: '',\n          date_of_end: '',\n          amount_of_insured_experience: (\n            <Typography variant=\"bodyMedium\" style={{fontWeight: 600}} content={totalInsuredExperience} />\n          ),\n          amount_of_experience: <Typography variant=\"bodyMedium\" style={{fontWeight: 600}} content={totalExperience} />,\n          reference_file_id: '',\n          TABLE_ACTIONS: '',\n        } as any,\n      ]\n    );\n  }, [experienceData]);\n\n  const [showModal, setShowModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n\n  const selectedItem = useMemo(() => {\n    return tableData?.find((item: UserProfileExperience) => item.id === selectedItemId);\n  }, [selectedItemId]);\n\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const {mutate} = useExperienceDelete(\n    () => {\n      refetchData();\n      context.alert.success('Uspješno obrisano.');\n    },\n    () => {\n      context.alert.error('Greška. Brisanje nije moguće.');\n    },\n  );\n\n  const handleEdit = (item: UserProfileExperience) => {\n    setSelectedItemId(item.id);\n    setShowModal(true);\n  };\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedItemId(id);\n  };\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const closeModal = () => {\n    setShowModal(false);\n    setSelectedItemId(0);\n  };\n\n  const handleDelete = () => {\n    mutate(selectedItemId);\n    setShowDeleteModal(false);\n    setSelectedItemId(0);\n  };\n\n  const organizationUnitsList = useMemo(() => {\n    return organizationUnits\n      .filter(i => !i.parent_id)\n      .map(unit => {\n        return {id: unit.id, title: unit.title};\n      });\n  }, [organizationUnits]);\n\n  const updatedTableHeads = useMemo(() => {\n    return [\n      ...tableHeads.slice(0, 2),\n      {\n        ...tableHeads[2],\n        renderContents: (organization_unit: string, row: UserProfileExperience) => {\n          return (\n            <Typography\n              variant=\"bodyMedium\"\n              content={\n                organization_unit\n                  ? organization_unit\n                  : organizationUnits.find(orgUnit => orgUnit.id === row.organization_unit_id)?.title || ''\n              }\n            />\n          );\n        },\n      },\n      ...tableHeads.slice(3),\n    ];\n  }, [organizationUnits, tableHeads]);\n\n  return (\n    <Container>\n      <span>\n        <Button\n          variant=\"secondary\"\n          content={<Typography variant=\"bodyMedium\" content=\"Dodajte novo zaposlenje\" />}\n          onClick={handleAdd}\n        />\n      </span>\n      <div>\n        <Table\n          tableHeads={updatedTableHeads}\n          data={tableData || []}\n          isLoading={loading}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n              shouldRender: item => item.id !== ('' as any),\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n              shouldRender: item => item.id !== ('' as any),\n            },\n          ]}\n        />\n      </div>\n      <ExperienceModal\n        alert={context.alert}\n        refetchList={refetchData}\n        open={showModal}\n        onClose={closeModal}\n        selectedItem={selectedItem}\n        units={organizationUnitsList as UnitType[]}\n        userProfileId={userProfileID}\n      />\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </Container>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/experience/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/experience/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[119,122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[119,122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[268,271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[268,271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[317,320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[317,320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[361,364],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[361,364],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[376,379],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[376,379],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {MicroserviceProps} from '../../../types/micro-service-props';\n\nexport interface ExperiencePageProps {\n  data?: any[];\n  context: MicroserviceProps;\n}\n\nexport type UnitType = {\n  id: number;\n  title: string;\n};\n\nexport interface ExperienceModalProps {\n  alert: any;\n  refetchList: () => void;\n  selectedItem?: any;\n  open: boolean;\n  onClose: (refetch?: any, message?: any) => void;\n  units: UnitType[];\n  userProfileId?: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/experience/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[96,99],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[96,99],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {parseDateForBackend} from '../../../utils/dateUtils';\n\nexport const formatData = (data: any, newExperience?: boolean) => {\n  const payload = {\n    ...data,\n    relevant: data?.relevant?.id === 'Da' ? true : false,\n    organization_unit_id: data?.relevant?.id === 'Da' ? data?.organization_unit_id?.id : 0,\n    organization_unit: data.organization_unit,\n    date_of_start: parseDateForBackend(data?.date_of_start),\n    date_of_end: parseDateForBackend(data?.date_of_end),\n    date_of_signature: data?.date_of_signature ? data?.date_of_signature : new Date(),\n    amount_of_experience: data?.amount_of_experience,\n    amount_of_insured_experience:\n      Number(data?.amount_of_insured_experience) >= data?.amount_of_experience\n        ? data?.amount_of_experience\n        : Number(data?.amount_of_insured_experience),\n    reference_file_id: data?.reference_file_id,\n  };\n\n  if (newExperience) {\n    delete payload.id;\n  }\n\n  delete payload.selectedOrganizationUnit;\n  delete payload.created_at;\n  delete payload.updated_at;\n\n  return payload;\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/family/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/family/family.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1513,1516],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1513,1516],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useMemo, useState} from 'react';\nimport {Container} from './styles';\nimport {Typography, Button, Table, EditIcon, TrashIcon, Theme} from 'client-library';\nimport {FamilyPageProps} from './types';\nimport {FamilyMemberModal} from '../../../components/familyMemberModal/familyMemberModal';\nimport {tableHeads} from './constants';\nimport {UserProfileFamily} from '../../../types/graphql/userProfileGetFamilyTypes';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport useFamilyOverview from '../../../services/graphql/userProfile/family/useFamilyOverview';\nimport useFamilyDelete from '../../../services/graphql/userProfile/family/useFamilyDelete';\n\nexport const FamilyPage: React.FC<FamilyPageProps> = ({context}) => {\n  const userProfileID = context.navigation.location.pathname.split('/')[4];\n  const {familyData, refetchData, loading} = useFamilyOverview(userProfileID);\n  const [showModal, setShowModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n\n  const selectedItem = useMemo(() => {\n    return familyData?.find((item: UserProfileFamily) => item.id === selectedItemId);\n  }, [selectedItemId]);\n\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const {mutate, success, error} = useFamilyDelete(() => {\n    if (success) {\n      refetchData();\n      context.alert.success('Uspješno obrisano.');\n    } else if (error) {\n      context.alert.error('Greška. Brisanje nije moguće.');\n    }\n  });\n\n  const handleEdit = (item: any) => {\n    setSelectedItemId(item.id);\n    setShowModal(true);\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedItemId(id);\n  };\n\n  const handleDelete = () => {\n    mutate(selectedItemId);\n    setShowDeleteModal(false);\n    setSelectedItemId(0);\n  };\n\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setSelectedItemId(0);\n  };\n\n  return (\n    <Container>\n      <span>\n        <Button\n          variant=\"secondary\"\n          content={<Typography variant=\"bodyMedium\" content=\"Dodajte člana porodice\" />}\n          onClick={handleAdd}\n        />\n      </span>\n      <div>\n        <Table\n          tableHeads={tableHeads}\n          data={familyData || []}\n          isLoading={loading}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item),\n              icon: <EditIcon stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n      </div>\n      <FamilyMemberModal\n        open={showModal}\n        onClose={handleCloseModal}\n        selectedItem={selectedItem}\n        countries={context?.countries}\n        userProfileId={userProfileID}\n        alert={context.alert}\n        refetch={refetchData}\n      />\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </Container>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/family/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/family/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[115,118],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[115,118],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[214,217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[214,217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[273,276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[273,276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[315,318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[315,318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {MicroserviceProps} from '../../../types/micro-service-props';\n\nexport interface FamilyPageProps {\n  data?: any[];\n  context: MicroserviceProps;\n}\n\nexport interface FamilyMemberModalProps {\n  selectedItem?: any;\n  open: boolean;\n  onClose: () => void;\n  countries?: any[];\n  userProfileId?: number;\n  alert: any;\n  refetch: () => void;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/family/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[96,99],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[96,99],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {parseDateForBackend} from '../../../utils/dateUtils';\n\nexport const formatData = (data: any) => {\n  const payload = {\n    ...data,\n    id: data?.id || 0,\n    handicapped_person: data?.handicapped_person?.id === 'Da' ? true : false,\n    insurance_coverage: data?.insurance_coverage?.id === 'Ne' ? 'Ne' : 'Da',\n    date_of_birth: parseDateForBackend(data?.date_of_birth),\n    citizenship: data?.citizenship?.title,\n    country_of_birth: data?.country_of_birth?.id,\n    city_of_birth: typeof data?.city_of_birth === 'string' ? data?.city_of_birth : data?.city_of_birth?.title || '',\n    employee_relationship: data?.employee_relationship?.title,\n    gender: data?.gender?.title,\n    nationality: data?.nationality?.title || '',\n    national_minority: data?.national_minority?.id,\n  };\n\n  return payload;\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/foreigners/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/foreigners/foreigners.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/foreigners/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/foreigners/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1588,1591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1588,1591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1798,1801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1798,1801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3224,3227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3224,3227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {AlertVariants} from '@oykos-development/devkit-react-ts-styled-components';\nimport {Alert, CircleCheckIcon, DangerIcon, Typography} from 'client-library';\nimport {ValueType} from 'client-library/dist/components/dropdown/types';\nimport React, {useMemo, useRef, useState} from 'react';\nimport EmployeeDetails from '../../components/employeeDetails/employeeDetails';\nimport EmployeesList from '../../components/employeesList/employeesList';\nimport NewEmployeeSearch from '../../components/newEmployeeSearch/newEmployeeSearch';\nimport useUserProfiles from '../../services/graphql/userProfile/useUserProfiles';\nimport {AlertWrapper} from '../../shared/alertWrapper';\nimport {DropdownDataBoolean, DropdownDataNumber} from '../../types/dropdownData';\nimport {ScreenProps} from '../../types/screen-props';\nimport {useDebounce} from '../../utils/useDebounce';\nimport {ScreenWrapper} from '../../shared/screenWrapper';\n\nexport interface EmployeeListFilters {\n  is_active?: DropdownDataBoolean | null;\n  organization_unit_id?: DropdownDataNumber | null;\n  job_position_id?: DropdownDataNumber | null;\n  type?: DropdownDataNumber | null;\n}\n\nconst initialValues: EmployeeListFilters = {\n  is_active: null,\n  organization_unit_id: null,\n  job_position_id: null,\n  type: null,\n};\n\nexport const EmployeesScreen: React.FC<ScreenProps> = ({context}) => {\n  const [employeeModal, setEmployeeModal] = useState(false);\n  const [alert, setAlert] = useState<{variant: AlertVariants; message: string}>({\n    variant: AlertVariants.success,\n    message: '',\n  });\n  const [filters, setFilters] = useState<any>(initialValues);\n  const [search, setSearch] = useState('');\n\n  const screenWrapperRef = useRef<HTMLDivElement>(null);\n\n  const debouncedSearch = useDebounce(search, 500);\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value});\n  };\n\n  const [page, setPage] = useState(1);\n\n  const {\n    navigation: {\n      navigate,\n      location: {pathname},\n    },\n  } = context;\n\n  const {data, loading} = useUserProfiles({page, size: 10, ...filters, name: debouncedSearch});\n\n  const isNewEmployeeRoute = useMemo(() => {\n    const paths = pathname.split('/');\n    if (Number(paths[paths.length - 1])) {\n      return true;\n    }\n  }, [pathname]);\n\n  const isDetails = pathname.split('/')[3] === 'details';\n\n  const onSearch = (value: ValueType, name: string) => {\n    console.log(value, name);\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const toggleEmployeeImportModal = () => {\n    setEmployeeModal(!employeeModal);\n  };\n\n  return (\n    <ScreenWrapper context={context} ref={screenWrapperRef}>\n      <EmployeesList\n        navigation={context.navigation}\n        onPageChange={onPageChange}\n        toggleEmployeeImportModal={toggleEmployeeImportModal}\n        navigate={navigate}\n        data={data}\n        filters={filters}\n        search={search}\n        onFilterChange={onFilterChange}\n        onSearch={e => setSearch(e.target.value)}\n        parentRef={screenWrapperRef}\n        loading={loading}\n      />\n      {isNewEmployeeRoute && <NewEmployeeSearch onSearch={onSearch} />}\n      {isDetails && <EmployeeDetails context={context} setAlert={(alert: any) => setAlert(alert)} />}\n      {alert.message && (\n        <AlertWrapper>\n          <Alert\n            variant={alert.variant}\n            content={<Typography variant=\"bodySmall\" content={alert.message} />}\n            icon={\n              alert.variant === AlertVariants.success ? (\n                <CircleCheckIcon fill={'none'} stroke={'white'} />\n              ) : (\n                <DangerIcon fill={'none'} stroke={'white'} />\n              )\n            }\n            onClose={() => setAlert({variant: AlertVariants.success, message: ''})}\n          />\n        </AlertWrapper>\n      )}\n    </ScreenWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/salaryParams/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/salaryParams/salaryParams.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1758,1761],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1758,1761],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6184,6187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6184,6187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6243,6246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6243,6246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":250,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8950,8953],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8950,8953],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Button, Datepicker, Dropdown, Input} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {yesOrNoOptionsBoolean, yesOrNoOptionsString} from '../../../constants';\nimport useSalaryParamsOverview from '../../../services/graphql/userProfile/salaryParams/useSalaryParamsOverview';\nimport useSalaryParamsInsert from '../../../services/graphql/userProfile/salaryParams/useSalaryParamsinsert';\nimport {UserProfileGetSalaryParams} from '../../../types/graphql/userProfileGetSalaryParams';\nimport {insuranceBasis, salaryRanks} from './constants';\nimport {Controls, FormColumn, FormContainer, FormFooter, FormItem, FormRow, FormWrapper} from './styles';\nimport {SalaryParamsPageProps} from './types';\nimport {formatData, initialValues} from './utils';\nimport {parseToDate} from '../../../utils/dateUtils';\nimport useBasicInfoGet from '../../../services/graphql/userProfile/basicInfo/useBasicInfoGet';\nimport useEducationOverview from '../../../services/graphql/userProfile/education/useEducationOverview';\nimport {educationTypes} from '../../../components/education/modals/constants';\n\nexport const SalaryParams: React.FC<SalaryParamsPageProps> = ({context}) => {\n  const [isDisabled, setIsDisabled] = useState<boolean>(true);\n  const userProfileID = Number(context.navigation.location.pathname.split('/')[4]);\n  const {data, refetch} = useSalaryParamsOverview(userProfileID);\n  const {data: profileData} = useBasicInfoGet(Number(context.navigation.location.pathname.split('/')[4]));\n  const {employeeEducationData: educationData} = useEducationOverview(\n    Number(context.navigation.location.pathname.split('/')[4]),\n    educationTypes.education_academic_types,\n  ) as any;\n\n  const item = useMemo(() => {\n    if (data) {\n      return {\n        ...data,\n        benefited_track: data.benefited_track ? {id: 'Da', title: 'Da'} : {id: 'Ne', title: 'Ne'},\n        without_raise: data.without_raise ? {id: 'Da', title: 'Da'} : {id: 'Ne', title: 'Ne'},\n        insurance_basis: {id: data.insurance_basis, title: data.insurance_basis},\n        daily_work_hours: {id: data.daily_work_hours, title: data.daily_work_hours},\n        weekly_work_hours: {id: data.weekly_work_hours, title: data.weekly_work_hours},\n        salary_rank: {id: data.salary_rank, title: data.salary_rank},\n        created_at: parseToDate(data.created_at),\n        user_resolution_id: data.user_resolution_id ?? {\n          id: data.user_resolution_id,\n          title: data.user_resolution_id,\n        },\n      };\n    }\n\n    return null;\n  }, [data]);\n\n  const {mutate: createSalaryParams} = useSalaryParamsInsert();\n\n  const {\n    register,\n    handleSubmit,\n    formState: {isValid},\n    reset,\n    control,\n  } = useForm({\n    defaultValues: item || initialValues,\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [context.navigation.location]);\n\n  useEffect(() => {\n    if (item) {\n      reset(item);\n    }\n  }, [item]);\n\n  const handleSave = (values: UserProfileGetSalaryParams, close: boolean) => {\n    const payload = formatData({\n      ...values,\n      user_profile_id: userProfileID,\n      organization_unit_id: profileData?.contract.organization_unit?.id,\n    });\n\n    if (!item) {\n      delete payload.id;\n    }\n    delete payload.organization_unit;\n    delete payload.created_at;\n    delete payload.user_resolution_id;\n    delete payload.user_profile;\n    delete payload.resolution;\n\n    if (isValid) {\n      createSalaryParams(\n        payload,\n        () => {\n          refetch();\n          setIsDisabled(true);\n          context.alert.success('Uspješno sačuvano.');\n\n          if (close) {\n            const overviewPathname = context.navigation.location.pathname.split('/').slice(0, 3).join('/');\n            context.navigation.navigate(overviewPathname);\n          }\n        },\n        () => {\n          context.alert.error('Greška. Promjene nisu sačuvane.');\n        },\n      );\n    }\n  };\n\n  return (\n    <FormContainer>\n      <FormWrapper style={{marginTop: '20px'}}>\n        <FormRow>\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"\"\n                control={control}\n                render={({field: {name}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"RADNO MJESTO:\"\n                    isDisabled\n                    value={profileData?.job_position}\n                    options={profileData?.job_position ? new Array(profileData.job_position) : []}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"organization_unit\"\n                control={control}\n                render={({field: {name}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"ORGANIZACIONA JEDINICA:\"\n                    isDisabled\n                    value={profileData?.contract.organization_unit}\n                    options={\n                      profileData?.contract.organization_unit ? new Array(profileData?.contract.organization_unit) : []\n                    }\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"benefited_track\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"BENEFI. STAŽ:\"\n                    isDisabled={isDisabled}\n                    value={value}\n                    options={yesOrNoOptionsString}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"without_raise\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"BEZ POVEĆANJA:\"\n                    isDisabled={isDisabled}\n                    value={value as any}\n                    options={yesOrNoOptionsBoolean as any}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"insurance_basis\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"OSNOVA OSIG. PO PIO:\"\n                    isDisabled={isDisabled}\n                    value={value}\n                    options={insuranceBasis}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"salary_rank\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"TARIFNI PLATNI RAZRED:\"\n                    isDisabled={isDisabled}\n                    value={value}\n                    options={salaryRanks}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"user_resolution_id\"\n                control={control}\n                render={({field: {name}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"VRSTA UGOVORA:\"\n                    isDisabled\n                    value={profileData?.contract.contract_type}\n                    options={profileData?.contract?.contract_type ? new Array(profileData.contract.contract_type) : []}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"\"\n                control={control}\n                render={({field: {name}}) => (\n                  <Datepicker\n                    onChange={() => console.log('')}\n                    name={name}\n                    selected={parseToDate(profileData?.contract?.date_of_start || null)}\n                    label=\"POČETAK RADNOG ODNOSA:\"\n                    disabled\n                  />\n                )}\n              />\n            </FormItem>\n          </FormColumn>\n\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"daily_work_hours\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"RADNO VRIJEME:\"\n                    isDisabled={isDisabled}\n                    value={value as any}\n                    options={[\n                      {id: '8', title: '8'},\n                      {id: '4', title: '4'},\n                      {id: '2', title: '2'},\n                    ]}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"weekly_work_hours\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"SEDMIČNA OBAVEZA:\"\n                    isDisabled={isDisabled}\n                    value={value}\n                    options={[\n                      {id: '10', title: '10'},\n                      {id: '20', title: '20'},\n                      {id: '40', title: '40'},\n                    ]}\n                  />\n                )}\n              />\n            </FormItem>\n          </FormColumn>\n\n          <FormColumn>\n            <FormItem>\n              <Input\n                value={educationData?.[0]?.academic_title ? educationData[0].academic_title : ''}\n                label=\"STEPEN STRUČNOG OBRAZOVANJA:\"\n                disabled\n              />\n            </FormItem>\n          </FormColumn>\n          <FormColumn>\n            <FormItem>\n              <FormItem>\n                <Input {...register('education_naming')} label=\"ZANIMANJE PO STRUCI:\" disabled={isDisabled} />\n              </FormItem>\n            </FormItem>\n          </FormColumn>\n        </FormRow>\n      </FormWrapper>\n\n      <FormFooter>\n        <Controls>\n          {isDisabled ? (\n            <Button content=\"Uredi\" variant=\"secondary\" onClick={() => setIsDisabled(false)} />\n          ) : (\n            <>\n              <Button\n                content=\"Sačuvaj i zatvori\"\n                variant=\"secondary\"\n                onClick={() => handleSubmit((data: UserProfileGetSalaryParams) => handleSave(data, true))()}\n              />\n              <Button\n                content=\"Sačuvaj i nastavi\"\n                variant=\"primary\"\n                onClick={() => handleSubmit((data: UserProfileGetSalaryParams) => handleSave(data, false))()}\n              />\n            </>\n          )}\n        </Controls>\n      </FormFooter>\n    </FormContainer>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/salaryParams/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/salaryParams/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[121,124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[121,124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {MicroserviceProps} from '../../../types/micro-service-props';\n\nexport interface SalaryParamsPageProps {\n  data?: any[];\n  context: MicroserviceProps;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/salaryParams/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[190,193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[190,193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {UserProfileGetSalaryParams} from '../../../types/graphql/userProfileGetSalaryParams';\nimport {parseDateForBackend} from '../../../utils/dateUtils';\n\nexport const formatData = (data: any) => {\n  const payload = {\n    ...data,\n    id: data?.id || 0,\n    benefited_track: data?.benefited_track?.id === 'Da' ? true : false,\n    without_raise: data?.without_raise?.id === 'Da' ? true : false,\n    insurance_basis: data?.insurance_basis?.id,\n    daily_work_hours: data?.daily_work_hours.id,\n    weekly_work_hours: data?.weekly_work_hours.id,\n    salary_rank: data?.salary_rank.id,\n    user_resolution_id: data?.user_resolution_id?.id,\n    created_at: parseDateForBackend(data?.created_at),\n  };\n\n  delete payload.updated_at;\n\n  return payload;\n};\n\nexport const initialValues: UserProfileGetSalaryParams = {\n  id: 0,\n  benefited_track: false,\n  without_raise: false,\n  insurance_basis: '',\n  salary_rank: '',\n  daily_work_hours: '',\n  weekly_work_hours: '',\n  education_rank: '',\n  education_naming: '',\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/types..ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/internalRevision/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/internalRevision/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/internalRevision/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/applicationDetails/applicationDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/applicationDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/applications/applications.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1607,1610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1607,1610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2312,2315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2312,2315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2700,2703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2700,2703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":84,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":84,"endColumn":11,"fix":{"range":[2763,2773],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":85,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":85,"endColumn":11,"fix":{"range":[2819,2829],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":86,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":86,"endColumn":13,"fix":{"range":[2850,2862],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":87,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":87,"endColumn":13,"fix":{"range":[2889,2901],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":88,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":88,"endColumn":15,"fix":{"range":[2916,2930],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":89,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":89,"endColumn":13,"fix":{"range":[2971,2983],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":90,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":90,"endColumn":9,"fix":{"range":[2987,2995],"text":"      "}}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":7,"fixableWarningCount":0,"source":"import React, {useMemo, useState} from 'react';\nimport {JobTenderModal} from '../../components/jobTenderModal/jobTenderModal';\nimport JobTendersList from '../../components/jobTendersList/jobTendersList';\nimport useJobTendersTypesSearch from '../../services/graphql/jobPositions/useJobTendersTypesSearch';\nimport useJobTendersDelete from '../../services/graphql/jobTenders/useJobTenderDelete';\nimport useJobTendersOverview from '../../services/graphql/jobTenders/useJobTenderOverview';\nimport useOrganizationUnits from '../../services/graphql/organizationUnits/useOrganizationUnits';\nimport {ScreenWrapper} from '../../shared/screenWrapper';\nimport {DropdownDataNumber} from '../../types/dropdownData';\nimport {JobTender} from '../../types/graphql/jobTenders';\nimport {ScreenProps} from '../../types/screen-props';\n\nexport interface JobTendersListFilters {\n  active?: {id: boolean | null; title: string};\n  organization_unit_id?: DropdownDataNumber | null;\n  job_position_id?: DropdownDataNumber | null;\n  type_id?: DropdownDataNumber | null;\n}\n\nconst initialValues: JobTendersListFilters = {\n  active: {id: null, title: 'Odaberite status'},\n  organization_unit_id: null,\n  job_position_id: null,\n  type_id: null,\n};\n\nexport const JobTendersScreen: React.FC<ScreenProps> = ({context}) => {\n  const [showModal, setShowModal] = useState(false);\n  const [page, setPage] = useState(1);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n  const {types, typesUnitsList} = useJobTendersTypesSearch('');\n  const {organizationUnits} = useOrganizationUnits(context);\n\n  const [filters, setFilters] = useState<any>(initialValues);\n\n  const {data, refetch, loading} = useJobTendersOverview({page, size: 10, ...filters});\n\n  const selectedItem = useMemo(() => {\n    return data?.items?.find((item: JobTender) => item.id === selectedItemId);\n  }, [selectedItemId]);\n\n  const {alert} = context;\n\n  const handleEdit = (item?: JobTender) => {\n    setSelectedItemId(item?.id ? item.id : 0);\n    setShowModal(true);\n  };\n\n  const {mutate: deleteJobTenders} = useJobTendersDelete(\n    () => {\n      refetch();\n      alert.success('Uspješno obrisano.');\n    },\n    () => {\n      alert.error('Greška. Brisanje nije moguće.');\n    },\n  );\n\n  const {\n    navigation: {navigate},\n  } = context;\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value});\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const toggleEmployeeImportModal = (item?: JobTender) => {\n    setShowModal(!showModal);\n    handleEdit(item);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setSelectedItemId(0);\n  };\n\n  const organizationUnitsList: any[] = useMemo(() => {\n    return organizationUnits\n      ? [\n          {id: 0, title: 'Sve organizacione jedinice'},\n          ...organizationUnits\n            .filter(i => !i.parent_id)\n            .map(unit => {\n              return {id: unit.id, title: unit.title};\n            }),\n        ]\n      : [];\n  }, [organizationUnits]);\n\n  return (\n    <ScreenWrapper context={context}>\n      <JobTendersList\n        navigate={navigate}\n        toggleJobTenderImportModal={toggleEmployeeImportModal}\n        onPageChange={onPageChange}\n        data={data}\n        dropdownJobTenderType={typesUnitsList || []}\n        organizationUnitsList={organizationUnitsList || []}\n        filters={filters}\n        onFilterChange={onFilterChange}\n        deleteJobTender={deleteJobTenders}\n        context={context}\n        loading={loading}\n      />\n      {showModal && (\n        <JobTenderModal\n          open={showModal}\n          onClose={handleCloseModal}\n          selectedItem={selectedItem}\n          jobTenderTypeOptions={types?.items || []}\n          organizationUnitsList={organizationUnitsList || []}\n          refetch={refetch}\n          alert={alert}\n        />\n      )}\n    </ScreenWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/jobTenderDetails/jobTenderDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/landing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/constants.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {DropdownDataString} from '../../types/dropdownData';\n\nexport const topicOptions: DropdownDataString[] = [\n  {\n    id: 'Sve',\n    title: 'Sve',\n  },\n  {\n    id: 'Krivica',\n    title: 'Krivica',\n  },\n  {\n    id: 'Parnica',\n    title: 'Parnica',\n  },\n];\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgeNorms/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgeNorms/judges.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":41,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":41,"endColumn":11,"fix":{"range":[1894,1904],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":42,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":42,"endColumn":11,"fix":{"range":[1950,1960],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":43,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":43,"endColumn":13,"fix":{"range":[1981,1993],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":44,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":44,"endColumn":13,"fix":{"range":[2020,2032],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":45,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":45,"endColumn":15,"fix":{"range":[2047,2061],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":46,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":46,"endColumn":13,"fix":{"range":[2102,2114],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":47,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":47,"endColumn":9,"fix":{"range":[2118,2126],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3172,3175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3172,3175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":7,"fixableWarningCount":0,"source":"import React, {useEffect, useMemo, useState} from 'react';\nimport {ScreenProps} from '../../../types/screen-props';\nimport useJudgesOverview from '../../../services/graphql/judges/useJudgeOverview';\nimport useOrganizationUnits from '../../../services/graphql/organizationUnits/useOrganizationUnits';\nimport {DropdownDataNumber} from '../../../types/dropdownData';\nimport {JudgeOverview, Norms} from '../../../types/graphql/judges';\nimport {ScreenWrapper} from '../../../shared/screenWrapper';\nimport JudgeNormModal from '../../../components/judgeNormModal/judgeNormModal';\nimport NormsList from '../../../components/normsList/normsList';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport JudgesList from '../../../components/judgesList/judgesList';\nimport useJudgeNormsDelete from '../../../services/graphql/judges/useJudgeNormDelete';\n\nexport interface JudgesListFilters {\n  organization_unit: DropdownDataNumber | null;\n  user_profile: DropdownDataNumber | null;\n}\n\nconst initialValues: JudgesListFilters = {\n  organization_unit: null,\n  user_profile: null,\n};\n\nconst JudgeNorms: React.FC<ScreenProps> = ({context}) => {\n  const [showModal, setShowModal] = useState(false);\n  const [page, setPage] = useState(1);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n  const [selectedNormItemId, setSelectedNormItemId] = useState(0);\n  const [normsList, setNormsList] = useState<Norms[]>([]);\n  const {organizationUnits} = useOrganizationUnits(context);\n\n  const [filters, setFilters] = useState<JudgesListFilters>(initialValues);\n\n  const {data, total, refetch, loading} = useJudgesOverview({page, size: 10, ...filters});\n  const {judgesUnitsList} = useJudgesOverview({page, size: 1000, ...initialValues});\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const organizationUnitsList = useMemo(() => {\n    return organizationUnits\n      ? [\n          {id: 0, title: 'Sve organizacione jedinice'},\n          ...organizationUnits\n            .filter(i => !i.parent_id)\n            .map(unit => {\n              return {id: unit.id, title: unit.title};\n            }),\n        ]\n      : [];\n  }, [organizationUnits]);\n\n  const selectedNormItem = useMemo(() => {\n    return normsList?.find((item: Norms) => item.id === selectedNormItemId);\n  }, [selectedNormItemId]);\n\n  const normsListSet = () => {\n    const item = data?.find((item: JudgeOverview) => item.id === selectedItemId);\n    setNormsList([\n      ...(item?.norms || []).map(norm => ({\n        ...norm,\n        full_name: item?.full_name,\n      })),\n    ]);\n  };\n\n  useEffect(() => {\n    normsListSet();\n  }, [data, selectedItemId]);\n\n  const {mutate: deleteJudgeNorm} = useJudgeNormsDelete(\n    () => {\n      refetch();\n      context.success('Uspješno obrisano');\n    },\n    () => {\n      context.error('Brisanje nije uspješno');\n    },\n  );\n\n  const openNormModal = (item?: Norms) => {\n    setShowModal(true);\n    setSelectedNormItemId(item?.id || 0);\n  };\n\n  const toggleJudgesNorms = (item?: JudgeOverview) => {\n    setSelectedItemId(item?.id || 0);\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value});\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setSelectedNormItemId(0);\n  };\n\n  const handleDelete = () => {\n    deleteJudgeNorm(selectedNormItemId);\n    setShowDeleteModal(false);\n    setSelectedNormItemId(0);\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedNormItemId(id);\n  };\n\n  return (\n    <ScreenWrapper context={context}>\n      <JudgesList\n        toggleJudgesNorms={toggleJudgesNorms}\n        onPageChange={onPageChange}\n        data={data || []}\n        usersUnitsList={judgesUnitsList}\n        organizationUnitsList={organizationUnitsList || []}\n        filters={filters}\n        onFilterChange={onFilterChange}\n        total={total}\n        addNorm={() => openNormModal()}\n        loading={loading}\n      />\n      {normsList.length > 0 && (\n        <NormsList\n          data={normsList}\n          toggleNormsModal={item => openNormModal(item)}\n          handleDeleteIconClick={handleDeleteIconClick}\n          loading={loading}\n        />\n      )}\n\n      <JudgeNormModal\n        alert={context.alert}\n        refetchList={refetch}\n        open={showModal}\n        onClose={handleCloseModal}\n        selectedItem={selectedNormItem}\n        dropdownData={judgesUnitsList}\n      />\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </ScreenWrapper>\n  );\n};\n\nexport default JudgeNorms;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgesDecisionDetails/judgesDecisionDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Table' is defined but never used.","line":1,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2699,2702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2699,2702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":65,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":65,"endColumn":15,"fix":{"range":[2930,2944],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":66,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":66,"endColumn":13,"fix":{"range":[2987,2999],"text":"          "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6394,6397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6394,6397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6403,6406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6403,6406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":210,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7523,7526],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7523,7526],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":211,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7564,7567],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7564,7567],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":226,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8072,8075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8072,8075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import {Button, Divider, Table, Input, TableHead} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {Controls, CustomDropdown, CustomTable, Filters, FormFooter} from './styles';\nimport {OverviewBox} from '../../../components/employeesList/styles';\nimport useOrganizationUnits from '../../../services/graphql/organizationUnits/useOrganizationUnits';\nimport {MainTitle} from '../../../shared/mainTitle';\nimport {JudgeResolutionOverview, JudgeResolutionItem} from '../../../types/graphql/judges';\nimport {yearsForDropdown} from '../../../utils/constants';\nimport {judgeResolutionTableHeads} from '../judgeNorms/constants';\nimport {ScreenProps} from '../../../types/screen-props';\nimport useJudgeResolutionsOverview from '../../../services/graphql/judges/useJudgeResolutionOverview';\nimport {OrganizationUnit} from '../../../types/graphql/organizationUnitsTypes';\nimport {nanoid} from 'nanoid';\nimport {DropdownDataString} from '../../../types/dropdownData';\nimport useJudgeResolutionsInsert from '../../../services/graphql/judges/useJudgeResolutionInsert';\nimport {ScreenWrapper} from '../../../shared/screenWrapper';\nimport useOrganizationUintCalculateEmployeeStats from '../../../services/graphql/judges/useOrganizationUintCalculateEmployeeStats';\n\nexport interface JudgesNumbersDetailsListProps extends ScreenProps {\n  isNew?: boolean;\n}\n\ninterface DecisionForm {\n  id: number;\n  user_profile_id: number;\n  serial_number: string;\n  year: DropdownDataString | null;\n  items: {[key: string]: number};\n}\n\nconst initialValues = {\n  available_slots_presidents: 1,\n  available_slots_judges: 0,\n  number_of_judges: 0,\n  number_of_presidents: 0,\n  number_of_employees: 0,\n  number_of_relocated_judges: 0,\n  number_of_suspended_judges: 0,\n};\n\nexport const JudgesNumbersDetails: React.FC<JudgesNumbersDetailsListProps> = ({context, isNew}) => {\n  const [isDisabled, setIsDisabled] = useState<boolean>(isNew ? false : true);\n  const [judgeInputs, setJudgeInputs] = useState<{[key: string]: string}>({});\n  const {organizationUnits} = useOrganizationUnits();\n  const {organizationUintCalculateEmployee} = useOrganizationUintCalculateEmployeeStats();\n\n  const id = context.navigation.location.pathname.split('/')[4];\n\n  const {data, refetch} = useJudgeResolutionsOverview({page: 1, size: 1000});\n\n  const {mutate} = useJudgeResolutionsInsert();\n\n  const item = data?.find((i: JudgeResolutionOverview) => i.id === Number(id));\n\n  // constructing initial values for the form, serial number, year and dynamic number of fields for judge number based on org units\n  const getInitialValues = useMemo(() => {\n    const values: any = {};\n\n    organizationUnits\n      ?.filter(orgItem => !!orgItem.id && !orgItem.parent_id)\n      .forEach((unit: OrganizationUnit) => {\n        values[unit.id] = item\n          ? item?.items?.find((i: JudgeResolutionItem) => {\n              return i.organization_unit.id === unit.id;\n            })?.available_slots_judges\n          : '';\n      });\n\n    return {\n      id: item?.id ?? 0,\n      user_profile_id: 1,\n      serial_number: item?.serial_number ?? '',\n      year: item?.year ? {id: item?.year, title: item?.year} : null,\n      items: values,\n    };\n  }, [organizationUnits, item]);\n\n  const list = useMemo(() => {\n    return organizationUnits\n      .filter(unit => !unit.parent_id && unit.id)\n      .map((orgItem: OrganizationUnit) => {\n        let dataValue;\n\n        if (\n          id === 'new-decision' &&\n          Array.isArray(organizationUintCalculateEmployee) &&\n          organizationUintCalculateEmployee?.length > 0\n        )\n          dataValue = organizationUintCalculateEmployee?.find(\n            (itemEmployeeStats: JudgeResolutionItem) => itemEmployeeStats?.organization_unit?.id === orgItem.id,\n          );\n        const itemFromList = item?.items?.find((i: JudgeResolutionItem) => i.organization_unit.id === orgItem.id) ?? {\n          ...initialValues,\n          number_of_judges: dataValue?.number_of_judges,\n          number_of_presidents: dataValue?.number_of_presidents,\n          id: nanoid(),\n        };\n\n        return {\n          ...itemFromList,\n          organization_unit: {id: orgItem.id, title: orgItem.title},\n        };\n      });\n  }, [organizationUnits, item, organizationUintCalculateEmployee]);\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors},\n    control,\n    reset,\n  } = useForm<DecisionForm>({defaultValues: getInitialValues});\n\n  const judgeNumberTableHead: TableHead = {\n    title: 'Odluka o broju sudija',\n    accessor: 'available_slots_judges',\n    type: 'custom',\n    renderContents: (_, item) => (\n      <Input\n        {...register(`items.${item.organization_unit.id}`, {required: 'Ovo polje je obavezno'})}\n        disabled={isDisabled}\n        onChange={e => handleInputChange(e, item.organization_unit.id)}\n        value={judgeInputs[item.organization_unit.id]}\n      />\n    ),\n  };\n\n  const handleSave = (values: DecisionForm, close: boolean) => {\n    setIsDisabled(true);\n\n    const data = {\n      id: values.id,\n      serial_number: values.serial_number,\n      year: values.year?.id ?? '',\n      active: true,\n      items: Object.keys(values.items).map(key => ({\n        organization_unit_id: Number(key),\n        number_of_judges: Number(values.items[key]),\n        number_of_presidents: 1,\n        id: item?.items.find(i => i.organization_unit.id === Number(key))?.id ?? 0,\n      })),\n    };\n\n    mutate(\n      data,\n      id => {\n        setIsDisabled(true);\n        context.alert.success('Uspješno sačuvano.');\n        if (close) {\n          context.navigation.navigate('/hr/judges/number-decision');\n          context.breadcrumbs.remove();\n        } else {\n          refetch();\n          context.navigation.navigate(`/hr/judges/number-decision/${id}`);\n        }\n      },\n      () => {\n        context.alert.error('Greška. Promjene nisu sačuvane.');\n      },\n    );\n  };\n\n  const availableYears = useMemo(() => {\n    const yearOptions = [...yearsForDropdown(5).map(year => ({id: year.id.toString(), title: year.title.toString()}))];\n\n    return data ? yearOptions.filter(year => !data.find(resolution => resolution.year === year.id)) : [];\n  }, [data]);\n\n  useEffect(() => {\n    if (getInitialValues) {\n      reset(getInitialValues);\n    }\n  }, [getInitialValues]);\n\n  const handleInputChange = (event: any, id: any) => {\n    const value = event.target.value;\n    setJudgeInputs(prevState => ({\n      ...prevState,\n      [id]: value,\n    }));\n  };\n\n  return (\n    <ScreenWrapper context={context}>\n      <OverviewBox>\n        <MainTitle variant=\"bodyMedium\" content=\"DETALJI ODLUKE\" />\n        {/*TODO: theme color */}\n        <Divider color=\"#615959\" height=\"1px\" />\n\n        <CustomTable\n          titleElement={\n            <Filters>\n              <Input\n                {...register('serial_number', {required: 'Redni broj je obavezan'})}\n                label=\"REDNI BROJ:\"\n                style={{width: 300}}\n                error={errors.serial_number?.message}\n                placeholder=\"Unesite redni broj\"\n                disabled={isDisabled}\n              />\n              <Controller\n                control={control}\n                rules={{required: 'Godina je obavezna'}}\n                name=\"year\"\n                render={({field: {onChange, name, value}}) => (\n                  <CustomDropdown\n                    label=\"GODINA:\"\n                    name={name}\n                    options={availableYears as any}\n                    value={value as any}\n                    onChange={onChange}\n                    placeholder=\"Odaberite godinu\"\n                    error={errors.year?.message}\n                    isDisabled={isDisabled}\n                  />\n                )}\n              />\n            </Filters>\n          }\n          tableHeads={[\n            ...judgeResolutionTableHeads(judgeInputs).slice(0, 2),\n            judgeNumberTableHead,\n            ...judgeResolutionTableHeads(judgeInputs).slice(3),\n          ]}\n          data={(list as any) || []}\n        />\n        <FormFooter>\n          <Controls>\n            {isDisabled ? (\n              <Button content=\"Uredi\" variant=\"secondary\" onClick={() => setIsDisabled(false)} />\n            ) : (\n              <Button\n                content=\"Sačuvaj \"\n                variant=\"secondary\"\n                onClick={handleSubmit(values => handleSave(values, true))}\n              />\n            )}\n          </Controls>\n        </FormFooter>\n      </OverviewBox>\n    </ScreenWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgesDecisionDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgesNumberDecisions/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgesNumberDecisions/judgesNumberDecision.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'yearsForDropdown' is defined but never used.","line":6,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1113,1116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1113,1116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useMemo, useState} from 'react';\nimport JudgesNumbersList from '../../../components/judgesNumbersList/judgesNumbersList';\nimport {ScreenWrapper} from '../../../shared/screenWrapper';\nimport {DropdownDataString} from '../../../types/dropdownData';\nimport {ScreenProps} from '../../../types/screen-props';\nimport {yearsForDropdown, yearsForDropdownFilter} from '../../../utils/constants';\nimport useJudgesResolutionsOverview from '../../../services/graphql/judges/useJudgeResolutionOverview';\n\nexport interface JudgesNumberListFilters {\n  year: DropdownDataString | null;\n}\n\nconst initialValues: JudgesNumberListFilters = {\n  year: null,\n};\n\nconst JudgesNumberDecisions: React.FC<ScreenProps> = ({context}) => {\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState<JudgesNumberListFilters>(initialValues);\n  const {\n    data: judgesResolutions,\n    total,\n    refetch,\n    loading,\n  } = useJudgesResolutionsOverview({page, size: 10, year: filters?.year?.id || ''});\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value});\n  };\n\n  const yearOptions = useMemo(\n    () => [...yearsForDropdownFilter(5).map(year => ({id: year.id.toString(), title: year.title.toString()}))],\n    [],\n  );\n\n  return (\n    <ScreenWrapper context={context}>\n      <JudgesNumbersList\n        years={yearOptions}\n        data={judgesResolutions || []}\n        total={total}\n        filters={filters}\n        onFilterChange={onFilterChange}\n        onPageChange={onPageChange}\n        navigate={context.navigation.navigate}\n        alert={context.alert}\n        refetch={refetch}\n        loading={loading}\n      />\n    </ScreenWrapper>\n  );\n};\n\nexport default JudgesNumberDecisions;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/landing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/landing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/organization-units/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/filters/style.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/filters/systematizationFilters.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":108,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":111,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[634,637],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[634,637],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1617,1620],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1617,1620],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":110,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":113,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1668,1671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1668,1671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1951,1954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1951,1954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2067,2070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2067,2070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {Dropdown, Input, SearchIcon, Theme} from 'client-library';\nimport {Wrapper} from './style';\nimport {yearsForDropdownFilter} from '../../../utils/constants';\nimport useOrganizationUnits from '../../../services/graphql/organizationUnits/useOrganizationUnits';\nimport {SystematizationFiltersProps} from '../types';\n\nconst initialValues = {\n  systematization_number: null,\n  organization_unit_id: null,\n  year: null,\n};\n\nexport const SystematizationFilters: React.FC<SystematizationFiltersProps> = ({setFilters, data, context}: any) => {\n  const {register, control, watch} = useForm({defaultValues: data || initialValues});\n  const years = yearsForDropdownFilter();\n\n  const {organizationUnitsList} = useOrganizationUnits(context, true);\n  const unit = watch('organization_unit_id');\n  const search = watch('systematization_number');\n  const year = watch('year');\n\n  useEffect(() => {\n    if (unit !== 0) {\n      setFilters({organization_unit_id: unit?.id, search: null, year: null});\n    }\n    setFilters({search: search, year: year?.id});\n  }, [unit, year, search]);\n\n  return (\n    <Wrapper>\n      <Input\n        {...register('systematization_number')}\n        label=\"BROJ SISTEMATIZACIJE:\"\n        rightContent={<SearchIcon style={{marginLeft: 10, marginRight: 10}} stroke={Theme.palette.gray300} />}\n      />\n      <Controller\n        name=\"year\"\n        control={control}\n        render={({field: {onChange, name, value}}) => {\n          return (\n            <Dropdown onChange={onChange} value={value as any} name={name} label=\"GODINA:\" options={years as any} />\n          );\n        }}\n      />\n\n      <Controller\n        name=\"organization_unit_id\"\n        control={control}\n        render={({field: {onChange, name, value}}) => {\n          return (\n            <Dropdown\n              onChange={onChange}\n              value={value as any}\n              name={name}\n              label=\"ORG. JEDINICA:\"\n              options={organizationUnitsList as any}\n              placeholder={value}\n            />\n          );\n        }}\n      />\n    </Wrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1005,1008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1005,1008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1301,1304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1301,1304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2682,2685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2682,2685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2713,2716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2713,2716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Button, Divider, EditIconTwo, Table, TableHead, Theme, TrashIcon, Typography} from 'client-library';\nimport React, {useEffect, useState} from 'react';\nimport {MainTitle, OverviewBox} from '../../components/employeesList/styles';\nimport useSystematizationOverview from '../../services/graphql/systematization/useSystematizations';\nimport useSystematizationsDelete from '../../services/graphql/systematization/useSystematizationsDelete';\nimport {DeleteModal} from '../../shared/deleteModal/deleteModal';\nimport {ScreenWrapper} from '../../shared/screenWrapper';\nimport {ScreenProps} from '../../types/screen-props';\nimport {parseDate} from '../../utils/dateUtils';\nimport {SystematizationFilters} from './filters/systematizationFilters';\nimport {Header} from './styles';\n\nconst tableHeads: TableHead[] = [\n  {title: 'Broj sistematizacije', accessor: 'serial_number', type: 'text'},\n  {\n    title: 'Datum izdavanja',\n    accessor: 'date_of_activation',\n    type: 'custom',\n    renderContents: (item: any) => {\n      return <Typography variant=\"bodyMedium\" content={item !== '' ? parseDate(item) : ''} />;\n    },\n  },\n  {title: 'Status', accessor: 'active', type: 'badge'},\n  {\n    title: 'Organizaciona Jedinica',\n    accessor: 'organization_unit',\n    type: 'custom',\n    renderContents: (item: any) => {\n      return <Typography variant=\"bodyMedium\" content={item.title} />;\n    },\n  },\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n\nexport const SystematizationScreen: React.FC<ScreenProps> = ({context}) => {\n  const [params, setParams] = useState({page: 1, size: 10, organization_unit_id: 0, active: '', year: '', search: ''});\n  const {data, refetch, loading} = useSystematizationOverview(params);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n\n  const {mutate, success, error} = useSystematizationsDelete(() => {\n    if (success) {\n      refetch();\n      context.alert.success('Uspješno obrisano.');\n    } else if (error) {\n      context.alert.error('Greška. Brisanje nije moguće.');\n    }\n  });\n\n  const {\n    navigation: {navigate},\n  } = context;\n\n  const handleEdit = (id: number) => {\n    navigate(`/hr/systematization/systematization-details/${id}`);\n    context.breadcrumbs.add({\n      name: `Sistematizacija broj ${id}`,\n      to: `/hr/systematization/systematization-details/${id}`,\n    });\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedItemId(id);\n  };\n\n  const handleDelete = () => {\n    mutate(selectedItemId);\n    setShowDeleteModal(false);\n    setSelectedItemId(0);\n  };\n\n  const setFilters = (params: any) => {\n    setParams((data: any) => ({...data, ...params}));\n  };\n\n  useEffect(() => {\n    refetch();\n  }, [params]);\n\n  const checkDate = (date: string): boolean => {\n    if (!date) return true;\n    const inputDate = new Date(date.split('/').reverse().join('-'));\n    const currentDate = new Date();\n\n    return inputDate.getTime() > currentDate.getTime();\n  };\n\n  return (\n    <ScreenWrapper context={context}>\n      <OverviewBox>\n        <MainTitle variant=\"bodyMedium\" content=\"Sistematizacija\" />\n        <Divider color={Theme?.palette?.gray200} height=\"1px\" />\n        <Header>\n          <SystematizationFilters setFilters={params => setFilters(params)} />\n          <Button\n            variant=\"secondary\"\n            content=\"Nova sistematizacija\"\n            onClick={() => {\n              navigate('/hr/systematization/systematization-details');\n              context.breadcrumbs.add({\n                name: 'Nova sistematizacija',\n                to: '/hr/systematization/systematization-details',\n              });\n            }}\n          />\n        </Header>\n        <Table\n          tableHeads={tableHeads}\n          data={data || []}\n          isLoading={loading}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item.id),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n              shouldRender: row => (!row.active && checkDate(row.date_of_activation) ? true : false),\n            },\n          ]}\n        />\n        <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n      </OverviewBox>\n    </ScreenWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/footer.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":49,"column":17,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":49,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/printPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[865,868],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[865,868],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1492,1495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1492,1495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {PrintPageProps} from '../types';\nimport {JobInfo, PrintPageWrapper, SectorTitle} from './styles';\nimport {Typography, Divider, Theme} from 'client-library';\nimport {SectorType} from '../../../types/graphql/systematizationsGetDetailsTypes';\n\nexport const PrintPage: React.FC<PrintPageProps> = ({sectorDetails}) => {\n  return (\n    <PrintPageWrapper>\n      {sectorDetails?.map((sector: SectorType) => {\n        return (\n          <div key={`sector-details-${sector?.id}`}>\n            <div>\n              <SectorTitle>\n                <Typography variant=\"bodyLarge\" content={sector?.title} style={{fontWeight: 600}} />\n              </SectorTitle>\n              <Divider height=\"2px\" color={Theme?.palette?.gray200} />\n            </div>\n            <div>\n              {sector?.job_positions_organization_units?.map((jobPosition: any) => {\n                return (\n                  <>\n                    <JobInfo key={`job-position-${jobPosition?.id}`}>\n                      <Typography\n                        variant=\"bodyMedium\"\n                        content={jobPosition?.job_positions?.title}\n                        style={{fontWeight: 600, minWidth: 200}}\n                      />\n                      <Typography variant=\"bodyMedium\" content={jobPosition?.description} style={{minWidth: 200}} />\n                      <Typography\n                        variant=\"bodyMedium\"\n                        content={jobPosition?.employees?.map((item: any) => item?.title).join(', ')}\n                        style={{minWidth: 200}}\n                      />\n                    </JobInfo>\n                  </>\n                );\n              })}\n            </div>\n          </div>\n        );\n      })}\n    </PrintPageWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/sectors.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1510,1513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1510,1513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1523,1526],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1523,1526],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2052,2055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2052,2055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2297,2300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2297,2300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3579,3582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3579,3582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3919,3922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3919,3922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4359,4362],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4359,4362],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4697,4700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4697,4700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4926,4929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4926,4929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useEffect, useState} from 'react';\nimport {SectorsProps} from '../types';\nimport {AccordionHeader, AccordionIconsWrapper, Menu, MenuItem, SectorsWrapper} from './styles';\nimport {Accordion, ChevronDownIcon, MoreVerticalIcon, Typography} from 'client-library';\nimport {SystematizationJobPositions} from '../../../types/graphql/jobPositions';\nimport {JobPositionTable} from '../../../components/jobPositionTable/jobPositionTable';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {SectorType} from '../../../types/graphql/systematizationsGetDetailsTypes';\n\nexport const Sectors: React.FC<SectorsProps> = ({\n  sectors,\n  handleDeleteSector,\n  systematizationID,\n  refreshData,\n  handleEditSector,\n  context,\n  jobPositionData,\n  allEmployees,\n  activeEmployees,\n  isActive,\n}) => {\n  const [showMenu, setShowMenu] = useState<number>(0);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [deleteItemId, setDeleteItemId] = useState(0);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n  const [addJob, setAddJob] = useState(false);\n\n  const [jobPositions, setJobPositions] = useState<SystematizationJobPositions[] | undefined>([]);\n\n  const openAccordion = (sectorId: number) => {\n    setSelectedItemId(prevState => (prevState === sectorId ? 0 : sectorId));\n    setShowMenu(0);\n  };\n\n  const showMenuHandler = (sectorId: number) => {\n    setShowMenu(prevState => (prevState === sectorId ? 0 : sectorId));\n  };\n\n  const addJobPosition = (e: any, sector: any) => {\n    e.stopPropagation();\n\n    if (selectedItemId !== sector.id) {\n      setSelectedItemId(sector.id);\n    }\n    setAddJob(true);\n  };\n  const cancelJobPosition = () => {\n    const newArray = jobPositions?.filter(item => item.id !== 0) || [];\n    setJobPositions([...newArray]);\n  };\n\n  const deleteSector = () => {\n    handleDeleteSector(deleteItemId);\n    setShowDeleteModal(false);\n    setDeleteItemId(0);\n  };\n\n  useEffect(() => {\n    if (selectedItemId) {\n      const jobPositions = sectors?.find(\n        (sector: any) => sector?.id === selectedItemId,\n      )?.job_positions_organization_units;\n\n      setJobPositions(jobPositions);\n    }\n  }, [selectedItemId]);\n\n  useEffect(() => {\n    if (addJob) {\n      const jobPositions =\n        sectors?.find((item: any) => item?.id === selectedItemId)?.job_positions_organization_units || [];\n\n      setShowMenu(0);\n      setJobPositions([\n        {\n          available_slots: 0,\n          description: '',\n          employees: [],\n          id: 0,\n          job_position: {id: 0, title: ''},\n          requirements: '',\n          serial_number: '',\n        },\n        ...jobPositions,\n      ]);\n      setAddJob(false);\n    }\n  }, [addJob]);\n\n  return (\n    <SectorsWrapper>\n      {sectors?.map((sector: SectorType) => {\n        return (\n          <div key={`sector-${sector?.id}`} style={{position: 'relative'}}>\n            <Accordion\n              style={{border: 0, padding: 0, marginBottom: 20, display: 'block'}}\n              isOpen={selectedItemId === sector?.id ? true : false}\n              customHeader={\n                <AccordionHeader color={sector?.color}>\n                  <Typography\n                    variant=\"bodyMedium\"\n                    content={`${sector?.id}. ${sector?.title}`}\n                    style={{fontWeight: 600}}\n                  />\n                  <AccordionIconsWrapper isOpen={selectedItemId === sector?.id}>\n                    <ChevronDownIcon\n                      width=\"15px\"\n                      height=\"8px\"\n                      onClick={(e: any) => {\n                        e.stopPropagation();\n                        openAccordion(sector.id);\n                      }}\n                    />\n                    {!isActive && (\n                      <MoreVerticalIcon\n                        width=\"5px\"\n                        height=\"16px\"\n                        onClick={(e: any) => {\n                          e.stopPropagation();\n                          showMenuHandler(sector.id);\n                        }}\n                        style={{padding: '10px'}}\n                      />\n                    )}\n                  </AccordionIconsWrapper>\n                  {!isActive && (\n                    <Menu open={showMenu === sector?.id}>\n                      <MenuItem\n                        onClick={(e: any) => {\n                          e.stopPropagation();\n                          handleEditSector(sector.id);\n                          setShowMenu(0);\n                        }}>\n                        <Typography content=\"Uredi\" variant=\"bodyMedium\" />\n                      </MenuItem>\n\n                      <MenuItem onClick={(e: any) => addJobPosition(e, sector)}>\n                        <Typography content=\"Dodaj radno mjesto\" variant=\"bodyMedium\" />\n                      </MenuItem>\n\n                      <MenuItem\n                        onClick={(e: any) => {\n                          e.stopPropagation();\n                          setShowDeleteModal(true);\n                          setDeleteItemId(sector?.id);\n                          setShowMenu(0);\n                        }}>\n                        <Typography content=\"Obriši\" variant=\"bodyMedium\" />\n                      </MenuItem>\n                    </Menu>\n                  )}\n                </AccordionHeader>\n              }\n              content={\n                <JobPositionTable\n                  data={jobPositions || []}\n                  sectorID={sector?.id}\n                  systematizationID={systematizationID}\n                  refetch={availableSlotsChanged => refreshData && refreshData(availableSlotsChanged)}\n                  alert={context?.alert}\n                  jobPositionData={jobPositionData}\n                  allEmployees={allEmployees}\n                  activeEmployees={activeEmployees}\n                  cancel={cancelJobPosition}\n                  isActive={isActive}\n                />\n              }\n            />\n          </div>\n        );\n      })}\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={deleteSector} />\n    </SectorsWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/systematizationDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'uploadedFiles' is assigned a value but never used.","line":51,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4640,4643],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4640,4643],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'refetch' is defined but never used.","line":121,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'message' is defined but never used.","line":121,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5078,5081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5078,5081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'payload' is assigned a value but never used.","line":150,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":219,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8138,8141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8138,8141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":229,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8600,8603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8600,8603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8755,8758],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8755,8758],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":245,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9331,9334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9331,9334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useEffect, useMemo, useState} from 'react';\nimport {StyledTabs} from '../../../components/employeeDetails/styles';\nimport {OverviewBox} from '../../../components/employeesList/styles';\nimport {SystematizationDetailsPageProps} from '../types';\nimport {ButtonWrapper, FileUploadWrapper, Row, TitleWrapper} from './styles';\nimport {Typography, Divider, Theme, Button, Input, Dropdown, FileUpload} from 'client-library';\nimport {systematizationDetailsTabs} from '../constants';\nimport {Tab} from '@oykos-development/devkit-react-ts-styled-components';\nimport {Controller, FormProvider, useForm} from 'react-hook-form';\nimport useOrganizationUnits from '../../../services/graphql/organizationUnits/useOrganizationUnits';\nimport useSystematizationGetDetails from '../../../services/graphql/systematization/useSystematizationGetDetails';\nimport {Sectors} from './sectors';\nimport {Footer} from './footer';\nimport {PrintPage} from './printPage';\nimport {formatDataSaveSystematization} from '../utils';\nimport useDeleteOrganisationUnit from '../../../services/graphql/organizationUnits/useOrganizationUnitDelete';\nimport {SectorType} from '../../../types/graphql/systematizationsGetDetailsTypes';\nimport useSystematizationInsert from '../../../services/graphql/systematization/useSystematizationsInsert';\nimport {ScreenWrapper} from '../../../shared/screenWrapper';\nimport {usePrompt} from '../../../shared/usePrompt';\nimport useJobPositions from '../../../services/graphql/jobPositions/useJobPositionOverview';\nimport useUserProfiles from '../../../services/graphql/userProfile/useUserProfiles';\nimport {parseToDate} from '../../../utils/dateUtils';\nimport {OrganizationalUnitModal} from '../../../components/organizationUnitModal/organizationUnitModal';\n\nconst initialValues = {\n  organization_unit: {id: 0, value: ''},\n  user_profile_id: Number(localStorage.getItem('user_id')),\n  serial_number: '',\n  description: '',\n  active: false,\n  date_of_activation: null,\n  sectors: [],\n  file_id: 0,\n};\n\nexport const SystematizationDetails: React.FC<SystematizationDetailsPageProps> = ({context}) => {\n  const [activeTab, setActiveTab] = useState(1);\n  const onTabChange = (tab: Tab) => {\n    setActiveTab(tab.id as number);\n  };\n\n  const [showEditSectorModal, setShowEditSectorModal] = useState(false);\n  const systematizationID = context?.navigation?.location?.pathname.split('/')[4];\n  const {systematizationDetails, refetch: refreshData} = useSystematizationGetDetails(systematizationID);\n  const {organizationUnits} = useOrganizationUnits(context);\n  const [sectorId, setSectorId] = useState<number>(0);\n  const selectedSector = useMemo(() => {\n    return systematizationDetails?.sectors?.find((i: SectorType) => i.id === sectorId);\n  }, [sectorId]);\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n\n  const {data: jobPositionData} = useJobPositions('');\n  const {data: allEmployees, refetch: refetchEmployees} = useUserProfiles({\n    page: 1,\n    size: 100,\n    is_active: null,\n    organization_unit_id: systematizationDetails?.organizationUnit?.id,\n    job_position_id: null,\n    type: null,\n  });\n\n  const [isBlocking, setIsBlocking] = useState(false);\n\n  usePrompt('Da li ste sigurni da želite da napustite stranicu? Izmjene neće biti sačuvane!', isBlocking);\n\n  const handleUpload = (files: FileList) => {\n    const fileList = Array.from(files);\n    setUploadedFiles(fileList);\n  };\n\n  const organizationUnitsList = useMemo(() => {\n    return organizationUnits\n      .filter(i => !i.parent_id)\n      .map(unit => {\n        return {id: unit.id, title: unit.title};\n      });\n  }, [organizationUnits]);\n\n  const {\n    navigation: {navigate},\n  } = context;\n\n  const {mutate, success, error} = useSystematizationInsert(id => {\n    if (success) {\n      const route = id > 0 ? `/hr/systematization/systematization-details/${id}` : '/hr/systematization';\n      navigate(route);\n      if (systematizationDetails && systematizationDetails.id) refreshData();\n      context.breadcrumbs.remove();\n      context.alert.success('Uspješno sačuvano');\n\n      setIsBlocking(false);\n    } else if (error) {\n      context.alert.error('Greška. Promjene nisu sačuvane.');\n    }\n  });\n\n  const {\n    mutate: deleteSector,\n    success: deleteSuccess,\n    error: deleteError,\n  } = useDeleteOrganisationUnit(() => {\n    if (deleteSuccess) {\n      refreshData();\n      context.alert.success('Uspješno obrisano.');\n    } else if (deleteError) {\n      context.alert.error('Dodavanje nije uspješno');\n    }\n  });\n\n  const methods = useForm({\n    defaultValues: systematizationDetails || initialValues,\n  });\n\n  const handleSave = (data: any) => {\n    const payload = formatDataSaveSystematization(data);\n    mutate(payload);\n    setIsBlocking(false);\n  };\n\n  const handleCloseModal = (refetch: boolean, message: string) => {\n    setShowEditSectorModal(false);\n  };\n\n  const handleDeleteSector = (id: number) => {\n    deleteSector(id);\n  };\n\n  const editSector = (id: number) => {\n    setSectorId(id);\n    setShowEditSectorModal(true);\n  };\n\n  const setSerialNumbers = (data: any) => {\n    let start = 1;\n    // const counter = 0;\n    const updatedData = {...data};\n\n    // const totalJobPositions = updatedData.sectors.reduce(\n    //   (sum: number, sector: any) => sum + sector.job_positions.length,\n    //   0,\n    // );\n\n    updatedData.sectors.forEach((sector: SectorType) => {\n      sector.job_positions_organization_units.forEach(job_positions_organization_units => {\n        const available_slots = job_positions_organization_units.available_slots;\n        const end = start + available_slots - 1;\n        const serial_number = `${start}-${end}`;\n        start = end + 1;\n        const payload = {\n          id: job_positions_organization_units.id || 0,\n          available_slots: Number(job_positions_organization_units?.available_slots) || 1,\n          parent_job_position_id: 0,\n          job_position_id: job_positions_organization_units?.job_position?.id,\n          system_permission_id: 0,\n          description: job_positions_organization_units?.description,\n          requirements: job_positions_organization_units?.requirements,\n          icon: '',\n          systematization_id: updatedData?.id,\n          parent_organization_unit_id: sector?.id,\n          serial_number: serial_number,\n        };\n        //TODO Check if this is bff problem\n\n        // insertJobPosition(payload, () => {\n        //   counter++;\n        //   if (counter === totalJobPositions) {\n        //     refreshData();\n        //   }\n        // });\n      });\n    });\n  };\n\n  const refetchDataOnSectorChanged = (availableSlotsChanged?: boolean) => {\n    refreshData(res => {\n      if (availableSlotsChanged) {\n        setSerialNumbers(res);\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (systematizationDetails) {\n      methods.reset({\n        ...systematizationDetails,\n        date_of_activation: parseToDate(systematizationDetails.date_of_activation),\n      });\n      refetchEmployees();\n    }\n  }, [systematizationDetails]);\n\n  return (\n    <ScreenWrapper context={context}>\n      <OverviewBox>\n        <FormProvider {...methods}>\n          <TitleWrapper>\n            <Typography\n              style={{fontWeight: 600}}\n              variant=\"bodyMedium\"\n              content={systematizationDetails?.organization_unit?.title?.toUpperCase() || ''}\n            />\n            <StyledTabs\n              tabs={systematizationDetailsTabs}\n              activeTab={activeTab}\n              onChange={onTabChange}\n              //TODO: change in devkit/library\n              style={{borderWidth: '1px', borderRadius: '0.5em 0.5em 0 0', whiteSpace: 'nowrap'}}\n            />\n          </TitleWrapper>\n          <Divider color={Theme?.palette?.gray200} height=\"1px\" style={{margin: 0}} />\n          {activeTab === 1 ? (\n            <div>\n              <Row>\n                <Input\n                  {...methods?.register('serial_number', {required: 'Ovo polje je obavezno'})}\n                  label=\"BROJ SISTEMATIZACIJE:\"\n                  error={methods?.formState?.errors.serial_number?.message as string}\n                  onChange={(event: any) => setIsBlocking(event.target.value.length > 0)}\n                />\n                <Controller\n                  name=\"organization_unit\"\n                  control={methods?.control}\n                  rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {onChange, name, value}}) => {\n                    return (\n                      <Dropdown\n                        onChange={onChange}\n                        value={value as any}\n                        name={name}\n                        label=\"ORGANIZACIONA JEDINICA:\"\n                        options={organizationUnitsList as any}\n                        isDisabled={systematizationDetails?.organization_unit?.id}\n                        error={methods?.formState?.errors.organization_unit?.message as string}\n                      />\n                    );\n                  }}\n                />\n              </Row>\n              <Input\n                {...methods?.register('description', {required: 'Ovo polje je obavezno'})}\n                label=\"OPIS:\"\n                error={methods?.formState?.errors.description?.message as string}\n                textarea\n                onChange={(event: any) => setIsBlocking(event.target.value.length > 0)}\n              />\n              <ButtonWrapper>\n                <FileUploadWrapper>\n                  <FileUpload\n                    icon={<></>}\n                    style={{width: '50%'}}\n                    variant=\"secondary\"\n                    onUpload={handleUpload}\n                    buttonText=\"Dodaj dokument\"\n                    note=\"Izaberite datoteku ili je prevucite ovdje\"\n                  />\n                </FileUploadWrapper>\n                {systematizationID && Number(systematizationID) > 0 && !systematizationDetails?.active && (\n                  <Button variant=\"secondary\" content=\"Dodaj odjeljenje\" onClick={() => setShowEditSectorModal(true)} />\n                )}\n              </ButtonWrapper>\n              <Sectors\n                sectors={systematizationDetails?.sectors}\n                handleDeleteSector={id => handleDeleteSector(id)}\n                systematizationID={systematizationDetails?.id}\n                refreshData={availableSlotsChanged => refetchDataOnSectorChanged(availableSlotsChanged)}\n                handleEditSector={(id: number) => editSector(id)}\n                context={context}\n                jobPositionData={jobPositionData?.items}\n                allEmployees={allEmployees?.items}\n                activeEmployees={systematizationDetails?.active_employees}\n                isActive={systematizationDetails?.active}\n              />\n            </div>\n          ) : (\n            <PrintPage sectorDetails={systematizationDetails?.sectors} />\n          )}\n\n          <Footer\n            activeTab={activeTab}\n            handleSaveButton={methods?.handleSubmit(handleSave)}\n            active={systematizationDetails?.active}\n            id={Number(systematizationID)}\n          />\n        </FormProvider>\n        {showEditSectorModal && (\n          <OrganizationalUnitModal\n            alert={context.alert}\n            refetch={refreshData}\n            open={showEditSectorModal}\n            onClose={(refetch: boolean, message: string) => {\n              handleCloseModal(refetch, message);\n            }}\n            organizationUnit={systematizationDetails?.organization_unit}\n            selectedItem={selectedSector}\n          />\n        )}\n      </OverviewBox>\n    </ScreenWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[818,821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[818,821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[878,881],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[878,881],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {ActiveEmployees, SectorType} from '../../types/graphql/systematizationsGetDetailsTypes';\nimport {MicroserviceProps} from '../../types/micro-service-props';\nimport {JobPosition} from '../../types/graphql/jobPositions';\nimport {UserProfile} from '../../types/graphql/userProfiles';\n\nexport interface SystematizationDetailsPageProps {\n  context: MicroserviceProps;\n}\n\nexport interface SectorsProps {\n  sectors: SectorType[];\n  handleDeleteSector: (id: number) => void;\n  handleEditSector: (id: number) => void;\n  systematizationID: number;\n  refreshData?: (availableSlotsChanged?: boolean) => void;\n  context?: MicroserviceProps;\n  jobPositionData: JobPosition[];\n  allEmployees: UserProfile[];\n  activeEmployees: ActiveEmployees[];\n  isActive: boolean;\n}\n\nexport interface SystematizationFiltersProps {\n  data?: any;\n  context?: MicroserviceProps;\n  setFilters: (filters: any) => void;\n}\n\nexport interface PrintPageProps {\n  sectorDetails: SectorType[];\n}\n\nexport interface FooterProps {\n  activeTab: number;\n  handleSaveButton: () => void;\n  active: boolean;\n  id: number;\n}\n\nexport interface SectorModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[112,115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[112,115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[661,664],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[661,664],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {parseDateForBackend} from '../../utils/dateUtils';\n\nexport const formatDataSaveSystematization = (data: any) => {\n  const payload = {\n    ...data,\n    id: data?.id || 0,\n    user_profile_id: Number(localStorage.getItem('user_id')),\n    organization_unit_id: data?.organization_unit?.id,\n    date_of_activation: parseDateForBackend(data?.date_of_activation),\n    file_id: data?.file_id || 0,\n  };\n\n  delete payload.user_profile;\n  delete payload.organization_unit;\n  delete payload.sectors;\n  delete payload.created_at;\n  delete payload.updated_at;\n  delete payload.active_employees;\n\n  return payload;\n};\n\nexport const formatDataAddJobPosition = (data: any) => {\n  const payload = {\n    ...data,\n    id: data?.id || 0,\n    available_slots: Number(data?.available_slots?.value) || 1,\n    parent_job_position_id: 0,\n    job_position_id: data?.job_position?.id,\n    system_permission_id: 0,\n    description: data?.job_position?.description,\n    requirements: data?.job_position?.requirements,\n    icon: '',\n  };\n\n  delete payload.employees;\n  delete payload.job_position;\n\n  return payload;\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/get-environment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/foreignerPermitDelete.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[87,90],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[87,90],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {GraphQL} from '..';\n\nconst foreignerPermitDelete = async (id: number): Promise<any> => {\n  const mutation = `mutation($id: Int!) {\n    userProfile_Foreigner_Delete(id: $id) {\n        message\n        status\n    }\n}`;\n\n  const response = await GraphQL.fetch(mutation, {id});\n\n  return response.data?.userProfile_Foreigner_Delete || {};\n};\n\nexport default foreignerPermitDelete;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/foreignerPermitInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/foreignerPermitOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/useForeignerPermitDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/useForeignerPermitInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/useForeignerPermitOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[243,246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[243,246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[386,389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[386,389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nconst useForeignerPermitOverview = (user_profile_id: number) => {\n  const [data, setData] = useState<any>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchForeignerPermits = async () => {\n    const foreignerPermits: any = await GraphQL.foreignerPermits(user_profile_id);\n    setData(foreignerPermits);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchForeignerPermits();\n  }, [user_profile_id]);\n\n  return {data, loading, refetch: fetchForeignerPermits};\n};\n\nexport default useForeignerPermitOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5246,5249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5246,5249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5260,5263],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5260,5263],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {getEnvironment} from '../get-environment';\nimport organizationUnits from './organizationUnits/organizationUnitOverview';\nimport foreignerPermitDelete from './foreignerPermits/foreignerPermitDelete';\nimport foreignerPermitInsert from './foreignerPermits/foreignerPermitInsert';\nimport foreignerPermits from './foreignerPermits/foreignerPermitOverview';\nimport jobPositionsGet from './jobPositions/jobPositionOverview';\nimport jobPositionInOrganizationUnitInsert from './organizationUnitsJobPositions/jobPositionInOrganizationUnitInsert';\nimport employeeInOrganizationUnitInsert from './organizationUnitsEmployees/employeeInOrganizationUnitInsert';\nimport employeeInOrganizationUnitDelete from './organizationUnitsEmployees/employeeInOrganizationUnitDelete';\nimport jobPositionInOrganizationUnitDelete from './organizationUnitsJobPositions/jobPositionInOrganizationUnitDelete';\nimport basicInfoGet from './userProfile/basicInfo/basicInfoGet';\nimport basicInfoInsert from './userProfile/basicInfo/basicInfoInsert';\nimport experienceOverview from './userProfile/experience/experienceOverview';\nimport experienceInsert from './userProfile/experience/experienceInsert';\nimport experienceDelete from './userProfile/experience/experienceDelete';\nimport educationOverview from './userProfile/education/educationOverview';\nimport educationDelete from './userProfile/education/educationDelete';\nimport educationInsert from './userProfile/education/educationInsert';\nimport familyInsert from './userProfile/family/familyinsert';\nimport familyOverview from './userProfile/family/familyOverview';\nimport familyDelete from './userProfile/family/familyDelete';\nimport salaryParamsInsert from './userProfile/salaryParams/salarayParamsInsert';\nimport salaryParamsOverview from './userProfile/salaryParams/salaryParamsOverview';\nimport evaluationDelete from './userProfile/evaluation/evaluationDelete';\nimport evaluationInsert from './userProfile/evaluation/evaluationInsert';\nimport evaluationOverview from './userProfile/evaluation/evalutationOverview';\nimport resolutionDelete from './userProfile/resolution/resolutionDelete';\nimport resolutionInsert from './userProfile/resolution/resolutionInsert';\nimport resolutionOverview from './userProfile/resolution/resolutionOverview';\nimport absentDelete from './userProfile/absents/absentDelete';\nimport absentInsert from './userProfile/absents/absentInsert';\nimport absentOverview from './userProfile/absents/absentOverview';\nimport judgeOverview from './judges/judgeOverview';\nimport judgeNormDelete from './judges/judgeNormDelete';\nimport judgeNormInsert from './judges/judgeNormInsert';\nimport judgeResolutionDelete from './judges/judgeResolutionDelete';\nimport judgeResolutionInsert from './judges/judgeResolutionInsert';\nimport judgeResolutionOverview from './judges/judgeResolutionOverview';\nimport organizationUnitInsert from './organizationUnits/organizationUnitInsert';\nimport organizationUnitDelete from './organizationUnits/organizationUnitDelete';\nimport jobTenderApplicationDelete from './jobTenders/jobTenderApplicationDelete';\nimport jobTenderInsert from './jobTenders/jobTenderInsert';\nimport jobPositionSearch from './jobPositions/jobPositionsSearch';\nimport jobTenderTypesSearch from './jobTenderTypes/jobTenderTypesSearch';\nimport revisionDelete from './internalRevision/revisionDelete';\nimport revisionDetails from './internalRevision/revisionDetails';\nimport revisionInsert from './internalRevision/revisionInsert';\nimport revisionOverview from './internalRevision/revisionOverview';\nimport jobTenderDelete from './jobTenders/jobTenderDelete';\nimport jobTenderOverview from './jobTenders/jobTenderOverview';\nimport jobTenderApplicationOverview from './jobTenders/jobTenderApplicationOverview';\nimport jobTenderApplicationInsert from './jobTenders/jobTenderApplicationInsert';\nimport systematizationDetails from './systematization/systematizationDetails';\nimport systematizationOverview from './systematization/systematizationOverview';\nimport systematizationInsert from './systematization/systematizationsInsert';\nimport systematizationDelete from './systematization/systematizationsDelete';\nimport userProfileOverview from './userProfile/userProfileOverview';\nimport jobPositionsOrganizationUnit from './jobPositions/jobPositionsOrganizationUnit';\nimport absentTypesOverview from './userProfile/absents/absentsType';\nimport settingsDropdownOverview from './settingsDropdown/settingsDropdownOverview';\nimport basicInfoUpdate from './userProfile/basicInfo/basicInfoUpdate';\nimport jobPositionsAvailableOrganizationUnit from './jobPositions/jobPositionsAvailableOrganizationUnit';\nimport getSuppliersOverview from './suppliers/getSuppliers';\nimport organizationUintCalculateEmployeeStats from './judges/organizationUintCalculateEmployeeStats';\nimport vacationInsert from './userProfile/vacation/vacationInsert';\nimport vacationDelete from './userProfile/absents/vacationDelete';\nimport GetVacation from './userProfile/vacation/vacationGet';\n\nexport const BFF_URL = {\n  local: 'http://localhost:8080',\n  development: 'https://sss-erp-bff.oykos.me',\n  staging: 'http://localhost:8080',\n  production: 'http://localhost:8080',\n};\n\nexport const GraphQL = {\n  fetch: (query: string, variables?: any): Promise<any> => {\n    return fetch(BFF_URL[getEnvironment()], {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({query, variables}),\n    })\n      .then(response => response.json())\n      .catch(error => console.error(error));\n  },\n  organizationUnits: organizationUnits,\n  basicInfoUpdate: basicInfoUpdate,\n  basicInfoGet: basicInfoGet,\n  basicInfoInsert: basicInfoInsert,\n  experienceOverview: experienceOverview,\n  experienceInsert: experienceInsert,\n  experienceDelete: experienceDelete,\n  userProfileOverview: userProfileOverview,\n  jobTenderOverview: jobTenderOverview,\n  jobTenderDelete: jobTenderDelete,\n  jobTenderApplicationDelete: jobTenderApplicationDelete,\n  jobTenderInsert: jobTenderInsert,\n  jobPositionSearch: jobPositionSearch,\n  jobTenderTypesSearch: jobTenderTypesSearch,\n  jobTenderApplicationOverview: jobTenderApplicationOverview,\n  jobTenderApplicationInsert: jobTenderApplicationInsert,\n  foreignerPermits: foreignerPermits,\n  educationOverview: educationOverview,\n  educationInsert: educationInsert,\n  educationDelete: educationDelete,\n  familyOverview: familyOverview,\n  familyInsert: familyInsert,\n  familyDelete: familyDelete,\n  foreignerPermitDelete: foreignerPermitDelete,\n  foreignerPermitInsert: foreignerPermitInsert,\n  systematizationOverview: systematizationOverview,\n  systematizationInsert: systematizationInsert,\n  systematizationDetails: systematizationDetails,\n  systematizationDelete: systematizationDelete,\n  salaryParamsInsert: salaryParamsInsert,\n  salaryParamsOverview: salaryParamsOverview,\n  jobPositionsGet: jobPositionsGet,\n  jobPositionsOrganizationUnit: jobPositionsOrganizationUnit,\n  resolutionOverview: resolutionOverview,\n  resolutionInsert: resolutionInsert,\n  resolutionDelete: resolutionDelete,\n  evaluationOverview: evaluationOverview,\n  evaluationInsert: evaluationInsert,\n  evaluationDelete: evaluationDelete,\n  revisionOverview: revisionOverview,\n  revisionDetails: revisionDetails,\n  revisionDelete: revisionDelete,\n  revisionInsert: revisionInsert,\n  organizationUnitInsert: organizationUnitInsert,\n  organizationUnitDelete: organizationUnitDelete,\n  jobPositionInOrganizationUnitInsert: jobPositionInOrganizationUnitInsert,\n  jobPositionInOrganizationUnitDelete: jobPositionInOrganizationUnitDelete,\n  jobPositionsAvailableOrganizationUnit: jobPositionsAvailableOrganizationUnit,\n  employeeInOrganizationUnitInsert: employeeInOrganizationUnitInsert,\n  employeeInOrganizationUnitDelete: employeeInOrganizationUnitDelete,\n  absentOverview: absentOverview,\n  absentTypesOverview: absentTypesOverview,\n  absentInsert: absentInsert,\n  absentDelete: absentDelete,\n  judgeOverview: judgeOverview,\n  judgeNormDelete: judgeNormDelete,\n  judgeNormInsert: judgeNormInsert,\n  judgeResolutionDelete: judgeResolutionDelete,\n  judgeResolutionInsert: judgeResolutionInsert,\n  judgeResolutionOverview: judgeResolutionOverview,\n  organizationUintCalculateEmployeeStats: organizationUintCalculateEmployeeStats,\n  settingsDropdownOverview: settingsDropdownOverview,\n  getSuppliersOverview: getSuppliersOverview,\n  getVacation: GetVacation,\n  vacationInsert: vacationInsert,\n  vacationDelete: vacationDelete,\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/internalRevision/revisionDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/internalRevision/revisionDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/internalRevision/revisionInsert.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InternalRevisionFormValues' is defined but never used.","line":2,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InternalRevisionDetails' is defined but never used.","line":3,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {GraphQL} from '..';\nimport {InternalRevisionFormValues, InternalRevisionInsertParams} from '../../../screens/internalRevision/types';\nimport {InternalRevisionDetails, InternalRevisionResponse} from '../../../types/graphql/internalRevision';\n\nconst revisionInsert = async (\n  data: InternalRevisionInsertParams,\n): Promise<InternalRevisionResponse['data']['revisions_Insert']> => {\n  const queryIdentifier = 'revisions_Insert';\n\n  const mutation = `mutation($data: RevisionInsertMutation!) {\n    revisions_Insert(data: $data) {\n        message\n        status\n        data\n        item {\n            id\n            revision_type {\n                id\n                title\n            }\n            revisor_user_profile {\n                id\n                title\n            }\n            revision_organization_unit {\n                id\n                title\n                value\n            }\n            responsible_user_profile {\n                id\n                title\n            }\n            implementation_user_profile {\n                id\n                title\n            }\n            title\n            planned_year\n            planned_quarter\n            serial_number\n            priority\n            date_of_revision\n            date_of_acceptance\n            date_of_rejection\n            implementation_suggestion\n            implementation_month_span\n            date_of_implementation\n            state_of_implementation\n            implementation_failed_description\n            second_implementation_month_span\n            second_date_of_revision\n            file_id\n            ref_document\n        }\n    }\n}`;\n\n  const response = await GraphQL.fetch(mutation, {data});\n\n  return response?.data?.[queryIdentifier] || {};\n};\n\nexport default revisionInsert;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/internalRevision/revisionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/internalRevision/useRevision.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[221,224],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[221,224],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\n\nconst initialState = {item: {}, total: 0, message: '', status: ''};\n\nconst useRevisionDetails = (id: number) => {\n  const [data, setData] = useState<any>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchInternalRevisionDetails = async () => {\n    if (!id) {\n      setData({item: []});\n      return;\n    }\n    const internalRevisionDetails = await GraphQL.revisionDetails(id);\n    setData(internalRevisionDetails);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchInternalRevisionDetails();\n  }, [id]);\n\n  return {data, loading, refetch: fetchInternalRevisionDetails};\n};\n\nexport default useRevisionDetails;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/internalRevision/useRevisionDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/internalRevision/useRevisionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/internalRevision/useRevisionOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[395,398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[395,398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[538,541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[538,541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {InternalRevisionsParams} from '../../../types/graphql/internalRevision';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nconst useRevisionOverview = ({\n  page,\n  size,\n  id,\n  organization_unit_id,\n  revisor_user_profile_id,\n}: InternalRevisionsParams) => {\n  const [data, setData] = useState<any>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchInternalRevision = async () => {\n    const internalRevision: any = await GraphQL.revisionOverview(\n      page,\n      size,\n      id,\n      organization_unit_id,\n      revisor_user_profile_id,\n    );\n    setData(internalRevision);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchInternalRevision();\n  }, [page, size, id, organization_unit_id, revisor_user_profile_id]);\n\n  return {data, loading, refetch: fetchInternalRevision};\n};\n\nexport default useRevisionOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/jobPositionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/jobPositionsAvailableOrganizationUnit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/jobPositionsOrganizationUnit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/jobPositionsSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/useJobPositionOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[230,233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[230,233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[365,368],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[365,368],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nconst useJobPositionOverview = (search: string) => {\n  const [data, setData] = useState<any>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchJobPositions = async () => {\n    const jobPositions: any = await GraphQL.jobPositionsGet(search);\n    setData(jobPositions);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchJobPositions();\n  }, [search]);\n\n  return {data, loading, refetch: fetchJobPositions};\n};\n\nexport default useJobPositionOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/useJobPositionsAvailableOrganizationUnit.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'JobPositionResponse' is defined but never used.","line":3,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[540,543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[540,543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {JobPositionResponse} from '../../../types/graphql/useJobPositions';\nimport {DropdownDataNumber} from '../../../types/dropdownData';\n\nconst useJobPositionsAvailableOrganizationUnit = (\n  organization_unit_id?: number,\n  office_unit_id?: number,\n  onSuccess?: () => void,\n) => {\n  const [positions, setData] = useState<DropdownDataNumber[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  const fetchJobTenderTypes = async () => {\n    const jobPositions: any = await GraphQL.jobPositionsAvailableOrganizationUnit(organization_unit_id, office_unit_id);\n    setData(jobPositions?.items || []);\n    setLoading(false);\n    onSuccess && onSuccess();\n  };\n\n  useEffect(() => {\n    fetchJobTenderTypes();\n  }, [office_unit_id]);\n\n  return {positions, loading};\n};\n\nexport default useJobPositionsAvailableOrganizationUnit;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/useJobPositionsOrganizationUnit.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[488,491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[488,491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {JobPositionResponse} from '../../../types/graphql/useJobPositions';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nconst useJobPositionsOrganizationUnit = (organization_unit_id?: number) => {\n  const [positions, setData] = useState<JobPositionResponse>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchJobTenderTypes = async () => {\n    const jobPositions: any = await GraphQL.jobPositionsOrganizationUnit(organization_unit_id);\n    setData(jobPositions);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchJobTenderTypes();\n  }, [organization_unit_id]);\n\n  return {positions, loading};\n};\n\nexport default useJobPositionsOrganizationUnit;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/useJobPositionsSearch.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[462,465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[462,465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {JobPositionResponse} from '../../../types/graphql/useJobPositions';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nconst useJobPositionSearch = (search: string) => {\n  const [positions, setData] = useState<JobPositionResponse>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchJobTenderTypes = async () => {\n    const jobPositions: any = await GraphQL.jobPositionSearch(search);\n    setData(jobPositions);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchJobTenderTypes();\n  }, [search]);\n\n  return {positions, loading};\n};\n\nexport default useJobPositionSearch;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/useJobTendersTypesSearch.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[693,696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[693,696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useMemo, useState} from 'react';\nimport {GraphQL} from '..';\nimport {JobTenderTypeResponse} from '../../../types/graphql/useJobTendersTypes';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nconst useJobTendersTypesSearch = (search: string) => {\n  const [types, setData] = useState<JobTenderTypeResponse>(initialState);\n  const [loading, setLoading] = useState(true);\n  const typesUnitsList = useMemo(() => {\n    return [\n      {id: 0, title: 'Svi tipovi oglasa'},\n      ...types.items.map(unit => {\n        return {id: unit.id, title: unit.title};\n      }),\n    ];\n  }, [types]);\n\n  const fetchJobTenderTypes = async () => {\n    const jobTenderTypes: any = await GraphQL.jobTenderTypesSearch(search);\n    setData(jobTenderTypes);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchJobTenderTypes();\n  }, [search]);\n\n  return {types, typesUnitsList, loading};\n};\n\nexport default useJobTendersTypesSearch;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenderTypes/jobTenderTypesSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderApplicationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderApplicationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderApplicationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderApplicationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderApplicationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderApplicationOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[371,374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[371,374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[524,527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[524,527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {JobTenderApplicationsParams} from '../../../types/graphql/jobTenders';\nimport {GraphQL} from '..';\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nconst useJobTenderApplicationOverview = ({page, size, id = 0, job_tender_id = 0}: JobTenderApplicationsParams) => {\n  const [data, setData] = useState<any>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchJobTenderApplications = async () => {\n    const jobTenderApplications: any = await GraphQL.jobTenderApplicationOverview({\n      page,\n      size,\n      id,\n      job_tender_id,\n    });\n    setData(jobTenderApplications);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchJobTenderApplications();\n  }, [page, size, id, job_tender_id]);\n\n  return {data, loading, refreshData: fetchJobTenderApplications};\n};\n\nexport default useJobTenderApplicationOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[723,726],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[723,726],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {JobTendersListFilters} from '../../../screens/jobTenders';\nimport {JobTendersResponse} from '../../../types/graphql/jobTenders';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nexport interface UseJobTendersParams extends JobTendersListFilters {\n  id?: number;\n  page: number;\n  size: number;\n}\n\nconst useJobTenderOverview = ({page, size, id, organization_unit_id, active, type_id}: UseJobTendersParams) => {\n  const [data, setData] = useState<JobTendersResponse['data']['jobTenders_Overview']>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchJobTenders = async () => {\n    const jobTenders: any = await GraphQL.jobTenderOverview({\n      page,\n      size,\n      id: id ? id : 0,\n      organization_unit_id: organization_unit_id ? organization_unit_id.id : 0,\n      active: active ? active.id : true,\n      type_id: type_id?.id || 0,\n    });\n    setData(jobTenders);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchJobTenders();\n  }, [page, size, id, active, organization_unit_id, type_id]);\n\n  return {data, loading, refetch: fetchJobTenders};\n};\n\nexport default useJobTenderOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeNormDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeNormInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeResolutionDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeResolutionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeResolutionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/organizationUintCalculateEmployeeStats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeNormDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeNormInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeResolutionDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeResolutionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeResolutionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useOrganizationUintCalculateEmployeeStats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnits/organizationUnitDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnits/organizationUnitInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnits/organizationUnitOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnits/useOrganizationUnitDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnits/useOrganizationUnitInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnits/useOrganizationUnits.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[256,259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[256,259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useMemo, useState} from 'react';\nimport {GraphQL} from '..';\nimport {OrganizationUnit} from '../../../types/graphql/organizationUnitsTypes';\nimport {REQUEST_STATUSES} from '../../constants';\n\nconst useOrganizationUnitOverview = (props?: any, notParent?: boolean) => {\n  const [organizationUnits, setOrganizationUnits] = useState<OrganizationUnit[]>([]);\n  const organizationUnitsList = useMemo(() => {\n    return [\n      {id: 0, title: 'Sve organizacione jedinice'},\n      ...organizationUnits.map(unit => {\n        return {id: unit.id, title: unit.title};\n      }),\n    ];\n  }, [organizationUnits]);\n\n  const fetchOrganizationUnits = async () => {\n    GraphQL?.organizationUnits().then(response => {\n      if (response?.status === REQUEST_STATUSES.success) {\n        delete response.message;\n        delete response.status;\n        if (notParent) response.items = response.items?.filter(item => !item.parent_id);\n        setOrganizationUnits(response.items as OrganizationUnit[]);\n      } else {\n        alert(`Login failed due to error - ${response.message}`);\n      }\n    });\n  };\n\n  useEffect(() => {\n    fetchOrganizationUnits();\n  }, [props]);\n\n  return {organizationUnits, organizationUnitsList, fetch: fetchOrganizationUnits};\n};\n\nexport default useOrganizationUnitOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsEmployees/employeeInOrganizationUnitDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsEmployees/employeeInOrganizationUnitInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsEmployees/useOrganizationUnitEmployeeDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsEmployees/useOrganizationUnitEmployeeInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsJobPositions/jobPositionInOrganizationUnitDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsJobPositions/jobPositionInOrganizationUnitInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsJobPositions/useOrganizationUnitDeleteJobPosition.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsJobPositions/useOrganizationUnitInsertJobPosition.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/settingsDropdown/settingsDropdownOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/settingsDropdown/useSettingsDropdownOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[832,835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[832,835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {SettingsDropdown, SettingsDropdownOverviewParams} from '../../../types/graphql/settingsDropdownType';\nimport {DropdownDataNumber} from '../../../types/dropdownData';\n\nconst useSettingsDropdownOverview = ({entity, page, size, id}: SettingsDropdownOverviewParams) => {\n  const [data, setData] = useState<SettingsDropdown[]>();\n  const [options, setOptions] = useState<DropdownDataNumber[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  const getSettingsDropdownOverview = async () => {\n    const response = await GraphQL.settingsDropdownOverview({entity: entity, page: page, size: size, id: id});\n\n    //Ask filip if we need array of items here\n    const data = response?.items || null;\n\n    setData(data || []);\n    setOptions(data?.map((item: any) => ({title: item.title, id: item.id})) || []);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getSettingsDropdownOverview();\n  }, [entity, id, page, size]);\n\n  return {data: data, loading, refetch: getSettingsDropdownOverview, options};\n};\n\nexport default useSettingsDropdownOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/suppliers/getSuppliers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/suppliers/useGetSuppliersOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/systematizationDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/systematizationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/systematizationsDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/systematizationsInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/useSystematizationGetDetails.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[159,162],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[159,162],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[278,281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[278,281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\n\nconst useSystematizationDetails = (id: number) => {\n  const [data, setData] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  const getSystematizationDetails = async (onSuccess?: (item: any) => void) => {\n    const response = await GraphQL.systematizationDetails(id);\n    //Ask filip if we need array of items here\n    const data = response?.item || null;\n\n    setData(data);\n    setLoading(false);\n    onSuccess && onSuccess(data);\n  };\n\n  useEffect(() => {\n    getSystematizationDetails();\n  }, [id]);\n\n  return {systematizationDetails: data, loading, refetch: getSystematizationDetails};\n};\n\nexport default useSystematizationDetails;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/useSystematizations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[481,484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[481,484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {SystematizationsParams, SystematizationType} from '../../../types/graphql/systematizationsTypes';\n\nconst useSystematizationOverview = ({page, size, id, organization_unit_id, year, search}: SystematizationsParams) => {\n  const [data, setData] = useState<SystematizationType[]>();\n  const [loading, setLoading] = useState(true);\n\n  const fetchSystematizations = async () => {\n    const systematizations: any = await GraphQL.systematizationOverview({\n      page,\n      size,\n      id,\n      organization_unit_id,\n      year,\n      search,\n    });\n\n    setData(systematizations?.items);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchSystematizations();\n  }, [page, size, id, organization_unit_id, year, search]);\n\n  return {data, loading, refetch: fetchSystematizations};\n};\n\nexport default useSystematizationOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/useSystematizationsDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/useSystematizationsInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/absentDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/absentInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/absentOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/absentsType.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/useAbsentDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/useAbsentInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/useAbsentOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/useAbsentsType.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/useVacationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/vacationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/basicInfo/basicInfoGet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/basicInfo/basicInfoInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/basicInfo/basicInfoUpdate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/basicInfo/useBasicInfoGet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/basicInfo/useBasicInfoInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/basicInfo/useBasicInfoUpdate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/educationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/educationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/educationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/useEducationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/useEducationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/useEducationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/evaluationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/evaluationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/evalutationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/useEvaluationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/useEvaluationInsert.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserProfileEvaluation' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useState} from 'react';\nimport {GraphQL} from '../..';\nimport {\n  UserProfileEvaluation,\n  UserProfileEvaluationFormValues,\n} from '../../../../types/graphql/userProfileGetEvaluations';\n\nconst useEvaluationInsert = () => {\n  const [loading, setLoading] = useState(false);\n\n  const insertProfileEvaluation = async (\n    data: UserProfileEvaluationFormValues,\n    onSuccess?: () => void,\n    onError?: () => void,\n  ) => {\n    setLoading(true);\n    const response = await GraphQL.evaluationInsert(data);\n    if (response.status === 'success') {\n      onSuccess && onSuccess();\n    } else {\n      onError && onError();\n    }\n    setLoading(false);\n  };\n\n  return {loading, mutate: insertProfileEvaluation};\n};\n\nexport default useEvaluationInsert;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/useEvaluationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/experienceDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/experienceInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/experienceOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/useExperienceDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/useExperienceInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/useExperienceOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/familyDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/familyOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/familyinsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/useFamilyDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/useFamilyInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/useFamilyOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/resolutionDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/resolutionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/resolutionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/useResolutionDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/useResolutionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/useResolutionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/salaryParams/salarayParamsInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/salaryParams/salaryParamsOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/salaryParams/useSalaryParamsOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[176,179],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[176,179],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '../..';\n\nconst useSalaryParamsOverview = (id: number) => {\n  const [salaryParams, setSalaryParams] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  const fetchSalaryParams = async () => {\n    const response = await GraphQL.salaryParamsOverview(id);\n\n    if (response) {\n      setSalaryParams(response);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchSalaryParams();\n  }, [id]);\n\n  return {data: salaryParams, loading, refetch: fetchSalaryParams};\n};\n\nexport default useSalaryParamsOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/salaryParams/useSalaryParamsinsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/useUserProfiles.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[785,788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[785,788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {UserProfileResponse} from '../../../types/graphql/userProfiles';\nimport {EmployeeListFilters} from '../../../screens/employees';\nimport {PaginationProps} from '../../../types/paginationParams';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\ninterface UserProfileHookParams extends EmployeeListFilters, PaginationProps {\n  id?: number;\n  name?: string;\n}\n\nconst useUserProfiles = ({\n  page,\n  size,\n  id,\n  is_active,\n  job_position_id,\n  organization_unit_id,\n  name,\n}: UserProfileHookParams) => {\n  const [data, setData] = useState<UserProfileResponse>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchEmployees = async () => {\n    const userProfiles: any = await GraphQL.userProfileOverview({\n      page,\n      size,\n      id: id ?? 0,\n      is_active: is_active ? is_active.id : true,\n      job_position_id: job_position_id ? job_position_id.id : 0,\n      organization_unit_id: organization_unit_id ? organization_unit_id.id : 0,\n      name: name ?? '',\n    });\n    setData(userProfiles);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchEmployees();\n  }, [page, size, id, is_active, job_position_id, organization_unit_id, name]);\n\n  return {data, loading, refetch: fetchEmployees};\n};\n\nexport default useUserProfiles;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/userProfileOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/vacation/useVacationGet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/vacation/useVacationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/vacation/vacationGet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/vacation/vacationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/alertWrapper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/deleteModal/deleteModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/deleteModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/deleteModal/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[74,77],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[74,77],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[114,117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[114,117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[146,149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[146,149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface DeleteModalProps {\n  open: boolean;\n  onClose: (action?: any) => void;\n  handleDelete: (action?: any) => void;\n  customContent?: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/infoPreview/infoPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/infoPreview/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/mainTitle.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/screenWrapper.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[545,548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[545,548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1123,1126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1123,1126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {ReactElement, ReactNode, forwardRef} from 'react';\nimport {Breadcrumbs} from 'client-library';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: #f8f8f8;\n  padding: 28px 40px;\n  height: calc(100vh - 157px);\n  overflow-y: auto;\n  box-sizing: border-box;\n\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nconst StyledBreadcrumbs = styled(Breadcrumbs)`\n  padding: 0;\n  margin: 0;\n`;\n\ninterface ScreenWrapperProps {\n  children: ReactNode;\n  context: any;\n}\n\nexport const ScreenWrapper = forwardRef<HTMLDivElement, ScreenWrapperProps>(({children, context}, ref) => {\n  const breadcrumbs = context?.breadcrumbs;\n\n  const breadcrumbItems = breadcrumbs?.get();\n\n  const navigate = context?.navigation?.navigate;\n\n  const handleNavigation = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | undefined,\n    item?: {\n      name: string;\n      to: string;\n      icon?: ReactElement;\n    },\n  ) => {\n    e?.preventDefault();\n    const newBreacrumbs = [...breadcrumbItems];\n    const index = newBreacrumbs.findIndex((breadcrumb: any) => breadcrumb.name === item?.name);\n    newBreacrumbs.splice(index + 1, newBreacrumbs.length - index);\n    breadcrumbs.set(newBreacrumbs);\n    navigate(item?.to);\n  };\n\n  return (\n    <Container ref={ref}>\n      <StyledBreadcrumbs items={breadcrumbItems} onClick={handleNavigation} />\n      {children}\n    </Container>\n  );\n});\n\nScreenWrapper.displayName = 'ScreenWrapper';\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/sectionBox.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/usePrompt.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[277,280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[277,280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useCallback, useEffect} from 'react';\n\nfunction useConfirmExit(confirmExit: () => boolean, when = true) {\n  useEffect(() => {\n    if (!when) {\n      return;\n    }\n\n    const originalPushState = window.history.pushState;\n\n    window.history.pushState = function (state: any, title: string, url?: string | null) {\n      const result = confirmExit();\n      if (result !== false) {\n        originalPushState.apply(window.history, [state, title, url]);\n      }\n    };\n\n    return () => {\n      window.history.pushState = originalPushState;\n    };\n  }, [confirmExit, when]);\n}\n\nexport function usePrompt(message: string, when = true) {\n  useEffect(() => {\n    if (when) {\n      window.onbeforeunload = function () {\n        return message;\n      };\n    }\n\n    return () => {\n      window.onbeforeunload = null;\n    };\n  }, [message, when]);\n\n  const confirmExit = useCallback(() => {\n    const confirm = window.confirm(message);\n    return confirm;\n  }, [message]);\n  useConfirmExit(confirmExit, when);\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/dropdownData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/environment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/ProfileResolutionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/employeeInOrganizationUnitTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/foreignerPermits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/internalRevision.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/jobPositionInOrganizationUnitInsertTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/jobPositions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/jobTenders.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1048,1051],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1048,1051],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1404,1407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1404,1407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {ModalProps} from '../../screens/employees/education/types';\nimport {DropdownDataNumber} from '../dropdownData';\nimport {OrganizationUnit} from './organizationUnitsTypes';\n\nimport {JobTenderType} from './useJobTendersTypes';\n\nexport interface DropdownItemType {\n  id: number;\n  title: string;\n}\n\nexport interface JobTender {\n  id: number;\n  organization_unit_id: number;\n  organization_unit?: DropdownItemType;\n  type?: DropdownItemType;\n  description: string;\n  serial_number: string;\n  date_of_start: string | null;\n  date_of_end: string | null;\n  created_at?: string;\n  updated_at?: string;\n  file_id: number;\n  job_position?: DropdownItemType;\n}\n\nexport interface JobTenderParams {\n  id: number;\n  organization_unit_id: number;\n  type?: DropdownItemType;\n  description: string;\n  serial_number: string;\n  date_of_start: string;\n  date_of_end: string | null;\n  created_at?: string;\n  updated_at?: string;\n  file_id: number;\n}\n\nexport type JobTenderForm = {\n  id: number | null;\n  organization_unit_id: DropdownDataNumber | null;\n  type?: any;\n  description: string;\n  serial_number: string;\n  date_of_start: Date | null;\n  date_of_end: Date | null;\n  file_id: number;\n};\n\nexport interface JobTendersModalProps extends ModalProps {\n  jobTenderTypeOptions: JobTenderType[];\n  organizationUnitsList: Pick<OrganizationUnit, 'id' | 'title'>[];\n  onClose: () => void;\n  refetch: () => void;\n  alert: any;\n}\n\nexport interface JobTenderApplication {\n  id?: number;\n  status: string;\n  job_tender?: DropdownItemType | null;\n  user_profile?: DropdownItemType;\n  type: 'external' | 'internal';\n  first_name?: string;\n  last_name?: string;\n  official_personal_id?: string;\n  date_of_birth: string | null;\n  citizenship?: string;\n  nationality?: string;\n  evaluation?: string;\n  date_of_application: string;\n  created_at?: string;\n  updated_at?: string;\n  file_id?: number;\n}\n\nexport interface JobTenderApplicationInsertParams\n  extends Omit<\n    JobTenderApplication,\n    'job_tender' | 'user_profile' | 'create_at' | 'updated_at' | 'date_of_birth' | 'date_of_application'\n  > {\n  job_tender_id?: number;\n  user_profile_id?: number;\n  active?: boolean;\n  date_of_birth?: string | null;\n  date_of_application: string | null;\n}\n\nexport interface JobTenderApplicationsParams {\n  page: number;\n  size: number;\n  job_tender_id?: number;\n  id?: number;\n}\n\nexport interface JobTenderApplicationResponse {\n  items: JobTenderApplication[];\n  message: string;\n  status: string;\n  total: number;\n}\n\nexport interface JobTenderApplicationResponse {\n  data: {\n    jobTender_Applications_Insert: {\n      status: string;\n      message: string;\n      item: JobTenderApplication;\n    };\n    jobTender_Applications: {\n      status: string;\n      message: string;\n      items: JobTenderApplication[];\n      total: number;\n    };\n    jobTender_Applications_Delete: {\n      status: string;\n      message: string;\n    };\n  };\n}\n\nexport interface JobTendersResponse {\n  data: {\n    jobTenders_Overview: {\n      status: string;\n      message: string;\n      items: JobTender[];\n      total: number;\n    };\n    jobTender_Details: {\n      status: string;\n      message: string;\n      items: JobTender[];\n    };\n    jobTenders_Delete: {\n      status: string;\n      message: string;\n    };\n    jobTenders_Insert: {\n      status: string;\n      message: string;\n      item: JobTender[];\n    };\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/judges.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/organizationUnitsTypes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[251,254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[251,254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface OrganizationUnit {\n  id: number;\n  parent_id: number;\n  number_of_judges: number;\n  title: string;\n  abbreviation: string;\n  description?: string;\n  address?: string;\n  color: string;\n  folder_id: number;\n  icon: string;\n  children?: any;\n}\n\nexport interface OrganizationUnitsResponse {\n  data: {\n    organizationUnits: {\n      status?: string;\n      message?: string;\n      items?: OrganizationUnit[];\n    };\n  };\n}\n\nexport interface OrganizationUnitInsertResponse {\n  data: {\n    organizationUnits_Insert: {\n      status?: string;\n      message?: string;\n      item?: OrganizationUnit;\n    };\n  };\n}\n\nexport interface OrganizationUnitDeleteResponse {\n  data: {\n    organizationUnits_Delete: {\n      status?: string;\n      message?: string;\n    };\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/profileAbsentsDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/profileAbsentsInsertType.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/profileAbsentsTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/profileVacationTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/settingsDropdownOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/settingsDropdownType.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/suppliersOverviewTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/systematizationsDeleteTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/systematizationsGetDetailsTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/systematizationsInsertTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/systematizationsTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/useJobPositions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/useJobTendersTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileDeleteEducation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileDeleteEvaluation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileDeleteExperienceTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileDeleteFamilyTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileDeleteResolution.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetEducation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetEvaluations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetExperienceTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetFamilyTypes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[570,573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[570,573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {DropdownDataString} from '../dropdownData';\n\nexport interface UserProfileFamily {\n  id: number;\n  user_profile_id: number;\n  first_name: string;\n  last_name: string;\n  birth_last_name: string;\n  date_of_birth: string;\n  country_of_birth: string;\n  city_of_birth: string;\n  nationality: string;\n  citizenship: string;\n  father_name: string;\n  mother_name: string;\n  mother_birth_last_name: string;\n  official_personal_id: string;\n  gender: string;\n  insurance_coverage: string;\n  employee_relationship: string;\n  handicapped_person: boolean;\n  national_minority: any;\n  created_at?: string;\n  updated_at?: string;\n  address: string;\n}\n\nexport type UserProfileFamilyParams = {\n  id: number | null;\n  user_profile_id: number;\n  first_name: string;\n  last_name: string;\n  date_of_birth: Date | null;\n  country_of_birth: DropdownDataString | null;\n  city_of_birth: string | DropdownDataString | null;\n  nationality: DropdownDataString | null;\n  citizenship: DropdownDataString | null;\n  father_name: string;\n  mother_name: string;\n  mother_birth_last_name: string;\n  official_personal_id: string;\n  gender: string;\n  insurance_coverage: string;\n  employee_relationship: string;\n  handicapped_person: boolean;\n  national_minority: DropdownDataString | null;\n  address: string;\n};\n\nexport interface UserProfileGetFamilyResponse {\n  data: {\n    userProfile_Family: {\n      status?: string;\n      message?: string;\n      items?: UserProfileFamily[];\n    };\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetResolution.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetSalaryParams.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertBasicInfo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertEducation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertEvaluation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertExperienceTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertFamilyTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertSalaryParams.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfiles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownDataBoolean' is defined but never used.","line":1,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {DropdownDataBoolean, DropdownDataNumber, DropdownDataString} from '../dropdownData';\n\nexport interface UserProfileBasicInfo {\n  id: number;\n  first_name: string;\n  last_name: string;\n  date_of_birth: string;\n  birth_last_name: string;\n  country_of_birth: string;\n  city_of_birth: string;\n  nationality: string;\n  citizenship: string;\n  address: string;\n  father_name: string;\n  mother_name: string;\n  mother_birth_last_name: string;\n  bank_account: string;\n  bank_name: string;\n  official_personal_id: string;\n  official_personal_document_number: string;\n  official_personal_document_issuer: string;\n  gender: string;\n  single_parent: boolean;\n  housing_done: boolean;\n  housing_description: string;\n  revisor_role: boolean;\n  marital_status: string;\n  date_of_taking_oath: string;\n  date_of_becoming_judge: string;\n  email: string;\n  phone: string;\n  organization_unit: DropdownDataNumber;\n  job_position: DropdownDataNumber;\n  contract: UserContract;\n  national_minority: string;\n}\n\nexport interface UserProfileBasicInfoFormValues {\n  id: number;\n  first_name: string;\n  last_name: string;\n  date_of_birth: Date | null;\n  birth_last_name: string;\n  country_of_birth: string;\n  city_of_birth: string;\n  nationality: DropdownDataString | null;\n  citizenship: DropdownDataString | null;\n  address: string;\n  father_name: string;\n  mother_name: string;\n  mother_birth_last_name: string;\n  official_personal_id: string;\n  official_personal_document_number: string;\n  official_personal_document_issuer: DropdownDataString | null;\n  gender: DropdownDataString | null;\n  single_parent: DropdownDataString | null;\n  housing_done: DropdownDataString | null;\n  revisor_role: boolean;\n  housing_description: string;\n  marital_status: DropdownDataString | null;\n  date_of_becoming_judge: Date | null;\n  email: string;\n  phone: string;\n  national_minority: DropdownDataString | null;\n  secondary_email: string;\n  pin: string;\n  password: string;\n  middle_name: string;\n  role_id: number;\n  contract: BasicInfoUserContractValues;\n}\n\nexport interface UserContract {\n  id: number;\n  user_profile: DropdownDataNumber | null;\n  contract_type: DropdownDataNumber | null;\n  job_position_in_organization_unit: DropdownDataNumber | null;\n  organization_unit: DropdownDataNumber | null;\n  department: DropdownDataNumber | null;\n  abbreviation: string;\n  description: string;\n  active: boolean;\n  serial_number: string;\n  net_salary: string;\n  gross_salary: string;\n  bank_account: string;\n  bank_name: string;\n  date_of_eligibility: string;\n  date_of_start: string;\n  date_of_end: string;\n  file_id: number;\n}\n\nexport interface BasicInfoUserContractValues {\n  contract_type_id: DropdownDataNumber | null;\n  organization_unit_id: DropdownDataNumber | null;\n  department_id: DropdownDataNumber | null;\n  date_of_start: Date | null;\n  date_of_end: Date | null;\n  date_of_eligibility: Date | null;\n  file_id: number | null;\n  job_position_in_organization_unit_id: DropdownDataNumber | null;\n  user_profile_id: DropdownDataNumber | null;\n  active: boolean;\n}\n\nexport interface ContractType {\n  abbreviation: string;\n  color: string;\n  created_at: string;\n  description: string;\n  icon: string;\n  id: number;\n  title: string;\n  updated_at: string;\n}\n\nexport interface UserProfileBasicResponse {\n  data: {\n    userProfile_Basic: {\n      status?: string;\n      message?: string;\n      item?: UserProfileBasicInfo;\n    };\n  };\n}\n\nexport interface UserProfileParams {\n  page: number;\n  size: number;\n  id?: number;\n  is_active?: boolean;\n  organization_unit_id?: number;\n  job_position_id?: number;\n  name?: string;\n}\n\nexport interface UserProfile {\n  id: number;\n  first_name: string;\n  last_name: string;\n  date_of_birth: string;\n  email: string;\n  phone: string;\n  active: boolean;\n  is_judge: boolean;\n  is_judge_president: boolean;\n  role: DropdownDataNumber;\n  organization_unit: DropdownDataNumber;\n  job_position: DropdownDataNumber;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface UserProfileResponse {\n  items: UserProfile[];\n  message: string;\n  status: string;\n  total: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/micro-service-props.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[54,57],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[54,57],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface MicroserviceProps {\n  [key: string]: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/paginationParams.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/screen-props.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[42,45],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[42,45],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ScreenProps {\n  context: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/utils/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/utils/dateUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'parseForBFF' is defined but never used.","line":1,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":76}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const parseDate = (date: Date | string | null, parseForBFF?: boolean) => {\n  if (!date) return '';\n  const dateObj = new Date(date);\n  const day = dateObj.toLocaleDateString('sr-latn-SR', {day: '2-digit'});\n  const month = dateObj.toLocaleDateString('sr-latn-SR', {month: '2-digit'});\n  const year = dateObj.toLocaleDateString('sr-latn-SR', {year: 'numeric'}).replace('.', '');\n\n  return `${day}/${month}/${year}`;\n};\n\n// parses parseDate result back to Date object, e.g. 10/1/2022 to Date object\nexport const parseBackToDate = (dateString: string): Date => {\n  const [day, month, year] = dateString.split('/').map(Number);\n\n  return new Date(year, month - 1, day);\n};\n\nexport const calculateExperience = (startDate: Date | string, endDate: Date | string) => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const diffInMonths = end.getMonth() - start.getMonth() + 12 * (end.getFullYear() - start.getFullYear());\n\n  return diffInMonths;\n};\n\nexport const parseDateForBackend = (date: Date | null) => {\n  if (!date) return null;\n\n  const pickedDate = new Date(date);\n  pickedDate.setMinutes(pickedDate.getMinutes() - pickedDate.getTimezoneOffset());\n\n  return pickedDate.toISOString();\n};\n\nexport const parseToDate = (dateString: string | null) => {\n  if (!dateString) return null;\n\n  return new Date(dateString);\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/utils/getRouteName.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/utils/scrollToTheNextElement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/utils/useDebounce.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[79,82],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[79,82],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useState, useEffect} from 'react';\n\nexport const useDebounce = (value: any, milliSeconds: number) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, milliSeconds);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, milliSeconds]);\n\n  return debouncedValue;\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]