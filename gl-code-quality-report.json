[{"filePath":"/builds/erp/hr-ms-client/setupProxy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/JobTenderApplicationModal/JobTenderApplicationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2083,2086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2083,2086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2122,2125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2122,2125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":102,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":102,"endColumn":11,"fix":{"range":[3169,3179],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":103,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":103,"endColumn":11,"fix":{"range":[3196,3206],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":104,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":104,"endColumn":11,"fix":{"range":[3316,3326],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":105,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":105,"endColumn":11,"fix":{"range":[3425,3435],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":106,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":106,"endColumn":13,"fix":{"range":[3472,3484],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":107,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":107,"endColumn":13,"fix":{"range":[3558,3570],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":108,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":108,"endColumn":11,"fix":{"range":[3578,3588],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":109,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":109,"endColumn":13,"fix":{"range":[3627,3639],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":110,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":110,"endColumn":13,"fix":{"range":[3709,3721],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":111,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":111,"endColumn":9,"fix":{"range":[3729,3737],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4377,4380],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4377,4380],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4575,4578],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4575,4578],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":154,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4769,4772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4769,4772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7522,7525],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7522,7525],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7569,7572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7569,7572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":258,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7903,7906],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7903,7906],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":260,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7983,7986],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7983,7986],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":315,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10191,10194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10191,10194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":335,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":335,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10943,10946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10943,10946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":369,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12233,12236],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12233,12236],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":10,"fixableWarningCount":0,"source":"import {CheckIcon, Datepicker, Dropdown, Input, Modal, Theme, Typography} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport useUserProfiles from '../../services/graphql/userProfile/useUserProfiles';\nimport {DropdownDataNumber, DropdownDataString} from '../../types/dropdownData';\nimport {UserProfile} from '../../types/graphql/userProfiles';\nimport {parseDate} from '../../utils/dateUtils';\nimport {\n  ConfirmModalContent,\n  ModalContentWrapper,\n  Row,\n  RowFullWidth,\n  TriangleIcon,\n} from '../JobTenderApplicationModal/styles';\nimport {JobTenderApplication} from '../../types/graphql/jobTenders';\nimport {\n  applicationStatusOptions,\n  applicationTypeOptions,\n  evaluationTypeOptions,\n} from '../../screens/jobTenders/constants';\nimport useJobTenderApplicationsInsert from '../../services/graphql/jobTenders/useJobTenderApplicationInsert';\nimport {ScreenProps} from '../../types/screen-props';\nimport useBasicInfoGet from '../../services/graphql/userProfile/basicInfo/useBasicInfoGet';\n\ninterface JobTenderApplicationForm {\n  id: number;\n  type: DropdownDataString | null;\n  file_id: number;\n  status: DropdownDataString | null;\n  job_tender: DropdownDataNumber | null;\n  user_profile: DropdownDataNumber | null;\n  first_name: string;\n  last_name: string;\n  official_personal_id: string;\n  date_of_birth: string;\n  nationality: DropdownDataString | null;\n  evaluation: DropdownDataString | null;\n  date_of_application: string;\n}\n\nconst initialValues: JobTenderApplicationForm = {\n  id: 0,\n  type: {id: 'internal', title: 'Interni'},\n  file_id: 0,\n  status: {id: 'waiting', title: 'Na čekanju'},\n  job_tender: null,\n  user_profile: null,\n  first_name: '',\n  last_name: '',\n  official_personal_id: '',\n  date_of_birth: '',\n  nationality: null,\n  evaluation: null,\n  date_of_application: '',\n};\n\nexport interface JobTenderApplicationModalModalProps extends ScreenProps {\n  selectedItem?: JobTenderApplication;\n  open: boolean;\n  onClose: () => void;\n  refetchList: () => void;\n  countries?: any[];\n  jobTenderId: number;\n  alert: any;\n}\n\nexport const JobTenderApplicationModal: React.FC<JobTenderApplicationModalModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  refetchList,\n  countries,\n  jobTenderId,\n  alert,\n  ...props\n}) => {\n  const [selectedUserId, setSelectedIdUser] = useState<number>(0);\n  const [selectedUser, setSelectedUser] = useState<UserProfile>();\n  const [confirmationModal, setConfirmationModal] = useState<boolean>(false);\n  const [applicationType, setApplicationType] = useState<DropdownDataString>({\n    id: 'internal',\n    title: 'Interni',\n  });\n  const {data: userData} = useBasicInfoGet(selectedUserId);\n\n  const {data: userListData} = useUserProfiles({page: 1, size: 1000});\n\n  const citizenshipArray = useMemo(() => {\n    return countries?.map(country => {\n      return {\n        id: country.alpha_3_code,\n        title: country.nationality,\n      };\n    });\n  }, [countries]);\n\n  const item = useMemo(() => {\n    if (selectedItem?.type === 'external') setApplicationType({id: 'external', title: 'Eksterni'});\n\n    return selectedItem\n      ? {\n          ...selectedItem,\n          status: selectedItem?.status ? applicationStatusOptions.find(st => st.title === selectedItem?.status) : null,\n          type: selectedItem?.type ? applicationTypeOptions.find(st => st.id === selectedItem?.type) : null,\n          evaluation: selectedItem?.evaluation\n            ? evaluationTypeOptions.find(st => st.title === selectedItem?.evaluation)\n            : null,\n          nationality: selectedItem?.nationality\n            ? citizenshipArray?.find(st => st.title === selectedItem.nationality)\n            : null,\n        }\n      : initialValues;\n  }, [selectedItem]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n    watch,\n  } = useForm({defaultValues: item || initialValues});\n\n  const type = watch('type');\n  const status = watch('status');\n  const first_name = watch('first_name');\n  const last_name = watch('last_name');\n  const date_of_birth = watch('date_of_birth');\n  const nationality = watch('nationality');\n  const official_personal_id = watch('official_personal_id');\n  const evaluation = watch('evaluation');\n\n  const {mutate} = useJobTenderApplicationsInsert();\n\n  const onChangeSearchable = (value: any) => {\n    const item = userOptions.find(user => user.id === value.id);\n\n    if (item) {\n      setSelectedIdUser(item.id);\n      setSelectedUser(item);\n    }\n  };\n\n  const onChangeType = (value: any) => {\n    reset({\n      ...item,\n      user_profile: null,\n    });\n    setSelectedIdUser(0);\n    setSelectedUser(undefined);\n    setApplicationType(value);\n  };\n\n  const onSubmit = (values: any) => {\n    const data = {\n      ...values,\n      evaluation: values?.evaluation?.id,\n      status: values?.status?.title,\n      job_tender_id: jobTenderId,\n      date_of_birth: applicationType.id === 'external' ? parseDate(values?.date_of_birth, true) : values?.date_of_birth,\n      date_of_application: parseDate(values?.date_of_application, true),\n      type: applicationType.id,\n      file_id: 0,\n      user_profile_id: values.user_profile_id || 0,\n      nationality: values.nationality.title,\n    };\n\n    delete data.user_profile;\n    delete data.job_tender;\n    delete data.updated_at;\n    delete data.created_at;\n\n    try {\n      mutate(\n        data,\n        () => {\n          alert.success('Uspješno ste dodali prijavu na tender');\n          refetchList();\n          onClose();\n          reset(item);\n        },\n        () => {\n          alert.error('Greška prilikom dodavanja prijave na tender');\n          onClose();\n          reset(item);\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const userOptions = useMemo(\n    () => [...userListData.items.map(item => ({...item, title: `${item.first_name} ${item.last_name}`}))],\n    [userListData],\n  );\n\n  const toggleConfirmModal = () => {\n    setConfirmationModal(prev => !prev);\n  };\n\n  const navigateToUserCreation = () => {\n    props.context.navigation.navigate('/hr/employees/new-employee/basic-info', {\n      state: {user: {first_name, last_name, date_of_birth, evaluation, nationality, official_personal_id}},\n    });\n  };\n\n  // When the modal is opened, the fields are populated with the selected item.\n  useEffect(() => {\n    if (item) reset(item);\n  }, [item]);\n\n  // Choosing an internal user to populate the corresponding fields.\n  useEffect(() => {\n    if (userData) {\n      reset({\n        ...item,\n        first_name: userData.first_name,\n        last_name: userData.last_name,\n        official_personal_id: userData.official_personal_id,\n        date_of_birth: userData.date_of_birth,\n        nationality: citizenshipArray?.find(c => (c.id = userData.nationality)) || null,\n        user_profile: {id: userData.id, title: `${userData.first_name} ${userData.last_name}`},\n      });\n    }\n  }, [userData]);\n\n  useEffect(() => {\n    if (status?.id === 'accepted' && type?.id === 'external') {\n      setConfirmationModal(true);\n    }\n  }, [status]);\n\n  return (\n    <>\n      <Modal\n        open={open}\n        onClose={onClose}\n        leftButtonText=\"Otkaži\"\n        rightButtonText=\"Sačuvaj\"\n        rightButtonOnClick={handleSubmit(onSubmit)}\n        content={\n          <ModalContentWrapper>\n            <Row>\n              <Dropdown\n                label=\"TIP KANDIDATA:\"\n                name=\"type\"\n                options={applicationTypeOptions as any}\n                value={applicationType as any}\n                onChange={onChangeType}\n                rightOptionIcon={<CheckIcon stroke={Theme.palette.primary500} />}\n                error={errors.type?.message as string}\n              />\n\n              <Dropdown\n                label=\"PRETRAGA:\"\n                name={'searchable'}\n                options={userOptions as any}\n                isSearchable={true}\n                value={selectedUser as any}\n                onChange={value => onChangeSearchable(value)}\n                rightOptionIcon={<CheckIcon stroke={Theme.palette.primary500} />}\n                isDisabled={applicationType.id === 'external'}\n                placeholder=\"Unesite ime\"\n              />\n            </Row>\n            <Row>\n              <Input\n                {...register('first_name', {required: 'Ovo polje je obavezno'})}\n                label=\"IME:\"\n                disabled={applicationType.id === 'internal'}\n                error={errors.first_name?.message as string}\n              />\n\n              <Input\n                {...register('last_name', {required: 'Ovo polje je obavezno'})}\n                label=\"PREZIME:\"\n                disabled={applicationType.id === 'internal'}\n                error={errors.last_name?.message as string}\n              />\n            </Row>\n            <Row>\n              <Input\n                {...register('official_personal_id', {required: 'Ovo polje je obavezno'})}\n                label=\"BROJ LIČNE KARTE:\"\n                error={errors.official_personal_id?.message as string}\n                disabled={applicationType.id === 'internal'}\n              />\n\n              <Controller\n                name=\"date_of_birth\"\n                control={control}\n                rules={{required: 'Ovo polje je obavezno'}}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    onChange={onChange}\n                    label=\"DATUM ROĐENJA:\"\n                    name={name}\n                    value={value ? parseDate(value) : ''}\n                    error={errors.date_of_birth?.message as string}\n                    disabled={applicationType.id === 'internal'}\n                  />\n                )}\n              />\n            </Row>\n            <RowFullWidth>\n              <Controller\n                name=\"nationality\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => {\n                  return (\n                    <Dropdown\n                      onChange={onChange}\n                      value={value as any}\n                      name={name}\n                      style={{width: '100%'}}\n                      label=\"DRŽAVLJANSTVO:\"\n                      options={citizenshipArray || []}\n                      error={errors.nationality?.message as string}\n                      isDisabled={applicationType.id === 'internal'}\n                    />\n                  );\n                }}\n              />\n            </RowFullWidth>\n            <RowFullWidth>\n              <Controller\n                name=\"evaluation\"\n                control={control}\n                render={({field: {onChange, name, value}}) => {\n                  return (\n                    <Dropdown\n                      onChange={onChange}\n                      value={value as any}\n                      name={name}\n                      style={{width: '100%'}}\n                      label=\"OCJENA:\"\n                      options={evaluationTypeOptions || []}\n                      isDisabled={applicationType.id === 'internal'}\n                    />\n                  );\n                }}\n              />\n            </RowFullWidth>\n            <Row>\n              <Controller\n                name=\"date_of_application\"\n                control={control}\n                rules={{required: 'Ovo polje je obavezno'}}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    onChange={onChange}\n                    label=\"DATUM PRIJAVE:\"\n                    name={name}\n                    value={value ? parseDate(value) : ''}\n                    error={errors.date_of_application?.message as string}\n                  />\n                )}\n              />\n              <Controller\n                name=\"status\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => {\n                  return (\n                    <Dropdown\n                      onChange={onChange}\n                      value={value as any}\n                      name={name}\n                      label=\"STATUS:\"\n                      options={applicationStatusOptions || []}\n                      error={errors.status?.message as string}\n                      placeholder=\"Odaberite status\"\n                    />\n                  );\n                }}\n              />\n            </Row>\n          </ModalContentWrapper>\n        }\n        title={'DODAJTE NOVI OGLAS'}\n      />\n      <Modal\n        open={confirmationModal}\n        onClose={toggleConfirmModal}\n        width={450}\n        leftButtonText=\"Otkaži\"\n        rightButtonText=\"Nastavi\"\n        leftButtonOnClick={toggleConfirmModal}\n        rightButtonOnClick={navigateToUserCreation}\n        content={\n          <ConfirmModalContent>\n            <TriangleIcon />\n            <Typography content=\"Promjena statusa u prihvaćen\" variant=\"bodyLarge\" style={{fontWeight: 600}} />\n            <Typography\n              content={`Ukoliko kliknete nastavi, bićete upućeni na stranu dodavanje novog zaposlenog ${selectedUser?.first_name} ${selectedUser?.last_name} da bi ste mogli da prebacite njegov status u prihvaćen.`}\n              variant=\"bodySmall\"\n            />\n          </ConfirmModalContent>\n        }\n      />\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/JobTenderApplicationModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/absentsModal/absentsModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1591,1594],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1591,1594],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1902,1905],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1902,1905],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4563,4566],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4563,4566],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5174,5177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5174,5177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5213,5216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5213,5216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Typography, Modal, FileUpload, Dropdown, Datepicker, Input} from 'client-library';\nimport React, {useEffect, useState} from 'react';\nimport {FileUploadWrapper, FormGroup, ModalContentWrapper, UploadedFileContainer, UploadedFileWrapper} from './styles';\nimport {parseDate} from '../../utils/dateUtils';\nimport {Controller, useForm} from 'react-hook-form';\nimport {UserProfileAbsentsParams} from '../../types/graphql/profileAbsentsTypes';\nimport {AbsentsModalProps} from '../../screens/employees/absents/types';\nimport useOrganizationUnits from '../../services/graphql/organizationUnits/useOrganizationUnits';\nimport {dropdownAbsentsOptions, dropdownOptions, dropdownVacationOptions} from './constants';\nimport useAbsentInsert from '../../services/graphql/userProfile/absents/useAbsentInsert';\n\nconst initialValues: UserProfileAbsentsParams = {\n  id: 0,\n  user_profile_id: 0,\n  date_of_start: '',\n  date_of_end: '',\n  file_id: 0,\n  target_organization_unit: null,\n  target_organization_unit_id: 0,\n  location: '',\n  description: '',\n  vacation_type: null,\n  vacation_type_id: 0,\n};\n\nexport const AbsentModal: React.FC<AbsentsModalProps> = ({selectedItem, open, onClose, userProfileId, alert}) => {\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  const [isVacation, setIsVacation] = useState<boolean>(true);\n  const [isSecondDropdownEnabled, setIsSecondDropdownEnabled] = useState<boolean>(false);\n\n  const handleUpload = (files: FileList) => {\n    const fileList = Array.from(files);\n    setUploadedFiles(fileList);\n  };\n\n  const handleTypeChange = (selectedValue: any) => {\n    if (selectedValue.id === 1) {\n      setIsVacation(true);\n    } else setIsVacation(false);\n    setIsSecondDropdownEnabled(!!selectedValue);\n  };\n\n  const {organizationUnitsList} = useOrganizationUnits();\n\n  const {mutate: saveUserProfileAbsents} = useAbsentInsert();\n\n  const handleSave = (values: any) => {\n    const payload = {\n      ...values,\n      id: values?.id || 0,\n      user_profile_id: userProfileId,\n      date_of_start: values?.date_of_start.toISOString() || '',\n      date_of_end: values?.date_of_end.toISOString() || '',\n      file_id: values?.file_id || 1,\n      vacation_type_id: values?.vacation_type?.id || null,\n      location: values?.location || '',\n      target_organization_unit_id: values?.target_organization_unit?.id || 0,\n    };\n\n    delete payload.vacation_type;\n    delete payload.created_at;\n    delete payload.updated_at;\n    delete payload.target_organization_unit;\n\n    saveUserProfileAbsents(\n      payload,\n      () => {\n        onClose(true);\n        alert.success('Uspješno sačuvano');\n      },\n      () => {\n        onClose(false);\n        alert.error('Nije uspješno sačuvano');\n      },\n    );\n  };\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n    watch,\n  } = useForm<UserProfileAbsentsParams>({defaultValues: selectedItem || initialValues});\n\n  const vacationType = watch('vacation_type');\n\n  useEffect(() => {\n    if (selectedItem) {\n      reset({\n        ...selectedItem,\n        date_of_end: new Date(selectedItem.date_of_end),\n        date_of_start: new Date(selectedItem.date_of_start),\n      });\n      if (selectedItem.id !== 0) {\n        if (dropdownVacationOptions.find(option => option.id === selectedItem.vacation_type.id)) {\n          setIsVacation(true);\n        } else setIsVacation(false);\n\n        setIsSecondDropdownEnabled(true);\n      }\n    }\n  }, [selectedItem, reset]);\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset(initialValues);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(handleSave)}\n      content={\n        <ModalContentWrapper>\n          <FormGroup>\n            <Dropdown\n              label=\"VRSTA ZAHTJEVA:\"\n              options={dropdownOptions}\n              value={isVacation ? dropdownOptions[0] : dropdownOptions[1]}\n              onChange={handleTypeChange}\n              placeholder=\"Birajte vrstu\"\n              name={'vacation'}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Controller\n              name=\"vacation_type\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"VRSTA:\"\n                  name={name}\n                  options={isVacation ? dropdownVacationOptions : dropdownAbsentsOptions}\n                  value={value as any}\n                  onChange={onChange}\n                  error={errors.vacation_type?.message}\n                  placeholder=\"Birajte vrstu\"\n                  isDisabled={!isSecondDropdownEnabled}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Controller\n              name=\"target_organization_unit\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"DRŽAVNI ORGAN:\"\n                  name={name}\n                  options={organizationUnitsList as any}\n                  value={value as any}\n                  onChange={onChange}\n                  error={errors.target_organization_unit?.message}\n                  isDisabled={vacationType?.id !== 5}\n                  placeholder=\"Birajte državni organ\"\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Controller\n              name=\"date_of_start\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"POČETAK TRAJANJA:\"\n                  name={name}\n                  value={value ? parseDate(value) : ''}\n                  error={errors.date_of_start?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Controller\n              name=\"date_of_end\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"KRAJ TRAJANJA:\"\n                  name={name}\n                  value={value ? parseDate(value) : ''}\n                  error={errors.date_of_end?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Input\n              {...register('description', {required: 'Ovo polje je obavezno'})}\n              label=\"OPIS:\"\n              placeholder=\"Unesite opis...\"\n              textarea\n              error={errors.description?.message as string}\n            />\n          </FormGroup>\n\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={handleUpload}\n              note={<Typography variant=\"bodySmall\" content=\"Validacija\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n\n          {uploadedFiles.length > 0 && (\n            <UploadedFileWrapper>\n              {uploadedFiles.map((file, index) => (\n                <UploadedFileContainer key={index}>\n                  <Typography variant=\"bodySmall\" content={file.name} />\n                </UploadedFileContainer>\n              ))}\n            </UploadedFileWrapper>\n          )}\n        </ModalContentWrapper>\n      }\n      title={'DODAJTE DOPUST'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/absentsModal/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/absentsModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/confirmationsModal/confirmationsModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1440,1443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1440,1443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3053,3056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3053,3056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Typography, Modal, FileUpload, Dropdown, Input, Datepicker} from 'client-library';\nimport React, {useEffect, useState} from 'react';\nimport {FileUploadWrapper, FormGroup, ModalContentWrapper, UploadedFileContainer, UploadedFileWrapper} from './styles';\nimport {ConfirmationsModalProps} from '../../screens/employees/confirmations/types';\nimport {parseDate} from '../../utils/dateUtils';\nimport {UserProfileResolutionItem} from '../../types/graphql/userProfileGetResolution';\nimport {Controller, useForm} from 'react-hook-form';\nimport {DropdownDataNumber} from '../../types/dropdownData';\nimport useResolutionInsert from '../../services/graphql/userProfile/resolution/useResolutionInsert';\n\nconst initialValues: UserProfileResolutionItem = {\n  id: 0,\n  user_profile_id: 0,\n  resolution_purpose: '',\n  date_of_start: '',\n  date_of_end: '',\n  file_id: 0,\n  resolution_type: null,\n};\n\nexport const ConfirmationsModal: React.FC<ConfirmationsModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  userProfileId,\n  alert,\n}) => {\n  const dropdownOptions: DropdownDataNumber[] = [\n    {id: 1, title: 'Potvrde'},\n    {id: 2, title: 'Rješenja'},\n  ];\n\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n\n  const handleUpload = (files: FileList) => {\n    const fileList = Array.from(files);\n    setUploadedFiles(fileList);\n  };\n\n  const {mutate: saveUserProfileResolution} = useResolutionInsert();\n\n  const handleSave = (value: any) => {\n    const payload = {\n      ...value,\n      id: value?.id || 0,\n      user_profile_id: userProfileId,\n      date_of_start: parseDate(value?.date_of_start, true) || '',\n      date_of_end: '',\n      file_id: value?.file_id || 1,\n      resolution_purpose: value?.resolution_purpose || '',\n      resolution_type_id: value?.resolution_type.id || null,\n    };\n\n    delete payload.created_at;\n    delete payload.updated_at;\n    delete payload.resolution_type;\n    saveUserProfileResolution(\n      payload,\n      () => {\n        onClose(true);\n        alert.success('Uspješno sačuvano');\n      },\n      () => {\n        onClose(true);\n        alert.error('Nije uspješno sačuvano');\n      },\n    );\n  };\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm<UserProfileResolutionItem>({defaultValues: selectedItem || initialValues});\n\n  useEffect(() => {\n    if (selectedItem) {\n      reset(selectedItem);\n    }\n  }, [selectedItem]);\n\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(handleSave)}\n      content={\n        <ModalContentWrapper>\n          <FormGroup>\n            <Controller\n              name=\"resolution_type\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"VRSTA:\"\n                  name={name}\n                  options={dropdownOptions}\n                  value={value as any}\n                  onChange={onChange}\n                  error={errors.resolution_type?.message}\n                  placeholder=\"Birajte vrstu\"\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Controller\n              name=\"date_of_start\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"DATUM RJEŠENJA/POTVRDE:\"\n                  name={name}\n                  value={value ? parseDate(value) : ''}\n                  error={errors.date_of_start?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Input\n              {...register('resolution_purpose', {required: 'Ovo polje je obavezno'})}\n              label=\"SVRHA:\"\n              placeholder=\"Unesite opis...\"\n              textarea\n              error={errors.resolution_purpose?.message as string}\n            />\n          </FormGroup>\n\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={handleUpload}\n              note={<Typography variant=\"bodySmall\" content=\"Validacija\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n\n          {uploadedFiles.length > 0 && (\n            <UploadedFileWrapper>\n              {uploadedFiles.map((file, index) => (\n                <UploadedFileContainer key={index}>\n                  <Typography variant=\"bodySmall\" content={file.name} />\n                </UploadedFileContainer>\n              ))}\n            </UploadedFileWrapper>\n          )}\n        </ModalContentWrapper>\n      }\n      title={'SVRHA POTVRDE I RJEŠENJA'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/confirmationsModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/academicEducationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserProfileEducationItem' is defined but never used.","line":5,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":65},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1013,1016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1013,1016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":41,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":41,"endColumn":11,"fix":{"range":[1252,1262],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":42,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":42,"endColumn":11,"fix":{"range":[1279,1289],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":43,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":43,"endColumn":13,"fix":{"range":[1308,1320],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":44,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":44,"endColumn":13,"fix":{"range":[1355,1367],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":45,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":45,"endColumn":11,"fix":{"range":[1405,1415],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":46,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":46,"endColumn":11,"fix":{"range":[1418,1428],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":47,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":47,"endColumn":13,"fix":{"range":[1446,1458],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":48,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":48,"endColumn":13,"fix":{"range":[1492,1504],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":49,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":49,"endColumn":11,"fix":{"range":[1541,1551],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":50,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":50,"endColumn":9,"fix":{"range":[1554,1562],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1909,1912],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1909,1912],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3235,3238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3235,3238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3927,3930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3927,3930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":10,"fixableWarningCount":0,"source":"import {CheckIcon, Dropdown, FileUpload, Input, Modal, Theme, Typography} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {ModalProps} from '../../../screens/employees/education/types';\nimport {UserProfileEducationFormValues, UserProfileEducationItem} from '../../../types/graphql/userProfileGetEducation';\nimport {academicTitles, educationTypes} from './constants';\nimport {FileUploadWrapper, FormGroup, ModalContentWrapper} from './styles';\nimport useEducationInsert from '../../../services/graphql/userProfile/education/useEducationInsert';\n\nconst initialValues: UserProfileEducationFormValues = {\n  id: 0,\n  title: '',\n  user_profile_id: 1,\n  education_type_id: 1,\n  date_of_certification: '',\n  price: 0,\n  date_of_start: '',\n  date_of_end: '',\n  academic_title: '',\n  expertise_level: '',\n  certificate_issuer: '',\n  description: '',\n  file_id: null,\n};\n\ninterface AcademicEducationModalProps extends ModalProps {\n  alert: any;\n  refetch: () => void;\n}\n\nexport const AcademicEducationModal: React.FC<AcademicEducationModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  alert,\n  refetch,\n}) => {\n  const item = useMemo(() => {\n    return selectedItem\n      ? {\n          ...selectedItem,\n          expertise_level: {\n            id: selectedItem?.expertise_level,\n            title: selectedItem?.expertise_level,\n          },\n          academic_title: {\n            id: selectedItem?.academic_title,\n            title: selectedItem?.academic_title,\n          },\n        }\n      : initialValues;\n  }, [selectedItem]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: item || initialValues});\n\n  const {mutate} = useEducationInsert();\n\n  useEffect(() => {\n    if (item) {\n      reset(item);\n    }\n  }, [item]);\n\n  const onSubmit = async (values: any) => {\n    const data = {...values, academic_title: values.academic_title?.id, expertise_level: values.expertise_level?.id};\n\n    if (!selectedItem) {\n      delete data.id;\n    }\n\n    try {\n      mutate(\n        data,\n        () => {\n          alert.success('Uspješno sačuvano');\n          refetch();\n          onClose();\n        },\n        () => {\n          alert.error('Nije uspješno sačuvano');\n          onClose();\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      content={\n        <ModalContentWrapper>\n          <FormGroup>\n            <Input\n              {...register('certificate_issuer', {required: 'Ovo polje je obavezno'})}\n              label=\"IZDAVAČ SERTIFIKATA:\"\n              error={errors.certificate_issuer?.message as string}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Controller\n              name=\"expertise_level\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"STEPEN ŠKOLSKOG OBRAZOVANJA:\"\n                  options={educationTypes}\n                  rightOptionIcon={<CheckIcon stroke={Theme.palette.primary500} />}\n                  error={errors.expertise_level?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Controller\n              name=\"academic_title\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"STEPEN STRUČNE OSPOSOBLJENOSTI:\"\n                  options={academicTitles}\n                  rightOptionIcon={<CheckIcon stroke={Theme.palette.primary500} />}\n                  error={errors.academic_title?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <FileUploadWrapper>\n              <FileUpload\n                icon={<></>}\n                style={{width: '100%'}}\n                variant=\"secondary\"\n                onUpload={item => console.log(item)}\n                note={<Typography variant=\"bodySmall\" content=\"Obrazovni sertifikat\" />}\n                buttonText=\"Učitaj\"\n              />\n            </FileUploadWrapper>\n          </FormGroup>\n        </ModalContentWrapper>\n      }\n      title={'DODAJTE NOVO AKADEMSKO OBRAZOVANJE'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/functionalAcknowledgmentsModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserProfileEducationItem' is defined but never used.","line":5,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":65},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1073,1076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1073,1076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":42,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":42,"endColumn":11,"fix":{"range":[1321,1331],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":43,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":43,"endColumn":11,"fix":{"range":[1348,1358],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":44,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":44,"endColumn":13,"fix":{"range":[1377,1389],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":45,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":45,"endColumn":13,"fix":{"range":[1424,1436],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":46,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":46,"endColumn":11,"fix":{"range":[1474,1484],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":47,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":47,"endColumn":9,"fix":{"range":[1487,1495],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1842,1845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1842,1845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3644,3647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3644,3647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import {CheckIcon, Datepicker, Dropdown, FileUpload, Input, Modal, Theme, Typography} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {ModalProps} from '../../../screens/employees/education/types';\nimport {UserProfileEducationFormValues, UserProfileEducationItem} from '../../../types/graphql/userProfileGetEducation';\nimport {parseDate} from '../../../utils/dateUtils';\nimport {functionalAcknowledgmentGrades} from './constants';\nimport {FileUploadWrapper, ModalContentWrapper, Row} from './styles';\nimport useEducationInsert from '../../../services/graphql/userProfile/education/useEducationInsert';\n\nconst initialValues: UserProfileEducationFormValues = {\n  id: 0,\n  title: '',\n  user_profile_id: 1,\n  education_type_id: 4,\n  date_of_certification: '',\n  price: 0,\n  date_of_start: '',\n  date_of_end: '',\n  academic_title: '',\n  expertise_level: '',\n  certificate_issuer: '',\n  description: '',\n  file_id: null,\n};\n\ninterface FunctionalAcknowledgmentModal extends ModalProps {\n  alert: any;\n  refetch: () => void;\n}\n\nexport const FunctionalAcknowledgmentModal: React.FC<FunctionalAcknowledgmentModal> = ({\n  selectedItem,\n  open,\n  onClose,\n  alert,\n  refetch,\n}) => {\n  const item = useMemo(() => {\n    return selectedItem\n      ? {\n          ...selectedItem,\n          expertise_level: {\n            id: selectedItem?.expertise_level,\n            title: selectedItem?.expertise_level,\n          },\n        }\n      : initialValues;\n  }, [selectedItem]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: item || initialValues});\n\n  const {mutate} = useEducationInsert();\n\n  useEffect(() => {\n    if (item) {\n      reset(item);\n    }\n  }, [item]);\n\n  const onSubmit = async (values: any) => {\n    const data = {\n      ...values,\n      date_of_start: parseDate(values?.date_of_start, true),\n      date_of_end: parseDate(values?.date_of_end, true),\n      academic_title: values?.academic_title,\n      expertise_level: values?.expertise_level?.title,\n      price: values?.price.toString(),\n    };\n\n    if (!selectedItem) {\n      delete data.id;\n    }\n\n    try {\n      mutate(\n        data,\n        () => {\n          alert.success('Uspješno sačuvano');\n          refetch();\n          onClose();\n        },\n        () => {\n          alert.error('Nije uspješno sačuvano');\n          onClose();\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    } finally {\n      reset(initialValues);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset(initialValues);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      content={\n        <ModalContentWrapper>\n          <Row>\n            <Input\n              {...register('academic_title', {required: 'Ovo polje je obavezno'})}\n              label=\"FUNKCIONALNA ZNANJA:\"\n              error={errors.academic_title?.message as string}\n            />\n            <Input\n              {...register('certificate_issuer', {required: 'Ovo polje je obavezno'})}\n              label=\"IZVOĐAČ:\"\n              error={errors.certificate_issuer?.message as string}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"expertise_level\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"OCJENA:\"\n                  options={functionalAcknowledgmentGrades}\n                  rightOptionIcon={<CheckIcon stroke={Theme.palette.primary500} />}\n                  error={errors.expertise_level?.message as string}\n                />\n              )}\n            />\n            <Input\n              {...register('price', {required: 'Ovo polje je obavezno'})}\n              label=\"KOTIZACIJA:\"\n              name=\"price\"\n              leftContent={<Typography content={<div>&euro;</div>} />}\n              style={{maxWidth: '300px'}}\n              error={errors.price?.message as string}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"date_of_start\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"POČETAK:\"\n                  name={name}\n                  value={value ? parseDate(value) : ''}\n                  error={errors.date_of_start?.message as string}\n                />\n              )}\n            />\n            <Controller\n              name=\"date_of_end\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"KRAJ:\"\n                  name={name}\n                  value={value ? parseDate(value) : ''}\n                  error={errors.date_of_end?.message as string}\n                />\n              )}\n            />\n          </Row>\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={item => console.log(item)}\n              note={<Typography variant=\"bodySmall\" content=\"Funkcionalni sertifikat\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n        </ModalContentWrapper>\n      }\n      title={'DODAJTE NOVA FUNKCIONALNA ZNANJA'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/judicalStateExamsModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1031,1034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1031,1034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":43,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":43,"endColumn":11,"fix":{"range":[1271,1281],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":44,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":44,"endColumn":11,"fix":{"range":[1298,1308],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":45,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":45,"endColumn":13,"fix":{"range":[1326,1338],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":46,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":46,"endColumn":13,"fix":{"range":[1372,1384],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":47,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":47,"endColumn":11,"fix":{"range":[1421,1431],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":48,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":48,"endColumn":9,"fix":{"range":[1434,1442],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1775,1778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1775,1778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2976,2979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2976,2979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import {CheckIcon, Datepicker, Dropdown, FileUpload, Modal, Theme, Typography} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {ModalProps} from '../../../screens/employees/education/types';\nimport {UserProfileEducationItem} from '../../../types/graphql/userProfileGetEducation';\nimport {parseDate} from '../../../utils/dateUtils';\nimport {examTypes} from './constants';\nimport {FileUploadWrapper, FormGroup, ModalContentWrapper} from './styles';\nimport useEducationInsert from '../../../services/graphql/userProfile/education/useEducationInsert';\n\nconst initialValues: UserProfileEducationItem = {\n  id: 0,\n  user_profile_id: 1,\n  education_type_id: 3,\n  date_of_certification: '',\n  price: 0,\n  date_of_start: '',\n  date_of_end: '',\n  academic_title: '',\n  expertise_level: '',\n  certificate_issuer: '',\n  description: '',\n  created_at: '',\n  updated_at: '',\n  file_id: '1',\n};\n\ninterface JudicalAndStateExamsModal extends ModalProps {\n  alert: any;\n  refetch: () => void;\n}\n\nexport const JudicalAndStateExamsModal: React.FC<JudicalAndStateExamsModal> = ({\n  selectedItem,\n  open,\n  onClose,\n  alert,\n  refetch,\n}) => {\n  const item = useMemo(() => {\n    return selectedItem\n      ? {\n          ...selectedItem,\n          academic_title: {\n            id: selectedItem?.academic_title,\n            title: selectedItem?.academic_title,\n          },\n        }\n      : initialValues;\n  }, [selectedItem]);\n\n  const {\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: item || initialValues});\n\n  const {mutate} = useEducationInsert();\n\n  useEffect(() => {\n    if (item) {\n      reset(item);\n    }\n  }, [item]);\n\n  const onSubmit = async (values: any) => {\n    const data = {\n      ...values,\n      date_of_certification: parseDate(values?.date_of_certification, true),\n      academic_title: values?.academic_title?.id,\n    };\n\n    if (!selectedItem) {\n      delete data.id;\n    }\n\n    try {\n      mutate(\n        data,\n        () => {\n          alert.success('Uspješno sačuvano');\n          refetch();\n          onClose();\n        },\n        () => {\n          alert.error('Nije uspješno sačuvano');\n          onClose();\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    } finally {\n      reset(initialValues);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset(initialValues);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      content={\n        <ModalContentWrapper>\n          <FormGroup>\n            <Controller\n              name=\"academic_title\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"VRSTA ISPITA\"\n                  options={examTypes}\n                  rightOptionIcon={<CheckIcon stroke={Theme.palette.primary500} />}\n                  error={errors.academic_title?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Controller\n              name=\"date_of_certification\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"DATUM POLAGANJA:\"\n                  name={name}\n                  value={value ? parseDate(value) : ''}\n                  error={errors.date_of_certification?.message as string}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup>\n            <FileUploadWrapper>\n              <FileUpload\n                icon={<></>}\n                style={{width: '100%'}}\n                variant=\"secondary\"\n                onUpload={item => console.log(item)}\n                note={<Typography variant=\"bodySmall\" content=\"Obrazovni sertifikat\" />}\n                buttonText=\"Učitaj\"\n              />\n            </FileUploadWrapper>\n          </FormGroup>\n        </ModalContentWrapper>\n      }\n      title={'DODAJTE NOVI PRAVOSUDNI/DRŽAVNI ISPIT'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/languageAcknowledgmentModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserProfileEducationItem' is defined but never used.","line":5,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":65},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[972,975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[972,975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1195,1198],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1195,1198],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":52,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":52,"endColumn":11,"fix":{"range":[1505,1515],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":53,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":53,"endColumn":11,"fix":{"range":[1532,1542],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":54,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":54,"endColumn":13,"fix":{"range":[1561,1573],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":55,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":55,"endColumn":13,"fix":{"range":[1644,1656],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":56,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":56,"endColumn":11,"fix":{"range":[1731,1741],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":57,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":57,"endColumn":11,"fix":{"range":[1744,1754],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":58,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":58,"endColumn":13,"fix":{"range":[1772,1784],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":59,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":59,"endColumn":13,"fix":{"range":[1853,1865],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":60,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":60,"endColumn":11,"fix":{"range":[1937,1947],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":61,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":61,"endColumn":9,"fix":{"range":[1950,1958],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2291,2294],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2291,2294],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3363,3366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3363,3366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4033,4036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4033,4036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":10,"fixableWarningCount":0,"source":"import {CheckIcon, Dropdown, FileUpload, Modal, Theme} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {ModalProps} from '../../../screens/employees/education/types';\nimport {UserProfileEducationFormValues, UserProfileEducationItem} from '../../../types/graphql/userProfileGetEducation';\nimport {languageAcknowledgmentLevels} from './constants';\nimport {ModalContentWrapper, Row} from './styles';\nimport useEducationInsert from '../../../services/graphql/userProfile/education/useEducationInsert';\n\nconst initialValues: UserProfileEducationFormValues = {\n  id: 0,\n  title: '',\n  user_profile_id: 1,\n  education_type_id: 2,\n  date_of_certification: '',\n  price: 0,\n  date_of_start: '',\n  date_of_end: '',\n  academic_title: '',\n  expertise_level: '',\n  certificate_issuer: '',\n  description: '',\n  file_id: null,\n};\n\ninterface LanguageAcknowledgmentModalProps extends ModalProps {\n  alert: any;\n  refetch: () => void;\n}\n\nexport const LanguageAcknowledgmentModal: React.FC<LanguageAcknowledgmentModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  dropdownData,\n  alert,\n  refetch,\n}) => {\n  const languagesList: any[] = [];\n\n  dropdownData?.forEach(item => {\n    const language = {\n      id: item.alpha_3_code + '(' + item.en_short_name + ')',\n      title: item.alpha_3_code + '(' + item.en_short_name + ')',\n    };\n    languagesList.push(language);\n  });\n\n  const item = useMemo(() => {\n    return selectedItem\n      ? {\n          ...selectedItem,\n          expertise_level: {\n            id: selectedItem?.expertise_level ? selectedItem.expertise_level : '',\n            title: selectedItem?.expertise_level ? selectedItem?.expertise_level : '',\n          },\n          academic_title: {\n            id: selectedItem?.academic_title ? selectedItem.academic_title : '',\n            title: selectedItem?.academic_title ? selectedItem.academic_title : '',\n          },\n        }\n      : initialValues;\n  }, [selectedItem]);\n\n  const {\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: item || initialValues});\n\n  const {mutate} = useEducationInsert();\n\n  useEffect(() => {\n    if (item) {\n      reset(item);\n    }\n  }, [item]);\n\n  const onSubmit = async (values: any) => {\n    const data = {...values, academic_title: values.academic_title.id, expertise_level: values.expertise_level.id};\n\n    if (!selectedItem) {\n      delete data.id;\n    }\n\n    try {\n      mutate(\n        data,\n        () => {\n          alert?.success('Uspješno sačuvano');\n          refetch();\n          onClose();\n        },\n        () => {\n          alert.error('Nije uspješno sačuvano');\n          onClose();\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      style={{width: '560px'}}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      content={\n        <ModalContentWrapper>\n          <Row>\n            <Controller\n              name=\"academic_title\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"ZNANJE STRANOG JEZIKA:\"\n                  isSearchable\n                  options={languagesList}\n                  rightOptionIcon={<CheckIcon stroke={Theme.palette.primary500} />}\n                  error={errors.academic_title?.message as string}\n                />\n              )}\n            />\n            <Controller\n              name=\"expertise_level\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"STEPEN:\"\n                  options={languageAcknowledgmentLevels}\n                  rightOptionIcon={<CheckIcon stroke={Theme.palette.primary500} />}\n                  error={errors.expertise_level?.message as string}\n                />\n              )}\n            />\n            <FileUpload\n              icon={<></>}\n              style={{border: 'none', padding: '0px', width: 'auto'}}\n              variant=\"primary\"\n              onUpload={item => console.log(item)}\n              buttonText=\"Učitaj\"\n            />\n          </Row>\n        </ModalContentWrapper>\n      }\n      title={'DODAJTE NOVI JEZIK'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/modals/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/tables/academicEducationTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[901,904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[901,904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1092,1095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1092,1095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1278,1281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1278,1281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2597,2600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2597,2600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {EditIconTwo, PlusIcon, TableHead, Theme, TrashIconTwo, Typography} from 'client-library';\nimport React, {useMemo, useState} from 'react';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {UserProfileEducationItem} from '../../../types/graphql/userProfileGetEducation';\nimport {AcademicEducationModal} from '../modals/academicEducationModal';\nimport {AddIcon, TableContainer, TableTitle, TableTitleTypography} from './styles';\nimport {TableProps} from '../../../screens/employees/education/types';\nimport useEducationOverview from '../../../services/graphql/userProfile/education/useEducationOverview';\nimport useEducationDelete from '../../../services/graphql/userProfile/education/useEducationDelete';\n\nconst tableHeads: TableHead[] = [\n  {\n    title: 'Stepen stručne osposobljenosti',\n    accessor: 'academic_title',\n    type: 'custom',\n    renderContents: (item: any) => <Typography variant=\"bodyMedium\" content={item} />,\n  },\n  {\n    title: 'Stepen školskog obrazovanja',\n    accessor: 'expertise_level',\n    type: 'custom',\n    renderContents: (item: any) => <Typography variant=\"bodyMedium\" content={item} />,\n  },\n  {\n    title: 'Izdavač sertifikata',\n    accessor: 'certificate_issuer',\n    type: 'custom',\n    renderContents: (item: any) => <Typography variant=\"bodyMedium\" content={item} />,\n  },\n  {\n    title: 'Datoteka',\n    accessor: 'file_id',\n    type: 'text',\n  },\n  {\n    title: '',\n    accessor: 'TABLE_ACTIONS',\n    type: 'tableActions',\n  },\n];\n\nconst mockedTableData = [\n  {\n    id: '001',\n    academic_title: 'test',\n    certificate_issuer: 'test',\n    expertise_level: 'test',\n    file_id: 'test.csv',\n  },\n];\n\nexport const AcademicEducationTable: React.FC<TableProps> = ({alert}) => {\n  const {employeeEducationData, refetchData} = useEducationOverview(1);\n  const [showModal, setShowModal] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = React.useState(0);\n\n  let academicEducationTableData: UserProfileEducationItem[] = [] || mockedTableData;\n\n  const {mutate: deleteEducation} = useEducationDelete();\n\n  if (typeof employeeEducationData !== 'undefined') {\n    employeeEducationData.forEach(tableData => {\n      if (tableData.abbreviation === 'AKDOB') {\n        academicEducationTableData = tableData.items ? tableData.items : [];\n      }\n    });\n  }\n\n  const selectedItem = useMemo(() => {\n    return academicEducationTableData.find((item: UserProfileEducationItem) => item.id === selectedItemId);\n  }, [selectedItemId]);\n\n  const handleEdit = (item: any) => {\n    setSelectedItemId(item.id);\n    setShowModal(true);\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setSelectedItemId(id);\n    setShowDeleteModal(true);\n  };\n\n  const handleCloseDeleteModal = () => {\n    setSelectedItemId(0);\n    setShowDeleteModal(false);\n  };\n\n  const handleDelete = () => {\n    deleteEducation(\n      selectedItemId,\n      () => {\n        alert.success('Uspješno obrisano');\n        refetchData();\n      },\n      () => {\n        alert.error('Brisanje nije uspješno');\n      },\n    );\n    setShowDeleteModal(false);\n    setSelectedItemId(0);\n  };\n\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setSelectedItemId(0);\n  };\n\n  const title = (\n    <TableTitle>\n      <TableTitleTypography variant=\"bodySmall\" content=\"Akademsko obrazovanje\" />\n      <AddIcon onClick={handleAdd}>\n        <PlusIcon width={'18px'} />\n      </AddIcon>\n    </TableTitle>\n  );\n\n  return (\n    <div>\n      <TableContainer\n        tableHeads={tableHeads}\n        data={academicEducationTableData}\n        tableActions={[\n          {name: 'edit', onClick: handleEdit, icon: <EditIconTwo stroke={Theme?.palette?.gray800} />},\n          {\n            name: 'delete',\n            onClick: item => handleDeleteIconClick(item.id),\n            icon: <TrashIconTwo stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n        titleElement={title}></TableContainer>\n      {showModal && (\n        <AcademicEducationModal\n          open={showModal}\n          onClose={handleCloseModal}\n          alert={alert}\n          selectedItem={selectedItem}\n          refetch={refetchData}\n        />\n      )}\n      <DeleteModal\n        open={showDeleteModal}\n        onClose={() => {\n          handleCloseDeleteModal();\n        }}\n        handleDelete={handleDelete}\n      />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/tables/functionalAcknowledgementsTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[925,928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[925,928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1109,1112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1109,1112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1579,1582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1579,1582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3459,3462],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3459,3462],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {EditIconTwo, PlusIcon, TableHead, Theme, TrashIconTwo, Typography} from 'client-library';\nimport React, {useMemo, useState} from 'react';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {UserProfileEducationItem} from '../../../types/graphql/userProfileGetEducation';\nimport {FunctionalAcknowledgmentModal} from '../modals/functionalAcknowledgmentsModal';\nimport {AddIcon, TableContainer, TableTitle, TableTitleTypography} from './styles';\nimport {TableProps} from '../../../screens/employees/education/types';\nimport useEducationOverview from '../../../services/graphql/userProfile/education/useEducationOverview';\nimport useEducationDelete from '../../../services/graphql/userProfile/education/useEducationDelete';\n\nconst tableHeads: TableHead[] = [\n  {\n    title: 'Funkcionalna znanja',\n    accessor: 'academic_title',\n    sortable: true,\n    type: 'custom',\n    renderContents: (item: any) => <Typography content={item}></Typography>,\n  },\n  {\n    title: 'Izvođač',\n    accessor: 'certificate_issuer',\n    sortable: true,\n    type: 'custom',\n    renderContents: (item: any) => <Typography content={item}></Typography>,\n  },\n  {\n    title: 'Kotizacija',\n    accessor: 'price',\n    sortable: true,\n    type: 'text',\n  },\n  {\n    title: 'Početak',\n    accessor: 'date_of_start',\n    sortable: true,\n    type: 'text',\n  },\n  {\n    title: 'Kraj',\n    accessor: 'date_of_end',\n    sortable: true,\n    type: 'text',\n  },\n  {\n    title: 'Ocjena',\n    accessor: 'expertise_level',\n    sortable: true,\n    type: 'custom',\n    renderContents: (item: any) => <Typography content={item}></Typography>,\n  },\n  {\n    title: 'Datoteka',\n    accessor: 'file_id',\n    sortable: true,\n    type: 'text',\n  },\n  {\n    title: '',\n    accessor: 'TABLE_ACTIONS',\n    type: 'tableActions',\n  },\n];\n\nconst mockedTableData = [\n  {\n    id: '001',\n    certificate_issuer: {label: 'Scrum master', value: 'Scrum master'},\n    contractor: {label: 'Agile Human', value: 'Agile Human'},\n    price: '100 €',\n    date_of_end: {label: '6 mjeseci', value: '6 mjeseci'},\n    expertise_level: {label: 'Položio', value: 'Položio'},\n    file_id: 'sertifikat.pdf',\n  },\n  {\n    id: '002',\n    certificate_issuer: {label: 'Project manager', value: 'Project manager'},\n    contractor: {label: 'Agile Human', value: 'Agile Human'},\n    price: '100 €',\n    date_of_end: {label: '6 mjeseci', value: '6 mjeseci'},\n    expertise_level: {label: 'Položio', value: 'Položio'},\n    file: 'sertifikat.pdf',\n  },\n];\n\nexport const FunctionalAcknowledgmentTable: React.FC<TableProps> = ({alert}) => {\n  const {employeeEducationData, refetchData} = useEducationOverview(1);\n  const [showModal, setShowModal] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const [selectedItemId, setSelectedItemId] = React.useState(0);\n\n  let functionalAcknowledgementTableData: UserProfileEducationItem[] = [] || mockedTableData;\n\n  const {mutate: deleteEducation} = useEducationDelete();\n\n  if (typeof employeeEducationData !== 'undefined') {\n    employeeEducationData.forEach(tableData => {\n      if (tableData.abbreviation === 'FUZNA') {\n        functionalAcknowledgementTableData = tableData.items ? tableData.items : [];\n      }\n    });\n  }\n\n  const selectedItem = useMemo(() => {\n    return functionalAcknowledgementTableData.find((item: UserProfileEducationItem) => item.id === selectedItemId);\n  }, [selectedItemId]);\n\n  const handleEdit = (item: any) => {\n    setSelectedItemId(item.id);\n    setShowModal(true);\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setSelectedItemId(id);\n    setShowDeleteModal(true);\n  };\n\n  const handleCloseDeleteModal = () => {\n    setSelectedItemId(0);\n    setShowDeleteModal(false);\n  };\n\n  const handleDelete = () => {\n    deleteEducation(\n      selectedItemId,\n      () => {\n        alert.success('Uspješno obrisano');\n        refetchData();\n      },\n      () => {\n        alert.error('Brisanje nije uspješno');\n      },\n    );\n    setShowDeleteModal(false);\n    setSelectedItemId(0);\n  };\n\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setSelectedItemId(0);\n  };\n\n  const title = (\n    <TableTitle>\n      <TableTitleTypography variant=\"bodySmall\" content=\"Funkcionalna znanja\" />\n      <AddIcon onClick={handleAdd}>\n        <PlusIcon width={'18px'} />\n      </AddIcon>\n    </TableTitle>\n  );\n\n  return (\n    <div>\n      <TableContainer\n        tableHeads={tableHeads}\n        data={functionalAcknowledgementTableData}\n        tableActions={[\n          {name: 'edit', onClick: handleEdit, icon: <EditIconTwo stroke={Theme?.palette?.gray800} />},\n          {\n            name: 'edit',\n            onClick: item => handleDeleteIconClick(item.id),\n            icon: <TrashIconTwo stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n        titleElement={title}></TableContainer>\n\n      <FunctionalAcknowledgmentModal\n        open={showModal}\n        onClose={handleCloseModal}\n        selectedItem={selectedItem}\n        refetch={refetchData}\n        alert={alert}\n      />\n      <DeleteModal\n        open={showDeleteModal}\n        onClose={() => {\n          handleCloseDeleteModal();\n        }}\n        handleDelete={handleDelete}\n      />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/tables/judicalAndStateExamsTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[897,900],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[897,900],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2504,2507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2504,2507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {EditIconTwo, PlusIcon, TableHead, Theme, TrashIconTwo, Typography} from 'client-library';\nimport React, {useMemo, useState} from 'react';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {UserProfileEducationItem} from '../../../types/graphql/userProfileGetEducation';\nimport {JudicalAndStateExamsModal} from '../modals/judicalStateExamsModal';\nimport {AddIcon, TableContainer, TableTitle, TableTitleTypography} from './styles';\nimport {TableProps} from '../../../screens/employees/education/types';\nimport useEducationOverview from '../../../services/graphql/userProfile/education/useEducationOverview';\nimport useEducationDelete from '../../../services/graphql/userProfile/education/useEducationDelete';\n\nconst tableHeads: TableHead[] = [\n  {\n    title: 'Tip',\n    accessor: 'academic_title',\n    sortable: true,\n    type: 'custom',\n    renderContents: (item: any) => <Typography variant=\"bodyMedium\" content={item} />,\n  },\n  {\n    title: 'Datum polaganja',\n    accessor: 'date_of_certification',\n    sortable: true,\n    type: 'text',\n  },\n  {\n    title: 'Datoteka',\n    accessor: 'file_id',\n    sortable: true,\n    type: 'text',\n  },\n  {\n    title: '',\n    accessor: 'TABLE_ACTIONS',\n    type: 'tableActions',\n  },\n];\n\nconst mockedTableData = [\n  {\n    id: '001',\n    type: {label: 'Pravosudni ispit', value: 'Pravosudni ispit'},\n    date: '01.01.2022',\n    file: 'sertifikat.pdf',\n  },\n  {\n    id: '002',\n    type: {label: 'Drzavni ispit', value: 'Drzavni ispit'},\n    date: '01.01.2022',\n    file: 'sertifikat.pdf',\n  },\n];\n\nexport const JudicalAndStateExamsTable: React.FC<TableProps> = ({alert}) => {\n  const {employeeEducationData, refetchData} = useEducationOverview(1);\n  const [showModal, setShowModal] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = React.useState(0);\n\n  let judicalAndStateExamsTableData: UserProfileEducationItem[] = [] || mockedTableData;\n\n  const {mutate: deleteEducation} = useEducationDelete();\n\n  if (typeof employeeEducationData !== 'undefined') {\n    employeeEducationData.forEach(tableData => {\n      if (tableData.abbreviation === 'PRISP') {\n        judicalAndStateExamsTableData = tableData.items ? tableData.items : [];\n      }\n    });\n  }\n\n  const selectedItem = useMemo(() => {\n    return judicalAndStateExamsTableData.find((item: UserProfileEducationItem) => item.id === selectedItemId);\n  }, [selectedItemId]);\n\n  const handleEdit = (item: any) => {\n    setSelectedItemId(item.id);\n    setShowModal(true);\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setSelectedItemId(id);\n    setShowDeleteModal(true);\n  };\n\n  const handleDelete = () => {\n    deleteEducation(\n      selectedItemId,\n      () => {\n        alert.success('Uspješno obrisano');\n        refetchData();\n      },\n      () => {\n        alert.error('Brisanje nije uspješno');\n      },\n    );\n    setShowDeleteModal(false);\n    setSelectedItemId(0);\n  };\n\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setSelectedItemId(0);\n  };\n\n  const handleCloseDeleteModal = () => {\n    setSelectedItemId(0);\n    setShowDeleteModal(false);\n  };\n\n  const title = (\n    <TableTitle>\n      <TableTitleTypography variant=\"bodySmall\" content=\"Pravosudni i državni ispit\" />\n      <AddIcon onClick={handleAdd}>\n        <PlusIcon width={'18px'} />\n      </AddIcon>\n    </TableTitle>\n  );\n\n  return (\n    <div>\n      <TableContainer\n        tableHeads={tableHeads}\n        data={judicalAndStateExamsTableData}\n        tableActions={[\n          {name: 'edit', onClick: handleEdit, icon: <EditIconTwo stroke={Theme?.palette?.gray800} />},\n          {\n            name: 'edit',\n            onClick: item => handleDeleteIconClick(item.id),\n            icon: <TrashIconTwo stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n        titleElement={title}></TableContainer>\n      {showModal && (\n        <JudicalAndStateExamsModal\n          open={showModal}\n          onClose={handleCloseModal}\n          selectedItem={selectedItem}\n          refetch={refetchData}\n          alert={alert}\n        />\n      )}\n      <DeleteModal\n        open={showDeleteModal}\n        onClose={() => {\n          handleCloseDeleteModal();\n        }}\n        handleDelete={handleDelete}\n      />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/tables/languageAcknowledgementsTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[972,975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[972,975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1162,1165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1162,1165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2729,2732],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2729,2732],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {EditIconTwo, PlusIcon, TableHead, Theme, TrashIconTwo, Typography} from 'client-library';\nimport React, {useMemo, useState} from 'react';\nimport {TableProps} from '../../../screens/employees/education/types';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {UserProfileEducationItem} from '../../../types/graphql/userProfileGetEducation';\nimport {LanguageAcknowledgmentModal} from '../modals/languageAcknowledgmentModal';\nimport {AddIcon, TableContainer, TableTitle, TableTitleTypography} from './styles';\nimport useEducationOverview from '../../../services/graphql/userProfile/education/useEducationOverview';\nimport useEducationDelete from '../../../services/graphql/userProfile/education/useEducationDelete';\n\nconst tableHeads: TableHead[] = [\n  {\n    title: 'Broj',\n    accessor: 'id',\n    type: 'text',\n  },\n  {\n    title: 'Jezik',\n    accessor: 'academic_title',\n    sortable: true,\n    type: 'custom',\n    renderContents: (item: any) => <Typography variant=\"bodyMedium\" content={item} />,\n  },\n  {\n    title: 'Stepen',\n    accessor: 'expertise_level',\n    sortable: true,\n    type: 'custom',\n    renderContents: (item: any) => <Typography variant=\"bodyMedium\" content={item} />,\n  },\n  {\n    title: 'Datoteka',\n    accessor: 'file_id',\n    sortable: true,\n    type: 'text',\n  },\n  {\n    title: '',\n    accessor: 'TABLE_ACTIONS',\n    type: 'tableActions',\n  },\n];\n\nconst mockedTableData = [\n  {\n    id: '001',\n    number: '001',\n    language: {label: 'Engleski', value: 'Engleski'},\n    degree: {label: 'C1', value: 'C1'},\n    file: 'sertifikat.pdf',\n  },\n  {\n    id: '002',\n    number: '002',\n    language: {label: 'Francuski', value: 'Francuski'},\n    degree: {label: 'C2', value: 'C2'},\n    file: 'sertifikat.pdf',\n  },\n];\n\nexport const LanguageAcknowledgmentTable: React.FC<TableProps> = ({languages, alert}) => {\n  const {employeeEducationData, refetchData} = useEducationOverview(1);\n  const [showModal, setShowModal] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = React.useState(0);\n\n  let languageAcknowledgementTableData: UserProfileEducationItem[] = [] || mockedTableData;\n\n  const {mutate: deleteEducation} = useEducationDelete();\n\n  if (typeof employeeEducationData !== 'undefined') {\n    employeeEducationData.forEach(tableData => {\n      if (tableData.abbreviation === 'POJEZ') {\n        languageAcknowledgementTableData = tableData.items ? tableData.items : [];\n      }\n    });\n  }\n\n  const selectedItem = useMemo(() => {\n    return languageAcknowledgementTableData.find((item: UserProfileEducationItem) => item.id === selectedItemId);\n  }, [selectedItemId]);\n\n  const handleEdit = (item: any) => {\n    setSelectedItemId(item.id);\n    setShowModal(true);\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setSelectedItemId(id);\n    setShowDeleteModal(true);\n  };\n\n  const handleDelete = () => {\n    deleteEducation(\n      selectedItemId,\n      () => {\n        alert.success('Uspješno obrisano');\n        refetchData();\n      },\n      () => {\n        alert.error('Brisanje nije uspješno');\n      },\n    );\n    setShowDeleteModal(false);\n    setSelectedItemId(0);\n  };\n\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setSelectedItemId(0);\n  };\n  const handleCloseDeleteModal = () => {\n    setSelectedItemId(0);\n    setShowDeleteModal(false);\n  };\n\n  const title = (\n    <TableTitle>\n      <TableTitleTypography variant=\"bodySmall\" content=\"Poznavanje jezika\" />\n      <AddIcon onClick={handleAdd}>\n        <PlusIcon width={'18px'} />\n      </AddIcon>\n    </TableTitle>\n  );\n\n  return (\n    <div>\n      <TableContainer\n        tableHeads={tableHeads}\n        data={languageAcknowledgementTableData}\n        tableActions={[\n          {name: 'edit', onClick: handleEdit, icon: <EditIconTwo stroke={Theme?.palette?.gray800} />},\n          {\n            name: 'edit',\n            onClick: item => handleDeleteIconClick(item.id),\n            icon: <TrashIconTwo stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n        titleElement={title}></TableContainer>\n      {showModal && (\n        <LanguageAcknowledgmentModal\n          open={showModal}\n          onClose={handleCloseModal}\n          selectedItem={selectedItem}\n          dropdownData={languages}\n          refetch={refetchData}\n          alert={alert}\n        />\n      )}\n      <DeleteModal\n        open={showDeleteModal}\n        onClose={() => {\n          handleCloseDeleteModal();\n        }}\n        handleDelete={handleDelete}\n      />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/education/tables/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/employeeDetails/employeeDetails.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":51,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":51,"endColumn":7,"fix":{"range":[2081,2087],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":52,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":52,"endColumn":9,"fix":{"range":[2106,2114],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":53,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":53,"endColumn":7,"fix":{"range":[2154,2160],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":54,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":54,"endColumn":9,"fix":{"range":[2182,2190],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":55,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":55,"endColumn":7,"fix":{"range":[2233,2239],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":56,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":56,"endColumn":9,"fix":{"range":[2257,2265],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":57,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":57,"endColumn":7,"fix":{"range":[2309,2315],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":58,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":58,"endColumn":9,"fix":{"range":[2334,2342],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":59,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":59,"endColumn":7,"fix":{"range":[2387,2393],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":60,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":60,"endColumn":9,"fix":{"range":[2416,2424],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":61,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":61,"endColumn":7,"fix":{"range":[2465,2471],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":62,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":62,"endColumn":9,"fix":{"range":[2497,2505],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":63,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":63,"endColumn":7,"fix":{"range":[2546,2552],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":64,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":64,"endColumn":9,"fix":{"range":[2574,2582],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":65,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":65,"endColumn":7,"fix":{"range":[2630,2636],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":66,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":66,"endColumn":9,"fix":{"range":[2656,2664],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":67,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":67,"endColumn":7,"fix":{"range":[2710,2716],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":68,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":68,"endColumn":9,"fix":{"range":[2732,2740],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":69,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":69,"endColumn":7,"fix":{"range":[2778,2784],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":70,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":70,"endColumn":9,"fix":{"range":[2793,2801],"text":"      "}}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":20,"fixableWarningCount":0,"source":"import React, {useEffect, useMemo, useState} from 'react';\nimport {EmployeeDetailsBox, StyledTabs} from './styles';\nimport {Tab} from '@oykos-development/devkit-react-ts-styled-components';\nimport {employeeTabs} from '../../screens/employees/constants';\nimport {getRouteName} from '../../utils/getRouteName';\nimport {MicroserviceProps} from '../../types/micro-service-props';\nimport {BasicInfo} from '../../screens/employees/basicInfo/basicInfo';\nimport {EducationPage} from '../../screens/employees/education/education';\nimport {ExperiencePage} from '../../screens/employees/experience/experience';\nimport {FamilyPage} from '../../screens/employees/family/family';\nimport Foreigners from '../../screens/employees/foreigners/foreigners';\nimport {ConfirmationsPage} from '../../screens/employees/confirmations/confirmations';\nimport {EvaluationsPage} from '../../screens/employees/evaluations/evaluations';\nimport {SalaryParams} from '../../screens/employees/salaryParams/salaryParams';\nimport Absents from '../../screens/employees/absents/absents';\n\ninterface EmployeeDetailsProps {\n  context: MicroserviceProps;\n  setAlert: (alert: {variant: string; message: string}) => void;\n}\n\nconst getCurrentTab = (pathname: string) => {\n  const path = pathname.split('/');\n  const name = path[path.length - 1];\n  return employeeTabs.find(tab => tab.routeName === name)?.id;\n};\n\nconst EmployeeDetails: React.FC<EmployeeDetailsProps> = ({context}) => {\n  const [activeTab, setActiveTab] = useState(getCurrentTab(context.navigation.location.pathname) || 1);\n  const {\n    navigation: {\n      navigate,\n      location: {pathname},\n    },\n  } = context;\n\n  const employeesPath = pathname && pathname.split('/')[pathname.split('/').length - 1];\n\n  const onTabChange = (tab: Tab) => {\n    setActiveTab(tab.id as number);\n    const routeName = getRouteName(tab.title as string);\n\n    const pathname = context.navigation.location.pathname.split('/');\n    pathname.pop();\n\n    navigate(`${pathname.join('/')}/${routeName}`);\n  };\n\n  const employeesRoute = useMemo(() => {\n    switch (employeesPath) {\n      case 'basic-info':\n        return <BasicInfo context={context} />;\n      case 'salary-params':\n        return <SalaryParams context={context} />;\n      case 'education':\n        return <EducationPage context={context} />;\n      case 'experience':\n        return <ExperiencePage context={context} />;\n      case 'family-members':\n        return <FamilyPage context={context} />;\n      case 'foreigner-permits':\n        return <Foreigners context={context} />;\n      case 'confirmations':\n        return <ConfirmationsPage context={context} />;\n      case 'evaluations':\n        return <EvaluationsPage context={context} />;\n      case 'absents':\n        return <Absents context={context} />;\n      default:\n        return <></>;\n    }\n  }, [employeesPath, context]);\n\n  useEffect(() => {\n    setActiveTab(getCurrentTab(context.navigation.location.pathname) || 1);\n  }, [context.navigation.location.pathname]);\n\n  // TODO: find a better way of handling this\n  if (employeesPath === 'employees') {\n    return null;\n  }\n\n  return (\n    <EmployeeDetailsBox>\n      <StyledTabs\n        tabs={employeeTabs}\n        activeTab={activeTab}\n        onChange={onTabChange}\n        //TODO: change in devkit/library\n        style={{borderWidth: '1px', borderRadius: '0.5em 0.5em 0 0', whiteSpace: 'nowrap'}}\n      />\n      {employeesRoute}\n    </EmployeeDetailsBox>\n  );\n};\n\nexport default EmployeeDetails;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/employeeDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/employeesList/employeesList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ScreenWrapper' is defined but never used.","line":10,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MicroserviceProps' is defined but never used.","line":11,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[951,954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[951,954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1032,1035],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1032,1035],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1796,1799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1796,1799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2240,2243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2240,2243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2374,2377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2374,2377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2595,2598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2595,2598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2719,2722],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2719,2722],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2916,2919],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2916,2919],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3028,3031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3028,3031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {ChangeEvent, useMemo} from 'react';\nimport {Controls, FilterDropdown, FilterInput, Filters, Header, MainTitle, OverviewBox} from './styles';\nimport {tableHeads} from '../../screens/employees/constants';\nimport {Button, Pagination, Table, Divider, Theme, SearchIcon} from 'client-library';\nimport {UserProfile} from '../../types/graphql/userProfiles';\nimport useOrganizationUnits from '../../services/graphql/organizationUnits/useOrganizationUnits';\nimport {EmployeeListFilters} from '../../screens/employees';\nimport {yesAndNoOptions} from '../../constants';\nimport useJobPositions from '../../services/graphql/jobPositions/useJobPositionOverview';\nimport ScreenWrapper from '../../shared/screenWrapper';\nimport {MicroserviceProps} from '../../types/micro-service-props';\n\nexport interface EmployeesListProps {\n  navigate: (path: string) => void;\n  toggleEmployeeImportModal: () => void;\n  onPageChange: (page: number) => void;\n  data: any;\n  search: string;\n  filters: EmployeeListFilters;\n  onFilterChange: (value: any, name: string) => void;\n  onSearch: (e: ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst EmployeesList: React.FC<EmployeesListProps> = ({\n  navigate,\n  toggleEmployeeImportModal,\n  onPageChange,\n  data,\n  search,\n  filters,\n  onFilterChange,\n  onSearch,\n}) => {\n  const {organizationUnitsList} = useOrganizationUnits();\n  const {data: jobPositions} = useJobPositions('');\n\n  const list = useMemo(\n    () =>\n      data.items.map((item: UserProfile) => ({\n        full_name: `${item.first_name} ${item.last_name}`,\n        ...item,\n        active: item.active ? 'Aktivan' : 'Neaktivan',\n      })),\n    [data],\n  );\n\n  const jobPositionOptions = useMemo(() => {\n    return [\n      {id: 0, title: 'Sva radna mjesta'},\n      ...jobPositions.items.map((jobPosition: any) => ({id: jobPosition.id, title: jobPosition.title})),\n    ];\n  }, [jobPositions]);\n\n  return (\n    <OverviewBox>\n      <MainTitle variant=\"bodyMedium\" content=\"PREGLED SVIH ZAPOSLENIH\" />\n      {/*TODO: theme color */}\n      <Divider color={Theme?.palette?.gray200} height=\"1px\" />\n      <Header>\n        <Filters>\n          <FilterDropdown\n            label=\"FILTER ORGANIZACIONIH JEDINICA:\"\n            options={organizationUnitsList as any}\n            onChange={value => onFilterChange(value, 'organization_unit_id')}\n            value={filters.organization_unit_id as any}\n            name=\"organization_unit_id\"\n            placeholder=\"Odaberite organizacionu jedinicu\"\n          />\n\n          <FilterDropdown\n            label=\"RADNO MJESTO:\"\n            options={jobPositionOptions as any}\n            onChange={value => onFilterChange(value, 'job_position_id')}\n            value={filters.job_position_id as any}\n            name=\"job_position_id\"\n            placeholder=\"Odaberite radno mjesto\"\n          />\n\n          <FilterDropdown\n            label=\"STATUS:\"\n            options={yesAndNoOptions as any}\n            onChange={value => onFilterChange(value, 'is_active')}\n            value={filters.is_active as any}\n            name=\"is_active\"\n            placeholder=\"Odaberite status\"\n          />\n\n          <FilterInput\n            onChange={onSearch}\n            label=\"PRETRAGA PO IMENU I PREZIMENU:\"\n            value={search}\n            rightContent={<SearchIcon />}\n            placeholder=\"Unesite ime i prezime\"\n          />\n        </Filters>\n        <Controls>\n          <Button\n            content=\"Uvoz zaposlenih\"\n            variant=\"secondary\"\n            style={{marginRight: 10, width: 170}}\n            onClick={() => toggleEmployeeImportModal()}\n          />\n          <Button\n            content=\"Dodaj zaposlenog\"\n            variant=\"secondary\"\n            style={{width: 170}}\n            onClick={() => navigate('/hr/employees/new-employee/basic-info')}\n          />\n        </Controls>\n      </Header>\n      <Table\n        tableHeads={tableHeads}\n        data={list}\n        style={{marginBottom: 22}}\n        onRowClick={row => navigate(`/hr/employees/${row.id}/basic-info`)}\n      />\n      <Pagination\n        pageCount={Math.ceil(data.total / 10)}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={2}\n        previousLabel=\"Previous\"\n        nextLabel=\"Next\"\n        pageRangeDisplayed={3}\n      />\n    </OverviewBox>\n  );\n};\n\nexport default EmployeesList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/employeesList/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/evaluationModal/evaluationModal.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":32,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":32,"endColumn":11,"fix":{"range":[917,927],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":33,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":33,"endColumn":11,"fix":{"range":[944,954],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":34,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":34,"endColumn":11,"fix":{"range":[1062,1072],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":35,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":35,"endColumn":11,"fix":{"range":[1173,1183],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":36,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":36,"endColumn":11,"fix":{"range":[1245,1255],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":37,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":37,"endColumn":9,"fix":{"range":[1295,1303],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1851,1854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1851,1854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3059,3062],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3059,3062],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3693,3696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3693,3696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import React, {useEffect, useMemo} from 'react';\nimport {Typography, Modal, FileUpload, Dropdown} from 'client-library';\nimport {FileUploadWrapper, FormWrapper, Row} from './styles';\nimport {formatData} from '../../screens/employees/evaluations/utils';\nimport {Controller, useForm} from 'react-hook-form';\nimport {EvaluationModalProps} from '../../screens/employees/evaluations/types';\nimport {yesOrNoOptionsString} from '../../constants';\nimport useEvaluationInsert from '../../services/graphql/userProfile/evaluation/useEvaluationInsert';\n\nconst initialValues = {\n  id: 0,\n  user_profile_id: 0,\n  date_of_evaluation: '',\n  score: '',\n  evaluator: '',\n  is_relevant: false,\n  file_id: 1,\n};\n\nexport const EvaluationModal: React.FC<EvaluationModalProps> = ({\n  alert,\n  refetchList,\n  selectedItem,\n  open,\n  onClose,\n  years,\n  userProfileId,\n}) => {\n  const item = useMemo(() => {\n    return selectedItem\n      ? {\n          ...selectedItem,\n          is_relevant: {id: selectedItem?.is_relevant ? 'Da' : 'Ne', title: selectedItem?.is_relevant ? 'Da' : 'Ne'},\n          date_of_evaluation: {id: selectedItem?.date_of_evaluation, title: selectedItem?.date_of_evaluation},\n          score: {id: selectedItem?.score, title: selectedItem?.score},\n          user_profile_id: Number(userProfileId),\n        }\n      : {...initialValues, user_profile_id: Number(userProfileId)};\n  }, [selectedItem]);\n\n  const {\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: item || initialValues});\n\n  useEffect(() => {\n    if (item) {\n      reset(item);\n    }\n  }, [item]);\n\n  const {mutate} = useEvaluationInsert(\n    () => {\n      refetchList();\n      alert.success('Uspješno sačuvano');\n      onClose();\n    },\n    () => {\n      alert.error('Greška pri čuvanju podataka');\n    },\n  );\n\n  const onSubmit = async (data: any) => {\n    const payload = formatData(data);\n    await mutate(payload);\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      content={\n        <FormWrapper>\n          <Row>\n            <Controller\n              name=\"date_of_evaluation\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value}\n                  name={name}\n                  label=\"GODINA:\"\n                  options={years}\n                  error={errors.date_of_evaluation?.message as string}\n                />\n              )}\n            />\n            <Controller\n              name=\"is_relevant\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"PRAVOSNAŽNOST:\"\n                    options={yesOrNoOptionsString}\n                    error={errors.is_relevant?.message as string}\n                  />\n                );\n              }}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"score\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"OCJENA:\"\n                    options={[\n                      {id: 'los', title: 'Loš'},\n                      {id: 'dobar', title: 'Dobar'},\n                      {id: 'vrlo dobar', title: 'Vrlo dobar'},\n                      {id: 'odlican', title: 'Odličan'},\n                    ]}\n                    error={errors.is_relevant?.message as string}\n                  />\n                );\n              }}\n            />\n          </Row>\n\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={(item: File | FileList) => console.log(item)}\n              note={<Typography variant=\"bodySmall\" content=\"Validacija\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n        </FormWrapper>\n      }\n      title={'DODAJTE NOVO ZAPOSLENJE'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/evaluationModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/experienceModal/experienceModal.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":38,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":38,"endColumn":11,"fix":{"range":[1248,1258],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":39,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":39,"endColumn":11,"fix":{"range":[1275,1285],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":40,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":40,"endColumn":11,"fix":{"range":[1384,1394],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":41,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":41,"endColumn":13,"fix":{"range":[1422,1434],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":42,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":42,"endColumn":13,"fix":{"range":[1503,1515],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":43,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":43,"endColumn":11,"fix":{"range":[1585,1595],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":44,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":44,"endColumn":9,"fix":{"range":[1598,1606],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3087,3090],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3087,3090],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4358,4361],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4358,4361],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":7,"fixableWarningCount":0,"source":"import {Typography, Modal, Input, Datepicker, FileUpload, Dropdown} from 'client-library';\nimport {FileUploadWrapper, FormWrapper, Row} from './styles';\nimport {ExperienceModalProps} from '../../screens/employees/experience/types';\nimport React, {useEffect, useMemo} from 'react';\nimport {parseDate} from '../../utils/dateUtils';\nimport {formatData} from '../../screens/employees/experience/utils';\nimport {UserProfileExperienceFormValues} from '../../types/graphql/userProfileGetExperienceTypes';\nimport {Controller, useForm} from 'react-hook-form';\nimport {yesOrNoOptionsString} from '../../constants';\nimport useExperienceInsert from '../../services/graphql/userProfile/experience/useExperienceInsert';\n\nconst initialValues: UserProfileExperienceFormValues = {\n  id: null,\n  user_profile_id: 0,\n  relevant: false,\n  amount_of_experience: 0,\n  amount_of_insured_experience: 0,\n  date_of_end: '',\n  date_of_signature: '',\n  date_of_start: '',\n  organization_unit: '',\n  organization_unit_id: 0,\n  reference_file_id: 0,\n};\n\nexport const ExperienceModal: React.FC<ExperienceModalProps> = ({\n  refetchList,\n  selectedItem,\n  open,\n  onClose,\n  units,\n  userProfileId,\n  alert,\n}) => {\n  const item = useMemo(() => {\n    return selectedItem\n      ? {\n          ...selectedItem,\n          relevant: {id: selectedItem?.relevant ? 'Da' : 'Ne', title: selectedItem?.relevant ? 'Da' : 'Ne'},\n          selectedOrganizationUnit: {\n            id: selectedItem?.relevant ? selectedItem?.organization_unit_id : 0,\n            title: selectedItem?.relevant ? selectedItem?.organization_unit : '',\n          },\n        }\n      : {...initialValues, user_profile_id: Number(userProfileId)};\n  }, [selectedItem]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: item || initialValues});\n\n  const {mutate} = useExperienceInsert();\n\n  const relevant = watch('relevant');\n\n  useEffect(() => {\n    if (item) {\n      reset(item);\n    }\n  }, [item]);\n\n  const onSubmit = (data: UserProfileExperienceFormValues) => {\n    const payload = formatData(data, !selectedItem);\n\n    try {\n      mutate(\n        payload,\n        () => {\n          alert.success('Uspješno sačuvano');\n          refetchList();\n          onClose();\n        },\n        () => {\n          alert.error('Nije uspješno sačuvano');\n          onClose();\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    } finally {\n      reset(initialValues);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      content={\n        <FormWrapper>\n          <Row>\n            <Controller\n              name=\"relevant\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"SUDSTVO:\"\n                    options={yesOrNoOptionsString}\n                    error={errors.relevant?.message as string}\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"date_of_start\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"POČETAK RADNOG ODNOSA:\"\n                  name={name}\n                  value={value ? parseDate(value) : ''}\n                  error={errors.date_of_start?.message as string}\n                />\n              )}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"selectedOrganizationUnit\"\n              rules={{\n                required: {value: relevant === true || relevant?.title === 'Da', message: 'Ovo polje je obavezno'},\n              }}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"JEDINICA:\"\n                    options={units}\n                    isDisabled={relevant === false || relevant?.title === 'Ne'}\n                    error={errors.selectedOrganizationUnit?.message as string}\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"date_of_end\"\n              control={control}\n              rules={{\n                required: 'Ovo polje je obavezno',\n                validate: value =>\n                  !value || !watch('date_of_start') || new Date(value) >= new Date(watch('date_of_start'))\n                    ? true\n                    : 'Kraj radnog odnosa ne može biti prije početka radnog odnosa.',\n              }}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"KRAJ RADNOG ODNOSA:\"\n                  name={name}\n                  value={value ? parseDate(value) : ''}\n                  error={errors.date_of_end?.message as string}\n                />\n              )}\n            />\n          </Row>\n          <Row>\n            <Input\n              {...register('organization_unit', {\n                required: {value: relevant === false || relevant?.title === 'Ne', message: 'Ovo polje je obavezno'},\n              })}\n              label=\"ORGANIZACIJA/INSTITUCIJA:\"\n              error={errors.organization_unit?.message as string}\n              disabled={relevant === true || relevant?.title === 'Da'}\n            />\n            <Input\n              {...register('amount_of_insured_experience', {required: 'Ovo polje je obavezno'})}\n              label=\"PRIJAVLJENI STAŽ (MJESECI):\"\n              error={errors.amount_of_insured_experience?.message as string}\n            />\n          </Row>\n\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={item => console.log(item)}\n              note={<Typography variant=\"bodySmall\" content=\"Dokaz o zaposlenju\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n        </FormWrapper>\n      }\n      title={'DODAJTE NOVO ZAPOSLENJE'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/experienceModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/familyMemberModal/familyMemberModal.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":48,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":48,"endColumn":11,"fix":{"range":[1369,1379],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":49,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":49,"endColumn":11,"fix":{"range":[1396,1406],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":50,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":50,"endColumn":13,"fix":{"range":[1428,1440],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":51,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":51,"endColumn":13,"fix":{"range":[1492,1504],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":52,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":52,"endColumn":11,"fix":{"range":[1559,1569],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":53,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":53,"endColumn":11,"fix":{"range":[1572,1582],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":54,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":54,"endColumn":13,"fix":{"range":[1604,1616],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":55,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":55,"endColumn":13,"fix":{"range":[1677,1689],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":56,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":56,"endColumn":11,"fix":{"range":[1753,1763],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":57,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":57,"endColumn":11,"fix":{"range":[1766,1776],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":58,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":58,"endColumn":11,"fix":{"range":[1886,1896],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":59,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":59,"endColumn":11,"fix":{"range":[1991,2001],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":60,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":60,"endColumn":11,"fix":{"range":[2081,2091],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":61,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":61,"endColumn":11,"fix":{"range":[2156,2166],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":62,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":62,"endColumn":11,"fix":{"range":[2231,2241],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":63,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":63,"endColumn":9,"fix":{"range":[2289,2297],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3158,3161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3158,3161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4045,4048],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4045,4048],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4674,4677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4674,4677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":175,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5333,5336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5333,5336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":202,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6282,6285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6282,6285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":219,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6898,6901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6898,6901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":274,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8922,8925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8922,8925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":16,"fixableWarningCount":0,"source":"import {Modal, Dropdown, Input, Datepicker} from 'client-library';\nimport {FormWrapper, Row} from './styles';\nimport React, {useEffect, useMemo} from 'react';\nimport {FamilyMemberModalProps} from '../../screens/employees/family/types';\nimport {cityData, employeeRelationshipDropdownData} from '../../utils/constants';\nimport {formatData} from '../../screens/employees/family/utils';\nimport {parseDate} from '../../utils/dateUtils';\nimport {Controller, useForm} from 'react-hook-form';\nimport {UserProfileFamily} from '../../types/graphql/userProfileGetFamilyTypes';\nimport useFamilyInsert from '../../services/graphql/userProfile/family/useFamilyInsert';\n\nconst initialValues: UserProfileFamily = {\n  id: 0,\n  user_profile_id: 0,\n  first_name: '',\n  last_name: '',\n  birth_last_name: '',\n  date_of_birth: '',\n  country_of_birth: '',\n  city_of_birth: '',\n  nationality: '',\n  citizenship: '',\n  address: '',\n  father_name: '',\n  mother_name: '',\n  mother_birth_last_name: '',\n  official_personal_id: '',\n  gender: '',\n  insurance_coverage: '',\n  handicapped_person: false,\n  employee_relationship: '',\n  created_at: '',\n  updated_at: '',\n};\n\nexport const FamilyMemberModal: React.FC<FamilyMemberModalProps> = ({\n  selectedItem,\n  open,\n  onClose,\n  countries,\n  userProfileId,\n  alert,\n  refetch,\n}) => {\n  const item = useMemo(() => {\n    return selectedItem\n      ? {\n          ...selectedItem,\n          handicapped_person: {\n            id: selectedItem?.handicapped_person ? 'Da' : 'Ne',\n            title: selectedItem?.handicapped_person ? 'Da' : 'Ne',\n          },\n          insurance_coverage: {\n            id: selectedItem?.insurance_coverage === 'Ne' ? 'Ne' : 'Da',\n            title: selectedItem?.insurance_coverage === 'Ne' ? 'Ne' : 'Da',\n          },\n          employee_relationship: {id: selectedItem?.employee_relationship, title: selectedItem?.employee_relationship},\n          country_of_birth: {id: selectedItem?.country_of_birth, title: selectedItem?.country_of_birth},\n          citizenship: {id: selectedItem?.citizenship, title: selectedItem?.citizenship},\n          gender: {id: selectedItem?.gender, title: selectedItem?.gender},\n          //To-do Get user_profile_id from props when employee is selected\n          user_profile_id: selectedItem?.user_profile_id,\n        }\n      : {...initialValues, user_profile_id: Number(userProfileId)};\n  }, [selectedItem]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: item || initialValues});\n\n  const {mutate} = useFamilyInsert();\n\n  const country_of_birth = watch('country_of_birth');\n\n  const countriesForDropdown = useMemo(() => {\n    return countries?.map(country => {\n      return {\n        id: country.alpha_3_code,\n        title: country.en_short_name,\n      };\n    });\n  }, [countries]);\n\n  const citizenshipArray = useMemo(() => {\n    return countries?.map(country => {\n      return {\n        id: country.alpha_3_code,\n        title: country.nationality,\n      };\n    });\n  }, [countries]);\n\n  useEffect(() => {\n    if (item) {\n      reset(item);\n    }\n  }, [item]);\n\n  const onSubmit = (data: any) => {\n    const payload = formatData(data);\n    mutate(\n      payload,\n      () => {\n        alert.success('Uspješno sačuvano');\n        refetch();\n        onClose();\n      },\n      () => {\n        alert.error('Nije uspješno sačuvano');\n        onClose();\n      },\n    );\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      content={\n        <FormWrapper>\n          <Row>\n            <Controller\n              name=\"employee_relationship\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"SRODSTVO:\"\n                    options={employeeRelationshipDropdownData}\n                    error={errors.employee_relationship?.message as string}\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"country_of_birth\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    isSearchable\n                    label=\"DRŽAVA ROĐENJA:\"\n                    options={countriesForDropdown || []}\n                    error={errors.country_of_birth?.message as string}\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"insurance_coverage\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"KORISNIK OSIGURANJA:\"\n                    options={[\n                      {id: 'Da', title: 'Da'},\n                      {id: 'Ne', title: 'Ne'},\n                    ]}\n                    error={errors.insurance_coverage?.message as string}\n                  />\n                );\n              }}\n            />\n          </Row>\n          <Row>\n            <Input\n              {...register('first_name', {required: 'Ovo polje je obavezno'})}\n              label=\"IME:\"\n              error={errors.first_name?.message as string}\n            />\n            <Controller\n              name=\"citizenship\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"DRŽAVLJANSTVO:\"\n                    options={citizenshipArray || []}\n                    error={errors.citizenship?.message as string}\n                  />\n                );\n              }}\n            />\n            <Controller\n              name=\"handicapped_person\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"LICE SA INVALIDITETOM:\"\n                    options={[\n                      {id: 'Da', title: 'Da'},\n                      {id: 'Ne', title: 'Ne'},\n                    ]}\n                    error={errors.handicapped_person?.message as string}\n                  />\n                );\n              }}\n            />\n          </Row>\n          <Row>\n            <Input\n              {...register('last_name', {required: 'Ovo polje je obavezno'})}\n              label=\"PREZIME:\"\n              error={errors.last_name?.message as string}\n            />\n            {country_of_birth?.title === 'Montenegro' ? (\n              <Controller\n                name=\"city_of_birth\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => {\n                  const valueToUse = typeof value === 'string' ? {id: value, title: value} : null;\n                  return (\n                    <Dropdown\n                      onChange={onChange}\n                      value={valueToUse || value}\n                      name={name}\n                      label=\"OPŠTINA:\"\n                      options={cityData}\n                      error={errors.city_of_birth?.message as string}\n                    />\n                  );\n                }}\n              />\n            ) : (\n              <Input\n                {...register('city_of_birth', {required: 'Ovo polje je obavezno'})}\n                label=\"OPŠTINA:\"\n                error={errors.city_of_birth?.message as string}\n              />\n            )}\n          </Row>\n          <Row>\n            <Controller\n              name=\"gender\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"POL:\"\n                    options={[\n                      {id: 'Muški', title: 'Muški'},\n                      {id: 'Ženski', title: 'Ženski'},\n                    ]}\n                    error={errors.gender?.message as string}\n                  />\n                );\n              }}\n            />\n            <Input\n              {...register('father_name', {required: 'Ovo polje je obavezno'})}\n              label=\"IME OCA:\"\n              error={errors.father_name?.message as string}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"date_of_birth\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"DATUM ROĐENJA:\"\n                  name={name}\n                  value={value ? parseDate(value) : ''}\n                  error={errors.date_of_birth?.message as string}\n                />\n              )}\n            />\n            <Input\n              {...register('mother_name', {required: 'Ovo polje je obavezno'})}\n              label=\"IME MAJKE:\"\n              error={errors.mother_name?.message as string}\n            />\n          </Row>\n          <Row>\n            <Input\n              {...register('official_personal_id', {required: 'Ovo polje je obavezno'})}\n              label=\"JMBG:\"\n              error={errors.official_personal_id?.message as string}\n            />\n            <Input\n              {...register('mother_birth_last_name', {required: 'Ovo polje je obavezno'})}\n              label=\"PREZIME PO ROĐENJU:\"\n              error={errors.mother_birth_last_name?.message as string}\n            />\n          </Row>\n        </FormWrapper>\n      }\n      title={'DODAJTE NOVO ZAPOSLENJE'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/familyMemberModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/importEmployeeModal/importEmployeeModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/internalRevisionList/internalRevisionList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[795,798],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[795,798],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[957,960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[957,960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useState} from 'react';\nimport {Table, Pagination, Divider, Dropdown, Button} from 'client-library';\nimport {internalRevisionTableHeads} from '../../screens/internalRevision/constants';\nimport {EditIconTwo, Theme, TrashIconTwo} from '@oykos-development/devkit-react-ts-styled-components';\nimport {DeleteModal} from '../../shared/deleteModal/deleteModal';\nimport {FilterContainer, MainTitle, RevisionListContainer, TableHeader} from './styles';\nimport {DropdownDataNumber} from '../../types/dropdownData';\nimport useInternalRevisionDelete from '../../services/graphql/internalRevision/useRevisionDelete';\n\ninterface InternalRevisionListProps {\n  navigate: (path: string) => void;\n  toggleInternalRevisionModal: (id: number) => void;\n  onPageChange: (page: number) => void;\n  data: any;\n  total: number;\n  revisorOptions: DropdownDataNumber[];\n  revisorFilter: number;\n  onFilter: (revisor: number) => void;\n  refetchList: () => void;\n  alert: any;\n}\n\nconst InternalRevisionList: React.FC<InternalRevisionListProps> = ({\n  data,\n  onPageChange,\n  toggleInternalRevisionModal,\n  total,\n  revisorOptions,\n  revisorFilter,\n  onFilter,\n  refetchList,\n  alert,\n}) => {\n  const [deleteModal, setDeleteModal] = useState(0);\n\n  const {mutate} = useInternalRevisionDelete();\n\n  const handleEdit = (id: number) => {\n    toggleInternalRevisionModal(id);\n  };\n\n  const toggleDeleteModal = (id: number) => {\n    setDeleteModal(id);\n  };\n\n  const handleDelete = () => {\n    mutate(\n      deleteModal,\n      () => {\n        toggleDeleteModal(0);\n        refetchList();\n        alert.success('Uspešno ste obrisali registar preporuka.');\n      },\n      () => {\n        toggleDeleteModal(0);\n        alert.error('Došlo je do greške prilikom brisanja registra preporuka.');\n      },\n    );\n  };\n\n  return (\n    <RevisionListContainer>\n      <MainTitle variant=\"bodyMedium\" content=\"GODIŠNJI PLAN REVIZIJA\" />\n      <Divider color={Theme?.palette?.gray200} height=\"1px\" />\n      <TableHeader>\n        <FilterContainer>\n          <Dropdown\n            name=\"revisor\"\n            value={revisorOptions.find(item => item.id === revisorFilter)}\n            onChange={value => onFilter(value.id as number)}\n            label=\"REVIZOR KOJI JE DAO PREPORUKU\"\n            options={[{id: 0, title: 'Svi revizori'}, ...revisorOptions]}\n            placeholder=\"Izaberite revizora\"\n          />\n        </FilterContainer>\n        <Button content=\"Dodaj registar preporuka\" variant=\"secondary\" onClick={() => toggleInternalRevisionModal(0)} />\n      </TableHeader>\n      <Table\n        tableHeads={internalRevisionTableHeads}\n        data={data}\n        style={{marginBottom: 22}}\n        tableActions={[\n          {name: 'edit', onClick: item => handleEdit(item.id), icon: <EditIconTwo stroke={Theme?.palette?.gray800} />},\n          {\n            name: 'delete',\n            onClick: item => toggleDeleteModal(item.id),\n            icon: <TrashIconTwo stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={Math.ceil(total / 10)}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={2}\n        previousLabel=\"Previous\"\n        nextLabel=\"Next\"\n        pageRangeDisplayed={3}\n      />\n      <DeleteModal open={!!deleteModal} onClose={() => toggleDeleteModal(0)} handleDelete={handleDelete} />\n    </RevisionListContainer>\n  );\n};\n\nexport default InternalRevisionList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/internalRevisionList/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/internalRevisionModal/internalRevisionModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1210,1213],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1210,1213],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'thirdFormSectionFields' is assigned a value but never used.","line":42,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6320,6323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6320,6323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7022,7025],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7022,7025],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":260,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8125,8128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8125,8128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":262,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":262,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8228,8231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8228,8231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":280,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":280,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8911,8914],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8911,8914],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":298,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9647,9650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9647,9650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":334,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":334,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11157,11160],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11157,11160],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":401,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":401,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13962,13965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13962,13965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":487,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":487,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17425,17428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17425,17428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":515,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":515,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18547,18550],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18547,18550],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":533,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":533,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19321,19324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19321,19324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useEffect, useMemo} from 'react';\nimport {FormGroup, ModalForm, ModalSection, ModalSectionTitle, RevisionModal, Row} from './styles';\nimport {Dropdown, Input, FileUpload, Datepicker} from 'client-library';\nimport {InternalRevisionFormValues} from '../../screens/internalRevision/types';\nimport {Controller, useForm} from 'react-hook-form';\nimport {yearsForDropdown} from '../../utils/constants';\nimport {FileUploadVariants} from '@oykos-development/devkit-react-ts-styled-components';\nimport {parseDate} from '../../utils/dateUtils';\nimport {\n  quarterOptions,\n  revisionDeadlineOptions,\n  revisionPriorityOptions,\n  revisionStatusOptions,\n  revisionTypeOptions,\n} from '../../constants';\nimport {DropdownDataNumber} from '../../types/dropdownData';\nimport useOrganizationUnits from '../../services/graphql/organizationUnits/useOrganizationUnits';\nimport useRevisionDetails from '../../services/graphql/internalRevision/useRevision';\nimport useRevisionInsert from '../../services/graphql/internalRevision/useRevisionInsert';\n\ninterface InternalRevisionModalProps {\n  open: boolean;\n  onClose: () => void;\n  id: number;\n  refetchList: () => void;\n  revisorOptions: DropdownDataNumber[];\n  alert: any;\n}\n\nconst secondFormSectionFields = [\n  'serial_number',\n  'priority',\n  'date_of_revision',\n  'responsible_user_profile',\n  'date_of_acceptance',\n  'date_of_rejection',\n  'implementation_month_span',\n  'date_of_implementation',\n  'implementation_suggestion',\n];\n\nconst thirdFormSectionFields = [\n  'state_of_implementation',\n  'implementation_failed_description',\n  'responsible_user_profile',\n  'second_implementation_month_span',\n  'implementation_failed_description',\n  'second_date_of_revision',\n];\n\nconst initialValues: InternalRevisionFormValues = {\n  revision_type: null,\n  revision_type_id: 0,\n  revisor_user_profile: null,\n  revisor_user_profile_id: 0,\n  revision_organization_unit: null,\n  revision_organization_unit_id: 0,\n  responsible_user_profile: null,\n  responsible_user_profile_id: 0,\n  implementation_user_profile: null,\n  implementation_user_profile_id: 0,\n  title: '',\n  planned_year: null,\n  planned_quarter: null,\n  serial_number: '',\n  priority: '',\n  date_of_revision: '',\n  date_of_acceptance: '',\n  date_of_rejection: '',\n  implementation_suggestion: '',\n  implementation_month_span: '',\n  date_of_implementation: '',\n  state_of_implementation: null,\n  implementation_failed_description: '',\n  second_implementation_month_span: '',\n  second_date_of_revision: '',\n  file_id: 0,\n};\n\nconst InternalRevisionModal: React.FC<InternalRevisionModalProps> = ({\n  open,\n  onClose,\n  id,\n  refetchList,\n  revisorOptions,\n  alert,\n}) => {\n  const {data} = useRevisionDetails(id);\n  const {mutate} = useRevisionInsert();\n  const {organizationUnitsList} = useOrganizationUnits();\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors, dirtyFields},\n    control,\n    reset,\n    watch,\n  } = useForm({\n    defaultValues: initialValues,\n  });\n\n  const onSubmit = (values: InternalRevisionFormValues) => {\n    const data = {\n      ...values,\n      implementation_user_profile_id: 1,\n      revision_type_id: values.revision_type?.id || 0,\n      revisor_user_profile_id: values.revisor_user_profile?.id || 0,\n      revision_organization_unit_id: values.revision_organization_unit?.id || 0,\n      responsible_user_profile_id: values.responsible_user_profile?.id || 0,\n      planned_year: values.planned_year?.id || '',\n      planned_quarter: values.planned_quarter?.id || '',\n      state_of_implementation: values.state_of_implementation?.id || '',\n      id,\n    };\n\n    delete data.revision_type;\n    delete data.revisor_user_profile;\n    delete data.revision_organization_unit;\n    delete data.responsible_user_profile;\n    delete data.implementation_user_profile;\n\n    mutate(\n      data,\n      () => {\n        refetchList();\n        onClose();\n        alert.success(id ? 'Revizija uspješno sačuvana.' : 'Revizija je uspešno dodata.');\n        reset(initialValues);\n      },\n      () => {\n        alert.error(\n          id ? 'Došlo je do greške prilikom izmjena revizije.' : 'Došlo je do greške prilikom dodavanja revizije.',\n        );\n      },\n    );\n  };\n\n  const shouldValidateSecondSection = () => {\n    let shouldValidate = false;\n\n    for (const field of secondFormSectionFields) {\n      if (Object.keys(dirtyFields).includes(field)) {\n        shouldValidate = true;\n        break;\n      }\n    }\n\n    return shouldValidate;\n  };\n\n  // const shouldValidateThirdSection = () => {\n  //   let shouldValidate = false;\n\n  //   for (const field of thirdFormSectionFields) {\n  //     if (Object.keys(dirtyFields).includes(field)) {\n  //       shouldValidate = true;\n  //       break;\n  //     }\n  //   }\n\n  //   return shouldValidate;\n  // };\n\n  const onUpload = () => {\n    console.log('upload');\n  };\n\n  useEffect(() => {\n    if (data && data.items && id) {\n      reset({\n        ...data.items[0],\n        planned_year: {\n          id: data.items[0].planned_year,\n          title: data.items[0].planned_year,\n        },\n        planned_quarter: {id: data.items[0].planned_quarter, title: data.items[0].planned_quarter},\n        priority: revisionPriorityOptions.find(option => option.id === data.items[0].priority),\n      });\n    }\n  }, [data]);\n\n  const yearOptions = useMemo(\n    () => yearsForDropdown().map(year => ({id: year.id.toString(), title: year.title.toString()})),\n    [],\n  );\n\n  const implemented = watch('state_of_implementation')?.id === 'implemented';\n\n  return (\n    <RevisionModal\n      onClose={() => {\n        reset(initialValues);\n        onClose();\n      }}\n      open={open}\n      title=\"DODAJTE REGISTAR PREPORUKA\"\n      style={{width: '805px'}}\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      content={\n        <ModalForm>\n          {/* ***** PLAN REVIZIJE ****** */}\n          <ModalSection>\n            <ModalSectionTitle content=\"PLAN REVIZIJE:\" variant=\"bodyMedium\" />\n            <Row>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"planned_year\"\n                  rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={yearOptions}\n                      error={errors.planned_year?.message as string}\n                      placeholder=\"Izaberite godinu\"\n                      label=\"GODINA:\"\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"planned_quarter\"\n                  rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={quarterOptions}\n                      error={errors.planned_quarter?.message as string}\n                      placeholder=\"Izaberite kvartal\"\n                      label=\"KVARTAL ZA SPROVOĐENJE REVIZIJE:\"\n                    />\n                  )}\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Input\n                  {...register('title', {required: 'Ovo polje je obavezno'})}\n                  label=\"NAZIV REVIZIJE:\"\n                  placeholder=\"Izaberite naziv\"\n                  error={errors.title?.message as string}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"revision_organization_unit\"\n                  rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={organizationUnitsList as any}\n                      error={errors.revision_organization_unit?.message as string}\n                      placeholder=\"Izaberite subjekt\"\n                      label=\"SUBJEKT REVIZIJE:\"\n                    />\n                  )}\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"revisor_user_profile\"\n                  rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={revisorOptions}\n                      error={errors.revisor_user_profile?.message as string}\n                      placeholder=\"Izaberite revizore\"\n                      label=\"REVIZOR KOJI JE DAO PREPORUKU:\"\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"revision_type\"\n                  rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={revisionTypeOptions}\n                      error={errors.revision_type?.message as string}\n                      placeholder=\"Izaberite vrstu revizije\"\n                      label=\"VRSTA REVIZIJE:\"\n                    />\n                  )}\n                />\n              </FormGroup>\n            </Row>\n            <FileUpload variant={FileUploadVariants.tertiary} onUpload={onUpload} />\n          </ModalSection>\n\n          {/* ***** PREPORUKE REVIZIJE ****** */}\n          <ModalSection>\n            <ModalSectionTitle content=\"PREPORUKE REVIZIJE:\" variant=\"bodyMedium\" />\n            <Row>\n              <FormGroup>\n                <Input\n                  {...register('serial_number', {\n                    required: {value: shouldValidateSecondSection(), message: 'Ovo polje je obavezno'},\n                  })}\n                  label=\"BROJ REVIZIJE:\"\n                  placeholder=\"Unesite broj revizije\"\n                  error={errors.serial_number?.message as string}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"priority\"\n                  rules={{required: {value: shouldValidateSecondSection(), message: 'Ovo polje je obavezno'}}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={revisionPriorityOptions}\n                      error={errors.priority?.message as string}\n                      placeholder=\"Izaberite prioritet revizije\"\n                      label=\"PRIORITET REVIZIJE:\"\n                    />\n                  )}\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Controller\n                  name=\"date_of_revision\"\n                  control={control}\n                  rules={{required: {value: shouldValidateSecondSection(), message: 'Ovo polje je obavezno'}}}\n                  render={({field: {onChange, name, value}}) => (\n                    <Datepicker\n                      onChange={onChange}\n                      label=\"DATUM REVIZIJE:\"\n                      name={name}\n                      value={value ? parseDate(value) : ''}\n                      error={errors.date_of_revision?.message as string}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  {...register('responsible_user_profile', {\n                    required: {\n                      value: shouldValidateSecondSection(),\n                      message: 'Ovo polje je obavezno',\n                    },\n                  })}\n                  error={errors.responsible_user_profile?.message as string}\n                  placeholder=\"Unesite odgovorno lice\"\n                  label=\"ODGOVORNO LICE ZA PROVOĐENJE PREPORUKE:\"\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Controller\n                  name=\"date_of_acceptance\"\n                  control={control}\n                  rules={{required: {value: shouldValidateSecondSection(), message: 'Ovo polje je obavezno'}}}\n                  render={({field: {onChange, name, value}}) => (\n                    <Datepicker\n                      onChange={onChange}\n                      label=\"DATUM PRIHVATANJA AKCIONOG PLANA:\"\n                      name={name}\n                      value={value ? parseDate(value) : ''}\n                      error={errors.date_of_acceptance?.message as string}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"date_of_implementation\"\n                  rules={{required: {value: shouldValidateSecondSection(), message: 'Ovo polje je obavezno'}}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={revisionDeadlineOptions}\n                      error={errors.date_of_implementation?.message as string}\n                      placeholder=\"Izaberite rok\"\n                      label=\"ROK SPROVOĐENJA PREPORUKE:\"\n                    />\n                  )}\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Controller\n                  name=\"date_of_rejection\"\n                  control={control}\n                  render={({field: {onChange, name, value}}) => (\n                    <Datepicker\n                      onChange={onChange}\n                      label=\"DATUM NEPRIHVATANJA PREPORUKE:\"\n                      name={name}\n                      value={value ? parseDate(value) : ''}\n                      error={errors.date_of_rejection?.message as string}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"date_of_implementation\"\n                  rules={{required: {value: shouldValidateSecondSection(), message: 'Ovo polje je obavezno'}}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Datepicker\n                      onChange={onChange}\n                      label=\"DATUM SPROVOĐENJA PREPORUKE:\"\n                      name={name}\n                      value={value ? parseDate(value) : ''}\n                      error={errors.date_of_implementation?.message as string}\n                    />\n                  )}\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Input\n                  {...register('implementation_suggestion', {\n                    required: {value: shouldValidateSecondSection(), message: 'Ovo polje je obavezno'},\n                  })}\n                  label=\"PREPORUKA:\"\n                  placeholder=\"Unesite preporuku\"\n                  error={errors.implementation_suggestion?.message as string}\n                />\n              </FormGroup>\n            </Row>\n            {/* <Controller\n              name=\"state_of_implementation\"\n              control={control}\n              render={({field: {name, value}}) => {\n                return (\n                  <CheckboxContainer>\n                    <Checkbox\n                      onChange={() => setValue('state_of_implementation', !value)}\n                      name={name}\n                      checked={value}\n                    />\n                    <CheckboxLabel content=\"Neograničeno Trajanje\" variant=\"bodySmall\" />\n                  </CheckboxContainer>\n                );\n              }}\n            /> */}\n          </ModalSection>\n\n          {/* ***** SPROVODJENJE REVIZIJE ****** */}\n          <ModalSection>\n            <ModalSectionTitle content=\"SPROVOĐENJE REVIZIJE:\" variant=\"bodyMedium\" />\n            <Row>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"state_of_implementation\"\n                  // rules={{required: {value: shouldValidateThirdSection, message: 'Ovo polje je obavezno'}}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={revisionStatusOptions}\n                      error={errors.state_of_implementation?.message as string}\n                      placeholder=\"Izaberite status\"\n                      label=\"STATUS SPROVOĐENJA:\"\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  // {...register('title')}\n                  label=\"REF. DOKUMENTA ZA PRAĆENJE SPROVOĐENJE PREPORUKA:\"\n                  placeholder=\"Unesite dokumenta za praćenje\"\n                  error={errors.title?.message as string}\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"implementation_user_profile\"\n                  // rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={revisionStatusOptions}\n                      error={errors.implementation_user_profile?.message as string}\n                      placeholder=\"Izaberite opciju\"\n                      label=\"IMPLEMENTACIJU PREPORUKE POTVRDIO:\"\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"second_implementation_month_span\"\n                  // rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value as any}\n                      onChange={onChange}\n                      options={revisionDeadlineOptions}\n                      error={errors.second_implementation_month_span?.message as string}\n                      placeholder=\"Izaberite novi rok\"\n                      label=\"NOVI ROK SPROVOĐENJA PREPORUKE:\"\n                      isDisabled={implemented}\n                    />\n                  )}\n                />\n              </FormGroup>\n            </Row>\n            <Row>\n              <FormGroup>\n                <Input\n                  {...register('implementation_failed_description')}\n                  label=\"RAZLOZI NESPROVOĐENJA:\"\n                  placeholder=\"Unesite razloge\"\n                  error={errors.implementation_failed_description?.message as string}\n                  disabled={implemented}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Controller\n                  control={control}\n                  name=\"second_date_of_revision\"\n                  // rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {name, value, onChange}}) => (\n                    <Datepicker\n                      onChange={onChange}\n                      label=\"NOVI DATUM SPROVOĐENJA PREPORUKE:\"\n                      name={name}\n                      value={value ? parseDate(value) : ''}\n                      error={errors.second_date_of_revision?.message as string}\n                      isDisabled={implemented}\n                    />\n                  )}\n                />\n              </FormGroup>\n            </Row>\n          </ModalSection>\n        </ModalForm>\n      }\n    />\n  );\n};\n\nexport default InternalRevisionModal;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/internalRevisionModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobPositionTable/jobPositionTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2012,2015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2012,2015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2120,2123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2120,2123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2344,2347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2344,2347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2772,2775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2772,2775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2932,2935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2932,2935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3002,3005],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3002,3005],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3797,3800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3797,3800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4506,4509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4506,4509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4968,4971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4968,4971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5254,5257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5254,5257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5332,5335],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5332,5335],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5875,5878],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5875,5878],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":202,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6993,6996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6993,6996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7646,7649],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7646,7649],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7971,7974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7971,7974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":253,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8404,8407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8404,8407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":265,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8715,8718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8715,8718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":266,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8783,8786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8783,8786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":293,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9797,9800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9797,9800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":317,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10528,10531],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10528,10531],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":319,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":319,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10652,10655],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10652,10655],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":330,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11065,11068],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11065,11068],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":212,"column":15,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":212,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":280,"column":17,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":280,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useEffect, useState} from 'react';\nimport useJobPositions from '../../services/graphql/jobPositions/useJobPositionOverview';\nimport {EmployeeDropdownWrapper, StyledTable} from './styles';\nimport {JobPositionTableProps} from './types';\nimport {\n  TableHead,\n  EditIconTwo,\n  TrashIcon,\n  Theme,\n  Input,\n  Dropdown,\n  MinusCircleIcon,\n  CheckIcon,\n  XIcon,\n  PlusCircleIcon,\n  Typography,\n} from 'client-library';\nimport useUserProfiles from '../../services/graphql/userProfile/useUserProfiles';\nimport {DropdownDataNumber} from '../../types/dropdownData';\nimport {formatDataAddJobPosition} from '../../screens/systematization/utils';\nimport useEmployeeInOrganizationUnitDelete from '../../services/graphql/organizationUnitsEmployees/useOrganizationUnitEmployeeDelete';\nimport useOrganizationUnitDeleteJobPosition from '../../services/graphql/organizationUnitsJobPositions/useOrganizationUnitDeleteJobPosition';\nimport {DeleteModal} from '../../shared/deleteModal/deleteModal';\nimport useOrganizationUnitInsertJobPosition from '../../services/graphql/organizationUnitsJobPositions/useOrganizationUnitInsertJobPosition';\nimport useOrganizationUnitEmployeeInsert from '../../services/graphql/organizationUnitsEmployees/useOrganizationUnitEmployeeInsert';\n\nexport const JobPositionTable: React.FC<JobPositionTableProps> = ({\n  data,\n  sectorID,\n  systematizationID,\n  refetch,\n  alert,\n}) => {\n  const {data: jobPositionData} = useJobPositions('');\n  const {data: allEmployees} = useUserProfiles({\n    page: 1,\n    size: 100,\n    is_active: null,\n    organization_unit_id: null,\n    job_position_id: null,\n    type: null,\n  });\n  const {mutate: insertJobPosition} = useOrganizationUnitInsertJobPosition();\n  const {mutate: deleteJobPosition} = useOrganizationUnitDeleteJobPosition();\n\n  const {mutate: insertEmployee} = useOrganizationUnitEmployeeInsert();\n  const {mutate: deleteEmployee} = useEmployeeInOrganizationUnitDelete();\n\n  const jobPositionsForDropdown = jobPositionData?.items?.map((item: any) => ({id: item.id, title: item.title}));\n  const employeesForDropdown = allEmployees?.items?.map((item: any) => ({\n    id: item.id,\n    title: `${item.first_name} ${item.last_name}`,\n  }));\n\n  const [selectedEmployee, setSelectedEmployee] = useState<DropdownDataNumber>();\n  const [tableDataState, setTableDataState] = useState<any[]>([]);\n  const [editTableRow, setEditTableRow] = useState<null | number>(null);\n  const [deleteItemId, setDeleteItemId] = useState<null | number>(null);\n  const selectRow = (id: number) => {\n    setEditTableRow(id);\n  };\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const deleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setDeleteItemId(id);\n  };\n\n  const handleChange = (value: any, name: string) => {\n    if (name === 'employees') {\n      setSelectedEmployee(value);\n    } else {\n      const updatedTableData = tableDataState.map((item: any) => {\n        const jobPositon = jobPositionData?.items?.find((i: any) => i.id === value?.id);\n\n        if (item.id !== editTableRow) return item;\n        if (name === 'available_slots') {\n          return {\n            ...item,\n            [name]: {...item[name], value: value},\n          };\n        } else {\n          return {\n            ...item,\n            [name]: {\n              ...item[name],\n              id: value?.id,\n              title: value?.title,\n              description: jobPositon?.description,\n              requirements: jobPositon?.requirements,\n            },\n          };\n        }\n      });\n      setTableDataState(updatedTableData);\n    }\n  };\n\n  const handleEditEmployees = (id?: number) => {\n    //if id is passed, we are deleting employee from table otherwise we are adding\n    const updatedTableData = tableDataState.map((item: any) => {\n      if (item.id !== editTableRow) return item;\n      if (item.id === editTableRow) {\n        if (editTableRow !== 0) {\n          if (id) {\n            deleteEmployee(id, () => {\n              refetch && refetch();\n            });\n          } else {\n            insertEmployee(\n              {\n                id: 0,\n                user_profile_id: selectedEmployee?.id || 0,\n                position_in_organization_unit_id: item?.id,\n                active: true,\n              },\n              () => {\n                refetch && refetch();\n              },\n            );\n          }\n        }\n        return {\n          ...item,\n          employees: id\n            ? item.employees.filter((i: any) => i.id !== id)\n            : [...item.employees, {...selectedEmployee, row_id: editTableRow}],\n        };\n      }\n    });\n    setTableDataState(updatedTableData);\n    setSelectedEmployee(undefined);\n  };\n\n  const handleDelete = () => {\n    deleteJobPosition(\n      Number(deleteItemId),\n      () => {\n        refetch && refetch(true);\n        setShowDeleteModal(false);\n        setDeleteItemId(null);\n        setTableDataState(tableDataState.filter((item: any) => item.id !== deleteItemId));\n        alert.success('Uspješno ste obrisali radno mjesto!');\n      },\n      () => {\n        alert.error('Nije uspješno brisanje radnog mjesta!');\n      },\n    );\n  };\n\n  const handleSave = () => {\n    const selectedItem = tableDataState.find((item: any) => item.id === editTableRow);\n    const originalItem = data?.find((item: any) => item.id === editTableRow);\n    const availableSlotsChanged = Number(selectedItem?.available_slots?.value) !== originalItem?.available_slots;\n\n    const payload = formatDataAddJobPosition({\n      ...selectedItem,\n      systematization_id: systematizationID,\n      parent_organization_unit_id: sectorID,\n    });\n    insertJobPosition(\n      payload,\n      jobPositionResponse => {\n        if (selectedItem?.id === 0 && selectedItem?.employees?.length !== 0) {\n          const employeeInsertPromises = selectedItem?.employees?.map((item: any) => {\n            return insertEmployee(\n              {\n                id: 0,\n                user_profile_id: item?.id || 0,\n                position_in_organization_unit_id: jobPositionResponse?.id || 0,\n                active: true,\n              },\n              undefined,\n              () => {\n                alert.error('Greška prilikom čuvanja radnog mjesta!');\n              },\n            );\n          });\n\n          Promise.all(employeeInsertPromises).then(() => {\n            alert.success('Uspješno sačuvano radno mjesto!');\n            refetch && refetch(availableSlotsChanged);\n          });\n        } else {\n          refetch && refetch(availableSlotsChanged);\n          alert.success('Uspješno sačuvano radno mjesto!');\n        }\n      },\n      () => {\n        alert.error('Greška prilikom čuvanja radnog mjesta!');\n      },\n    );\n    setEditTableRow(null);\n  };\n\n  const tableHeads: TableHead[] = [\n    {title: 'Redni Broj', accessor: 'serial_number', type: 'text'},\n    {\n      title: 'Naziv radnog mjesta',\n      accessor: 'job_position',\n      type: 'custom',\n      renderContents: (item: any) => {\n        return (\n          <div key={`item-job-position-${item.id}`}>\n            <Dropdown\n              value={item}\n              name=\"job_position\"\n              onChange={handleChange}\n              options={jobPositionsForDropdown}\n              // @TODO remove ts-ignore\n              //eslint-disable-next-line @typescript-eslint/ban-ts-comment\n              //@ts-ignore\n              maxMenuHeight={200}\n              isDisabled={item?.row_id !== editTableRow}\n            />\n          </div>\n        );\n      },\n    },\n    {\n      title: 'Uvjeti',\n      accessor: 'job_position',\n      type: 'custom',\n      renderContents: (item: any) => {\n        return (\n          <div key={`item-requirements-${item.id}`}>\n            <Typography content={item?.requirements} variant=\"bodyMedium\" />\n          </div>\n        );\n      },\n    },\n    {\n      title: 'Broj izvršilaca',\n      accessor: 'available_slots',\n      type: 'custom',\n      renderContents: (item: any) => {\n        return (\n          <Input\n            value={item.value}\n            name=\"available_slots\"\n            style={{width: 100}}\n            disabled={item?.row_id !== editTableRow}\n            onChange={ev => handleChange(ev.target.value, 'available_slots')}\n          />\n        );\n      },\n    },\n\n    {\n      title: 'Opis poslova',\n      accessor: 'job_position',\n      type: 'custom',\n      renderContents: (item: any) => {\n        return (\n          <div key={`item-description-${item.id}`}>\n            <Typography content={item?.description} variant=\"bodyMedium\" />\n          </div>\n        );\n      },\n    },\n    {\n      title: 'Zaposleni',\n      accessor: 'employees',\n      type: 'custom',\n      renderContents: (item: any, row) => {\n        const selectedItem = tableDataState.find((i: any) => i.id === editTableRow);\n        const isDisabled = row?.id !== editTableRow;\n\n        return (\n          <div>\n            <EmployeeDropdownWrapper>\n              <Dropdown\n                value={selectedEmployee}\n                name=\"employees\"\n                options={employeesForDropdown}\n                onChange={handleChange}\n                isDisabled={isDisabled}\n                // @TODO remove ts-ignore\n                //eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                //@ts-ignore\n                maxMenuHeight={200}\n                isSearchable\n              />\n              {selectedEmployee && item.length < selectedItem?.available_slots?.value && (\n                <PlusCircleIcon\n                  stroke={Theme?.palette?.gray500}\n                  height=\"17px\"\n                  width=\"17px\"\n                  onClick={() => handleEditEmployees()}\n                />\n              )}\n            </EmployeeDropdownWrapper>\n            {item?.map((employee: any) => {\n              return (\n                <div key={`employee-${employee?.id}`}>\n                  <Input\n                    value={employee.title}\n                    rightContent={\n                      <MinusCircleIcon\n                        stroke={Theme?.palette?.gray500}\n                        onClick={() => handleEditEmployees(employee?.id)}\n                      />\n                    }\n                    disabled={employee?.row_id !== editTableRow}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        );\n      },\n    },\n    {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n  ];\n\n  useEffect(() => {\n    const transformedData = data?.map((item: any) => {\n      if (item.id === 0) setEditTableRow(0);\n      const jobPosition = jobPositionData?.items?.find((jobPosition: any) => jobPosition.id === item.job_position.id);\n      return {\n        ...item,\n        serial_number: item?.serial_number || 0,\n        job_position: {\n          id: jobPosition?.id,\n          title: jobPosition?.title,\n          requirements: jobPosition?.requirements,\n          description: jobPosition?.description,\n          row_id: item?.id,\n        },\n        employees: item?.employees?.map((employee: any) => ({\n          ...employee,\n          row_id: item?.id,\n        })),\n        available_slots: {value: item?.available_slots, row_id: item?.id},\n      };\n    });\n\n    setTableDataState(transformedData);\n  }, [data, jobPositionData]);\n\n  return (\n    <>\n      <StyledTable\n        tableHeads={tableHeads}\n        data={tableDataState}\n        tableActions={[\n          {name: 'edit', onClick: item => selectRow(item.id), icon: <EditIconTwo stroke={Theme?.palette?.gray800} />},\n          {name: 'save', onClick: handleSave, icon: <CheckIcon />, shouldRender: item => editTableRow !== item.id},\n          {\n            name: 'delete',\n            onClick: item => deleteIconClick(item.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n          {\n            name: 'cancel',\n            onClick: () => setEditTableRow(null),\n            icon: <XIcon />,\n            shouldRender: item => editTableRow !== item.id,\n          },\n        ]}\n      />\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobPositionTable/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobPositionTable/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[272,275],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[272,275],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {SystematizationJobPositions} from '../../types/graphql/jobPositions';\n\nexport interface JobPositionTableProps {\n  data: SystematizationJobPositions[];\n  sectorID: number;\n  systematizationID: number;\n  refetch?: (availableSlotsChanged?: boolean) => void;\n  alert: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderApplicationsList/jobTenderApplicationsList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[877,880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[877,880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {EditIconTwo, Pagination, Table, Theme, Typography, PlusIcon, TrashIcon} from 'client-library';\nimport React, {useMemo, useState} from 'react';\nimport {DeleteModal} from '../../shared/deleteModal/deleteModal';\nimport {PlusButton, TableHeader} from './styles';\nimport {applicationsTableHeads} from '../../screens/jobTenders/constants';\nimport {JobTenderApplication} from '../../types/graphql/jobTenders';\nimport useJobTenderApplications from '../../services/graphql/jobTenders/useJobTenderApplicationOverview';\nimport useJobTendersDeleteApplication from '../../services/graphql/jobTenders/useJobTenderApplicationDelete';\nimport {ScreenProps} from '../../types/screen-props';\nimport {JobTenderApplicationModal} from '../JobTenderApplicationModal/JobTenderApplicationModal';\n\nexport interface JobTenderDetailsListProps extends ScreenProps {\n  jobTenderId: number;\n  alert: any;\n}\n\nconst JobTenderApplicationsList: React.FC<JobTenderDetailsListProps> = ({jobTenderId, alert, ...props}) => {\n  const [showModal, setShowModal] = useState(false);\n  const [editItemId, setEditItemId] = useState(0);\n  const [page, setPage] = useState(1);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [deleteItemID, setDeleteItemID] = useState(0);\n  const {data: applications, refreshData} = useJobTenderApplications({page, size: 10, job_tender_id: jobTenderId});\n\n  const {mutate: deleteJobTenderApplication} = useJobTendersDeleteApplication();\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const handleCloseDeleteModal = () => {\n    setDeleteItemID(0);\n    setShowDeleteModal(false);\n  };\n\n  const handleDelete = () => {\n    deleteJobTenderApplication(\n      deleteItemID,\n      () => {\n        refreshData();\n        alert.success('Uspješno obrisano');\n      },\n      () => {\n        alert.success('Brisanje nije uspješno');\n      },\n    );\n\n    setDeleteItemID(0);\n    setShowDeleteModal(false);\n  };\n\n  const handleEdit = (id: number) => {\n    setEditItemId(id ?? 0);\n    setShowModal(true);\n  };\n\n  const toggleApplicationModal = (id?: number) => {\n    setShowModal(prev => !prev);\n    if (id) {\n      handleEdit(id);\n    }\n  };\n\n  const editItem = useMemo(\n    () => applications?.items?.find((item: JobTenderApplication) => item.id === editItemId),\n    [applications, editItemId],\n  );\n\n  return (\n    <>\n      <TableHeader>\n        <Typography variant=\"bodyMedium\" content=\"Kandidati za ovaj oglas\" />\n        <PlusButton onClick={() => toggleApplicationModal()}>\n          <PlusIcon width=\"12px\" height=\"12px\" stroke={Theme.palette.primary500} />\n        </PlusButton>\n      </TableHeader>\n      <Table\n        tableHeads={applicationsTableHeads}\n        data={applications.items}\n        style={{marginBottom: 22}}\n        onRowClick={item => toggleApplicationModal(item.id)}\n        tableActions={[\n          {\n            name: 'edit',\n            onClick: item => toggleApplicationModal(item.id),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n          },\n          {\n            name: 'delete',\n            onClick: item => {\n              setShowDeleteModal(true);\n              setDeleteItemID(item.id);\n            },\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={applications.total / 10}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={2}\n        previousLabel=\"Previous\"\n        nextLabel=\"Next\"\n        pageRangeDisplayed={3}\n      />\n      <DeleteModal\n        open={showDeleteModal}\n        onClose={() => {\n          handleCloseDeleteModal();\n        }}\n        handleDelete={handleDelete}\n      />\n      {showModal && (\n        <JobTenderApplicationModal\n          countries={props?.context?.countries || []}\n          selectedItem={editItem}\n          open={showModal}\n          onClose={() => setShowModal(false)}\n          jobTenderId={jobTenderId}\n          alert={alert}\n          refetchList={refreshData}\n          {...props}\n        />\n      )}\n    </>\n  );\n};\nexport default JobTenderApplicationsList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderApplicationsList/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderInfo/jobTenderInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderInfo/styles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Theme' is defined but never used.","line":2,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import styled from 'styled-components';\nimport {Typography, Theme} from 'client-library';\n\nexport const Container = styled.div``;\nexport const InfoPreview = styled.div`\n  display: flex;\n`;\n\nexport const Details = styled.div`\n  display: flex;\n  gap: 20px;\n  margin-block: 22px;\n`;\n\nexport const Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const StyledLabel = styled(Typography)`\n  text-transform: uppercase;\n  font-weight: bold;\n  margin-right: 1rem;\n`;\n\nexport const StyledValue = styled(Typography)``;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 22px;\n`;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderModal/jobTenderModal.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":43,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":43,"endColumn":11,"fix":{"range":[1090,1100],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":44,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":44,"endColumn":11,"fix":{"range":[1117,1127],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":45,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":45,"endColumn":9,"fix":{"range":[1210,1218],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1742,1745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1742,1745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2934,2937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2934,2937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2973,2976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2973,2976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3608,3611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3608,3611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":132,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3647,3650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3647,3650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import {CheckIcon, Datepicker, Dropdown, FileUpload, Input, Modal, Theme, Typography} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport useJobTenderInsert from '../../services/graphql/jobTenders/useJobTenderInsert';\nimport {JobTender, JobTendersModal} from '../../types/graphql/jobTenders';\nimport {parseDate} from '../../utils/dateUtils';\nimport {FileUploadWrapper, ModalContentWrapper, Row} from '../education/modals/styles';\n\nconst initialValues: JobTender = {\n  id: 0,\n  organization_unit: {\n    id: 0,\n    title: '',\n  },\n  job_position: {\n    id: 0,\n    title: '',\n  },\n  type_tender: {\n    id: 0,\n    title: '',\n  },\n  date_of_start: '',\n  date_of_end: '',\n  serial_number: '',\n  type: undefined,\n  description: '',\n  available_slots: 0,\n  active: true,\n  file_id: 0,\n};\n\nexport const JobTenderModal: React.FC<JobTendersModal> = ({\n  selectedItem,\n  open,\n  onClose,\n  jobPositionOrganizationUnitsList,\n  dropdownJobTenderType,\n}) => {\n  const item = useMemo(() => {\n    return selectedItem\n      ? {\n          ...selectedItem,\n          type_tender: dropdownJobTenderType.find(item => item.title === selectedItem.type),\n        }\n      : initialValues;\n  }, [selectedItem]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: item || initialValues});\n\n  const {mutate, success, error} = useJobTenderInsert(() => {\n    if (success) {\n      onClose(true, 'Uspješno sačuvano');\n    } else if (error) {\n      onClose(false, 'Nije uspješno sašuvano');\n    }\n    reset(item);\n  });\n\n  useEffect(() => {\n    if (item) {\n      reset(item);\n    }\n  }, [item]);\n\n  const onSubmit = (values: any) => {\n    try {\n      mutate({\n        ...values,\n        id: values.id || 0,\n        organization_unit: values?.organization_unit,\n        job_position: values?.job_position,\n        type: values?.type_tender?.title,\n        description: '',\n        serial_number: values.serial_number,\n        available_slots: 0,\n        active: false,\n        date_of_start: parseDate(values?.date_of_start, true),\n        date_of_end: parseDate(values?.date_of_end, true),\n        file_id: 0,\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose(true);\n        reset(item);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      content={\n        <ModalContentWrapper>\n          <Row>\n            <Controller\n              name=\"type_tender\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"TIP OGLASA:\"\n                  name={name}\n                  options={dropdownJobTenderType as any}\n                  value={value as any}\n                  onChange={onChange}\n                  rightOptionIcon={<CheckIcon stroke={Theme.palette.primary500} />}\n                  error={errors.expertise_level?.message as string}\n                />\n              )}\n            />\n\n            <Controller\n              name=\"job_position\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"POZICIJA ORGANIZACIONA JEDINICA:\"\n                  name={name}\n                  options={jobPositionOrganizationUnitsList as any}\n                  value={value as any}\n                  onChange={onChange}\n                  rightOptionIcon={<CheckIcon stroke={Theme.palette.primary500} />}\n                  error={errors.expertise_level?.message as string}\n                />\n              )}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"date_of_start\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"DATUM OBJAVE:\"\n                  name={name}\n                  value={value ? parseDate(value) : ''}\n                  error={errors.date_of_start?.message as string}\n                />\n              )}\n            />\n\n            <Controller\n              name=\"date_of_end\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"DATUM ZAKLJUČENJA:\"\n                  name={name}\n                  value={value ? parseDate(value) : ''}\n                  error={errors.date_of_start?.message as string}\n                />\n              )}\n            />\n          </Row>\n          <Row>\n            <Input\n              {...register('serial_number', {required: 'Ovo polje je obavezno'})}\n              label=\"BROJ OGLASA:\"\n              error={errors.certificate_issuer?.message as string}\n            />\n          </Row>\n          <FileUploadWrapper>\n            <FileUpload\n              icon={<></>}\n              style={{width: '100%'}}\n              variant=\"secondary\"\n              onUpload={item => console.log(item)}\n              note={<Typography variant=\"bodySmall\" content=\"Dokument oglasa\" />}\n              buttonText=\"Učitaj\"\n            />\n          </FileUploadWrapper>\n        </ModalContentWrapper>\n      }\n      title={'DODAJTE NOVI OGLAS'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTenderModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTendersList/jobTendersList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'yearsForDropdown' is defined but never used.","line":10,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1093,1096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1093,1096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1125,1128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1125,1128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1158,1161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1158,1161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2401,2404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2401,2404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2441,2444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2441,2444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2698,2701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2698,2701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2754,2757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2754,2757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3040,3043],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3040,3043],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3146,3149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3146,3149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {Button, Divider, EditIconTwo, Pagination, Table, Theme, TrashIcon} from 'client-library';\nimport {FC, useMemo, useState} from 'react';\nimport {JobTendersListFilters} from '../../screens/jobTenders';\nimport {tableHeads} from '../../screens/jobTenders/constants';\nimport {DeleteModal} from '../../shared/deleteModal/deleteModal';\nimport {DropdownDataBoolean} from '../../types/dropdownData';\nimport {JobTender, JobTendersResponse} from '../../types/graphql/jobTenders';\nimport {MicroserviceProps} from '../../types/micro-service-props';\nimport {yearsForDropdown} from '../../utils/constants';\nimport {Controls, FilterDropdown, Filters, Header, MainTitle, OverviewBox} from './styles';\n\nconst statusFilter: DropdownDataBoolean[] = [\n  {id: true, title: 'Aktivni'},\n  {id: false, title: 'Neaktivni'},\n];\n\nexport interface JobTendersListProps {\n  navigate: (path: string) => void;\n  toggleJobTenderImportModal: (item?: JobTender) => void;\n  onPageChange: (page: number) => void;\n  data: JobTendersResponse['data']['jobTenders_Overview'];\n  dropdownJobTenderType: any[];\n  organizationUnitsList: any[];\n  onFilterChange: (value: any, name: string) => void;\n  filters: JobTendersListFilters;\n  deleteJobTender: (id: number) => void;\n  context: MicroserviceProps;\n}\n\nconst JobTendersList: FC<JobTendersListProps> = ({\n  navigate,\n  toggleJobTenderImportModal,\n  onPageChange,\n  data,\n  dropdownJobTenderType,\n  organizationUnitsList,\n  onFilterChange,\n  filters,\n  deleteJobTender,\n  context,\n}) => {\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [deleteItemID, setDeleteItemID] = useState(0);\n\n  const list: JobTender[] = useMemo(\n    () =>\n      data.items.map((item: JobTender) => ({\n        ...item,\n        active_badge: item.active === true ? 'Aktivan' : 'Neaktivan',\n      })),\n    [data],\n  );\n\n  const handleCloseDeleteModal = () => {\n    setDeleteItemID(0);\n    setShowDeleteModal(false);\n  };\n\n  const handleDelete = () => {\n    deleteJobTender(deleteItemID);\n    setDeleteItemID(0);\n    setShowDeleteModal(false);\n  };\n\n  return (\n    <OverviewBox>\n      <MainTitle variant=\"bodyMedium\" content=\"PREGLED SVIH OGLASA\" />\n      {/*TODO: theme color */}\n      <Divider color=\"#615959\" height=\"1px\" />\n      <Header>\n        <Filters>\n          <FilterDropdown\n            label=\"TIP OGLASA:\"\n            options={dropdownJobTenderType as any}\n            value={filters.type as any}\n            name=\"type\"\n            onChange={value => onFilterChange(value, 'type')}\n            placeholder=\"Tip oglasa\"\n          />\n          <FilterDropdown\n            label=\"ORGANIZACIONA JEDINICA:\"\n            options={organizationUnitsList as any}\n            value={filters.organization_unit_id as any}\n            name=\"organization_unit_id\"\n            onChange={value => onFilterChange(value, 'organization_unit_id')}\n            placeholder=\"Odaberite organizacionu jedinicu\"\n          />\n          <FilterDropdown\n            label=\"STATUS:\"\n            options={statusFilter as any}\n            onChange={value => onFilterChange(value, 'active')}\n            value={filters.active as any}\n            name=\"active\"\n            placeholder=\"Odaberite status\"\n          />\n        </Filters>\n        <Controls>\n          <Button\n            content=\"Dodaj novi oglas\"\n            variant=\"secondary\"\n            style={{width: 170}}\n            onClick={() => toggleJobTenderImportModal()}\n          />\n        </Controls>\n      </Header>\n      <Table\n        tableHeads={tableHeads}\n        data={list}\n        style={{marginBottom: 22}}\n        onRowClick={item => {\n          navigate(`/hr/job-tenders/job-tenders-list/${item.id}`);\n          context.breadcrumbs.add({\n            name: `${item.id}`,\n            to: `/hr/job-tenders/job-tenders-list/${item.id}`,\n          });\n        }}\n        tableActions={[\n          {\n            name: 'edit',\n            onClick: item => toggleJobTenderImportModal(item),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n          },\n          {\n            name: 'delete',\n            onClick: item => {\n              setShowDeleteModal(true);\n              setDeleteItemID(item.id);\n            },\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={data.total * 10}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={2}\n        previousLabel=\"Previous\"\n        nextLabel=\"Next\"\n        pageRangeDisplayed={3}\n      />\n      <DeleteModal\n        open={showDeleteModal}\n        onClose={() => {\n          handleCloseDeleteModal();\n        }}\n        handleDelete={handleDelete}\n      />\n    </OverviewBox>\n  );\n};\n\nexport default JobTendersList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/jobTendersList/styles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Theme' is defined but never used.","line":1,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":55}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Typography, Dropdown, Breadcrumbs, Tabs, Theme} from 'client-library';\nimport styled from 'styled-components';\nimport SectionBox from '../../shared/sectionBox';\nimport {Input} from 'client-library';\n\nexport const Header = styled.div`\n  display: flex;\n  margin-block: 22px;\n  align-items: center;\n  flex-wrap: wrap;\n  row-gap: 30px;\n  column-gap: 10px;\n`;\n\nexport const Controls = styled.div`\n  display: flex;\n`;\n\nexport const Filters = styled.div`\n  display: flex;\n  gap: 8px;\n  flex-grow: 1;\n  flex-wrap: wrap;\n`;\n\nexport const FilterLabel = styled(Typography)`\n  font-weight: 600;\n`;\n\n//TODO: on devkit and/or storybook, make dropdown to be at least the width of its label ??\nexport const FilterDropdown = styled(Dropdown)`\n  width: 300px;\n`;\n\nexport const MainTitle = styled(Typography)`\n  margin-bottom: 10px;\n  font-weight: 600;\n`;\n\nexport const OverviewBox = styled(SectionBox)`\n  margin-top: 25px;\n`;\n\nexport const ScreenWrapper = styled.div`\n  background-color: #f8f8f8;\n  padding: 28px 40px;\n  height: calc(100vh - 157px);\n  overflow-y: auto;\n  box-sizing: border-box;\n\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nexport const StyledBreadcrumbs = styled(Breadcrumbs)`\n  padding: 0;\n  margin: 0;\n`;\n\nexport const StyledTabs = styled(Tabs)`\n  /* width: 100%; */\n  overflow-x: auto;\n`;\n\nexport const FormInput = styled(Input)`\n  width: 300px;\n  & ::placeholder {\n    font-family: Source Sans Pro, sans-serif;\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 20px;\n    color: #aba2a2;\n  }\n`;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/judgeNormModal/judgeNormModal.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":27,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":27,"endColumn":11,"fix":{"range":[955,965],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":28,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":28,"endColumn":11,"fix":{"range":[982,992],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":32,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":32,"endColumn":11,"fix":{"range":[1167,1177],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":33,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":33,"endColumn":9,"fix":{"range":[1261,1269],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1628,1631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1628,1631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2837,2840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2837,2840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2876,2879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2876,2879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3726,3729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3726,3729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3765,3768],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3765,3768],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import {CheckIcon, Datepicker, Dropdown, Input, Modal, Theme} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {Norms} from '../../types/graphql/judges';\nimport {parseDate} from '../../utils/dateUtils';\nimport {ModalContentWrapper, Row} from '../education/modals/styles';\nimport {ModalProps} from '../../screens/employees/education/types';\nimport {areaItems} from '../../screens/judges/constants';\nimport useJudgeNormsInsert from '../../services/graphql/judges/useJudgeNormInsert';\n\nconst initialValues: Norms = {\n  id: 0,\n  user_profile_id: 0,\n  topic: null,\n  norm: 0,\n  number_of_norm_decrease: '',\n  number_of_items: 0,\n  number_of_items_solved: 0,\n  start_date: '',\n  end_date: '',\n};\n\nconst JudgeNormModal: React.FC<ModalProps> = ({alert, refetchList, open, onClose, selectedItem, dropdownData}) => {\n  const item = useMemo(() => {\n    return selectedItem\n      ? {\n          ...selectedItem,\n          user_profile_id:\n            selectedItem.user_profile_id != 0\n              ? dropdownData?.find(user => user.id === selectedItem.user_profile_id)\n              : undefined,\n          area: selectedItem?.area ? areaItems.find(i => i.title === selectedItem.area) : '',\n        }\n      : initialValues;\n  }, [selectedItem]);\n\n  const {\n    watch,\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: item || initialValues});\n\n  const {mutate} = useJudgeNormsInsert();\n\n  useEffect(() => {\n    if (item) {\n      reset(item);\n    }\n  }, [item]);\n\n  const onSubmit = async (values: any) => {\n    try {\n      await mutate(\n        {\n          ...values,\n          user_profile_id: values?.user_profile_id?.id,\n          area: values?.area?.title,\n          start_date: parseDate(values?.start_date, true) || '',\n          end_date: parseDate(values?.end_date, true) || '',\n        },\n        () => {\n          refetchList && refetchList();\n          alert.success('Uspješno sačuvano');\n          onClose();\n        },\n        () => {\n          alert.error('Greška pri čuvanju podataka');\n        },\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose();\n        reset(item);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      content={\n        <ModalContentWrapper>\n          <Row>\n            <Controller\n              name=\"user_profile_id\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"SUDIJA:\"\n                  name={name}\n                  options={dropdownData as any}\n                  value={value as any}\n                  onChange={onChange}\n                  rightOptionIcon={<CheckIcon stroke={Theme.palette.primary500} />}\n                  error={errors.user_profile_id?.message as string}\n                />\n              )}\n            />\n            <Input\n              {...register('number_of_norm_decrease', {required: 'Ovo polje je obavezno'})}\n              label=\"UMANJEJE NORME:\"\n              error={errors.number_of_norm_decrease?.message as string}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"topic\"\n              rules={{required: 'Ovo polje je obavezno'}}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  label=\"MATERIJA:\"\n                  name={name}\n                  options={areaItems as any}\n                  value={value as any}\n                  onChange={onChange}\n                  rightOptionIcon={<CheckIcon stroke={Theme.palette.primary500} />}\n                  error={errors.topic?.message as string}\n                />\n              )}\n            />\n            <Input\n              {...register('number_of_items', {required: 'Ovo polje je obavezno'})}\n              label=\"BROJ PREDMETA:\"\n              error={errors.number_of_items?.message as string}\n            />\n          </Row>\n          <Row>\n            <Input\n              {...register('norm', {required: 'Ovo polje je obavezno'})}\n              label=\"NORMA:\"\n              error={errors.norm?.message as string}\n            />\n            <Input\n              {...register('number_of_items_solved', {required: 'Ovo polje je obavezno'})}\n              label=\"RIJEŠENO PREDMETA:\"\n              error={errors.number_of_items_solved?.message as string}\n            />\n          </Row>\n          <Row>\n            <Controller\n              name=\"start_date\"\n              control={control}\n              rules={{required: 'Ovo polje je obavezno'}}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"DATUM POČETKA:\"\n                  name={name}\n                  value={value ? parseDate(value) : ''}\n                  error={errors.start_date?.message as string}\n                />\n              )}\n            />\n            <Controller\n              name=\"end_date\"\n              control={control}\n              rules={{\n                required: 'Ovo polje je obavezno',\n                validate: value =>\n                  !value || !watch('start_date') || new Date(value) >= new Date(watch('start_date'))\n                    ? true\n                    : 'Datum kraja ne može biti prije datuma početka.',\n              }}\n              render={({field: {onChange, name, value}}) => (\n                <Datepicker\n                  onChange={onChange}\n                  label=\"DATUM KRAJA:\"\n                  name={name}\n                  value={value ? parseDate(value) : ''}\n                  error={errors.end_date?.message as string}\n                />\n              )}\n            />\n          </Row>\n        </ModalContentWrapper>\n      }\n      title={'NORMA'}\n    />\n  );\n};\n\nexport default JudgeNormModal;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/judgeNormModal/style.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/judgesList/judgesList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[583,586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[583,586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[608,611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[608,611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[658,661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[658,661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1624,1627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1624,1627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1677,1680],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1677,1680],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1962,1965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1962,1965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2010,2013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2010,2013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useMemo} from 'react';\nimport {Button, Divider, Pagination, Table} from 'client-library';\nimport {JudgesListFilters} from '../../screens/judges/judgeNorms/judges';\nimport {JudgeOverview} from '../../types/graphql/judges';\nimport {Controls, FilterDropdown, Filters, Header, MainTitle, OverviewBox} from './styles';\nimport {judgeTableHeads} from '../../screens/judges/judgeNorms/constants';\n\nexport interface JudgesListProps {\n  toggleJudgesNorms: (item?: JudgeOverview) => void;\n  onPageChange: (page: number) => void;\n  data: JudgeOverview[];\n  organizationUnitsList: any[];\n  usersUnitsList: any[];\n  total: number;\n  onFilterChange: (value: any, name: string) => void;\n  filters: JudgesListFilters;\n  addNorm: () => void;\n}\n\nconst JudgesList: React.FC<JudgesListProps> = ({\n  toggleJudgesNorms,\n  onPageChange,\n  data,\n  organizationUnitsList,\n  usersUnitsList,\n  total,\n  onFilterChange,\n  filters,\n  addNorm,\n}) => {\n  const list: JudgeOverview[] = useMemo(\n    () =>\n      data?.map((item: JudgeOverview) => ({\n        ...item,\n        evaluation_title: item?.norms[0]?.evaluation?.score ? item?.norms[0]?.evaluation?.score : '',\n        relocation_title: item?.norms[0]?.relocation?.location ? item?.norms[0]?.relocation?.location : '',\n      })),\n    [data],\n  );\n\n  return (\n    <OverviewBox>\n      <MainTitle variant=\"bodyMedium\" content=\"PREGLED SUDIJA I PREDSJEDNIKA\" />\n      {/*TODO: theme color */}\n      <Divider color=\"#615959\" height=\"1px\" />\n      <Header>\n        <Filters>\n          <FilterDropdown\n            label=\"ORGANIZACIONA JEDINICA:\"\n            options={organizationUnitsList as any}\n            value={filters.organization_unit as any}\n            name=\"organization_unit_id\"\n            onChange={value => onFilterChange(value, 'organization_unit')}\n            placeholder=\"Odaberite organizacionu jedinicu\"\n          />\n          <FilterDropdown\n            label=\"SUDIJA:\"\n            options={usersUnitsList as any}\n            value={filters.user_profile as any}\n            name=\"user_profile_id\"\n            onChange={value => onFilterChange(value, 'user_profile')}\n            placeholder=\"Odaberite sudiju\"\n          />\n        </Filters>\n        <Controls>\n          <Button content=\"Dodaj normu\" variant=\"secondary\" style={{width: 130}} onClick={() => addNorm()} />\n        </Controls>\n      </Header>\n      <Table\n        tableHeads={judgeTableHeads}\n        data={list}\n        style={{marginBottom: 22}}\n        onRowClick={item => toggleJudgesNorms(item)}\n      />\n      <Pagination\n        pageCount={Math.ceil(total / 10)}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={2}\n        previousLabel=\"Previous\"\n        nextLabel=\"Next\"\n        pageRangeDisplayed={3}\n      />\n    </OverviewBox>\n  );\n};\n\nexport default JudgesList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/judgesList/styles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Theme' is defined but never used.","line":1,"column":57,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":62}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Typography, Dropdown, Breadcrumbs, Tabs, Input, Theme} from 'client-library';\nimport styled from 'styled-components';\nimport SectionBox from '../../shared/sectionBox';\n\nexport const Header = styled.div`\n  display: flex;\n  margin-block: 22px;\n  align-items: center;\n  flex-wrap: wrap;\n  row-gap: 30px;\n  column-gap: 10px;\n`;\n\nexport const Controls = styled.div`\n  display: flex;\n`;\n\nexport const Filters = styled.div`\n  display: flex;\n  gap: 8px;\n  flex-grow: 1;\n  flex-wrap: wrap;\n`;\n\n//TODO: on devkit and/or storybook, make dropdown to be at least the width of its label ??\nexport const FilterDropdown = styled(Dropdown)`\n  width: 300px;\n`;\n\nexport const FilterInput = styled(Input)`\n  width: 300px;\n`;\n\nexport const MainTitle = styled(Typography)`\n  margin-bottom: 10px;\n  font-weight: 600;\n`;\n\nexport const OverviewBox = styled(SectionBox)`\n  margin-top: 25px;\n`;\n\nexport const ScreenWrapper = styled.div`\n  background-color: #f8f8f8;\n  padding: 28px 40px;\n  height: calc(100vh - 157px);\n  overflow-y: auto;\n  box-sizing: border-box;\n\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nexport const StyledBreadcrumbs = styled(Breadcrumbs)`\n  padding: 0;\n  margin: 0;\n`;\n\nexport const StyledTabs = styled(Tabs)`\n  /* width: 100%; */\n  overflow-x: auto;\n`;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/judgesNumbersList/judgesNumbersList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[926,929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[926,929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1039,1042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1039,1042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2349,2352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2349,2352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useMemo, useState} from 'react';\nimport {Controls, FilterDropdown, Filters, Header, MainTitle, OverviewBox} from '../judgesList/styles';\nimport {JudgeResolutionOverview} from '../../types/graphql/judges';\nimport {DropdownDataString} from '../../types/dropdownData';\nimport {JudgesNumberListFilters} from '../../screens/judges/judgesNumberDecisions/judgesNumberDecision';\nimport {judgesNumberResolutionTableHeads} from '../../screens/judges/judgeNorms/constants';\nimport {EditIconTwo, Theme, TrashIcon, Button, Divider, Pagination, Table} from 'client-library';\nimport {DeleteModal} from '../../shared/deleteModal/deleteModal';\nimport useJudgeResolutionsDelete from '../../services/graphql/judges/useJudgeResolutionDelete';\n\nexport interface JudgesNumbersListProps {\n  data: JudgeResolutionOverview[];\n  total: number;\n  years: DropdownDataString[];\n  filters: JudgesNumberListFilters;\n  onFilterChange: (value: any, name: string) => void;\n  onPageChange: (page: number) => void;\n  navigate: (path: string) => void;\n  alert: any;\n  refetch: () => void;\n}\n\nconst JudgesNumbersList: React.FC<JudgesNumbersListProps> = ({\n  data,\n  total,\n  years,\n  filters,\n  onFilterChange,\n  onPageChange,\n  navigate,\n  alert,\n  refetch,\n}) => {\n  const [deleteId, setDeleteId] = useState(0);\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const {mutate} = useJudgeResolutionsDelete();\n\n  const list: JudgeResolutionOverview[] = useMemo(\n    () =>\n      data?.map((item: JudgeResolutionOverview) => ({\n        ...item,\n      })),\n    [data],\n  );\n\n  const openDeleteModal = (id: number) => {\n    setDeleteId(id);\n    setDeleteModal(true);\n  };\n\n  const handleDelete = () => {\n    if (deleteId) {\n      mutate(\n        deleteId,\n        () => {\n          refetch();\n          alert.success('Odluka je uspješno obrisana');\n          setDeleteModal(false);\n        },\n        () => {\n          alert.error('Došlo je do greške prilikom brisanja odluke');\n          setDeleteModal(false);\n        },\n      );\n    }\n  };\n\n  return (\n    <OverviewBox>\n      <MainTitle variant=\"bodyMedium\" content=\"PREGLED ODLUKA O BROJU SUDIJA I PREDSJEDNIKA\" />\n      <Divider color=\"#615959\" height=\"1px\" />\n      <Header>\n        <Filters>\n          <FilterDropdown\n            label=\"GODINA:\"\n            options={years}\n            value={filters.year as any}\n            name=\"year\"\n            onChange={value => onFilterChange(value, 'year')}\n            placeholder=\"Odaberite godinu\"\n          />\n        </Filters>\n        <Controls>\n          <Button\n            content=\"Dodaj odluku\"\n            variant=\"secondary\"\n            style={{width: 130}}\n            onClick={() => navigate('/hr/judges/number-decision/new-decision')}\n          />\n        </Controls>\n      </Header>\n      <Table\n        tableHeads={judgesNumberResolutionTableHeads}\n        data={list}\n        style={{marginBottom: 22}}\n        tableActions={[\n          {\n            name: 'edit',\n            onClick: row => navigate(`/hr/judges/number-decision/${row.id}`),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n          },\n          {\n            name: 'delete',\n            onClick: item => openDeleteModal(item.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={Math.ceil(total / 10)}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={2}\n        previousLabel=\"Previous\"\n        nextLabel=\"Next\"\n        pageRangeDisplayed={3}\n      />\n      <DeleteModal open={deleteModal} onClose={() => setDeleteModal(false)} handleDelete={handleDelete} />\n    </OverviewBox>\n  );\n};\n\nexport default JudgesNumbersList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/newEmployeeSearch/newEmployeeSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/normsList/normsList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[614,617],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[614,617],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1287,1290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1287,1290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {EditIconTwo, Table, Theme, TrashIcon} from 'client-library';\nimport React, {useMemo} from 'react';\nimport {Norms} from '../../types/graphql/judges';\nimport {FilterDropdown, Filters, Header, OverviewBox} from '../judgesList/styles';\nimport {NormListFilters} from '../../screens/judges/judgeNorms/judges';\nimport {DropdownDataNumber} from '../../types/dropdownData';\nimport {judgeNormsTableHeads} from '../../screens/judges/judgeNorms/constants';\n\ninterface NormsListProps {\n  data: Norms[];\n  toggleNormsModal: (item: Norms) => void;\n  handleDeleteIconClick: (id: number) => void;\n  onFilterChange: (value: any, name: string) => void;\n  filters: NormListFilters;\n  areas: DropdownDataNumber[];\n}\n\nconst NormsList: React.FC<NormsListProps> = ({\n  data,\n  filters,\n  areas,\n  onFilterChange,\n  toggleNormsModal,\n  handleDeleteIconClick,\n}) => {\n  const list: Norms[] = useMemo(() => {\n    return data?.filter((item: Norms) => {\n      if (filters.area === null || filters.area.id === 0) {\n        return true;\n      }\n      return item.area === filters.area.title;\n    });\n  }, [data, filters.area]);\n\n  return (\n    <OverviewBox>\n      <Header>\n        <Filters>\n          <FilterDropdown\n            label=\"MATERIJA:\"\n            options={areas}\n            value={filters.area as any}\n            name=\"area\"\n            onChange={value => onFilterChange(value, 'area')}\n            placeholder=\"Odaberite materiju\"\n          />\n        </Filters>\n      </Header>\n      <Table\n        tableHeads={judgeNormsTableHeads}\n        data={list}\n        style={{marginBottom: 22}}\n        tableActions={[\n          {\n            name: 'edit',\n            onClick: item => toggleNormsModal(item),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n          },\n          {\n            name: 'delete',\n            onClick: item => handleDeleteIconClick(item.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n    </OverviewBox>\n  );\n};\n\nexport default NormsList;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/organizationUnitModal/organizationUnitModal.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":30,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":30,"endColumn":11,"fix":{"range":[862,872],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":31,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":31,"endColumn":11,"fix":{"range":[889,899],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":32,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":32,"endColumn":9,"fix":{"range":[970,978],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":34,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":34,"endColumn":11,"fix":{"range":[990,1000],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":35,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":35,"endColumn":11,"fix":{"range":[1018,1028],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":36,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":36,"endColumn":9,"fix":{"range":[1099,1107],"text":"      "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1634,1637],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1634,1637],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3078,3081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3078,3081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import {CheckIcon, Dropdown, Input, Modal, Theme} from 'client-library';\nimport React, {useEffect, useMemo} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {FormGroup, ModalContentWrapper} from './styles';\nimport {OrganizationUnitModalProps} from './types';\nimport {OrganizationUnit} from '../../types/graphql/organizationUnitsTypes';\nimport useOrganizationUnitInsert from '../../services/graphql/organizationUnits/useOrganizationUnitInsert';\n\nconst initialValues: OrganizationUnit = {\n  id: 0,\n  parent_id: 0,\n  number_of_judges: 0,\n  title: '',\n  abbreviation: '',\n  color: '',\n  folder_id: 0,\n  icon: '',\n};\n\nexport const OrganisationalUnitModal: React.FC<OrganizationUnitModalProps> = ({\n  open,\n  onClose,\n  dropdownData,\n  organizationUnit,\n  selectedItem,\n}) => {\n  const item = useMemo(() => {\n    return selectedItem\n      ? {\n          ...selectedItem,\n          parent_id: {id: organizationUnit?.id, title: organizationUnit?.title},\n        }\n      : {\n          ...initialValues,\n          parent_id: {id: organizationUnit?.id, title: organizationUnit?.title},\n        };\n  }, [selectedItem]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {errors},\n    reset,\n  } = useForm({defaultValues: item || initialValues});\n\n  const {mutate, success, error} = useOrganizationUnitInsert(() => {\n    if (success) {\n      onClose(true, 'Uspješno sačuvano');\n\n      reset(initialValues);\n    } else if (error) {\n      onClose(false, 'Nije uspješno sačuvano');\n    }\n  });\n\n  useEffect(() => {\n    if (item) {\n      reset(item);\n    }\n  }, [item]);\n\n  const onSubmit = async (values: any) => {\n    try {\n      mutate({\n        ...values,\n        title: values?.title,\n        abbreviation: values?.abbreviation,\n        parent_id: organizationUnit?.id,\n        description: values?.description,\n        address: values?.address,\n        number_of_judges: values?.number_of_judges || 0,\n        folder_id: values?.folder_id || 0,\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        onClose(false);\n        reset(item);\n      }}\n      leftButtonText=\"Otkaži\"\n      rightButtonText=\"Sačuvaj\"\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      content={\n        <ModalContentWrapper>\n          <FormGroup>\n            <Input\n              {...register('abbreviation', {required: 'Ovo polje je obavezno'})}\n              label=\"SKRAĆENICA:\"\n              error={errors.abbreviation?.message as string}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Input\n              {...register('title', {required: 'Ovo polje je obavezno'})}\n              label=\"NAZIV:\"\n              error={errors.title?.message as string}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Controller\n              name=\"parent_id\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <Dropdown\n                  onChange={onChange}\n                  value={value as any}\n                  name={name}\n                  label=\"PARENT:\"\n                  options={dropdownData || []}\n                  rightOptionIcon={<CheckIcon stroke={Theme.palette.primary500} />}\n                  error={errors.parent_id?.message as string}\n                  isDisabled\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Input {...register('address')} label=\"ADRESA:\" error={errors.address?.message as string} />\n          </FormGroup>\n\n          <FormGroup>\n            <Input\n              {...register('description')}\n              textarea={true}\n              label=\"OPIS:\"\n              error={errors.description?.message as string}\n            />\n          </FormGroup>\n        </ModalContentWrapper>\n      }\n      title={'DODAJTE NOVU ORGANIZACIONU JEDINICU'}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/organizationUnitModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/organizationUnitModal/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[125,128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[125,128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[169,172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[169,172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[184,187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[184,187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[215,218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[215,218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {DropdownDataNumber} from '../../types/dropdownData';\n\nexport interface OrganizationUnitModalProps {\n  selectedItem?: any;\n  open: boolean;\n  onClose: (refetch?: any, message?: any) => void;\n  dropdownData?: any;\n  action?: string;\n  organizationUnit?: DropdownDataNumber;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/permitEntryModal/permitEntryModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[727,730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[727,730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[743,746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[743,746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1275,1278],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1275,1278],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1820,1823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1820,1823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1917,1920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1917,1920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1974,1977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1974,1977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2035,2038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2035,2038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3996,3999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3996,3999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":226,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7832,7835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7832,7835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useEffect, useMemo} from 'react';\nimport {Input, Dropdown, Datepicker, Checkbox} from 'client-library';\nimport {CheckboxContainer, CheckboxLabel, ColumnTitle, Form, FormColumn, FormGroup, PermitModal} from './styles';\nimport {ForeignerPermitParams} from '../../types/graphql/foreignerPermits';\nimport {cityData} from '../../constants';\nimport {Controller, useForm} from 'react-hook-form';\nimport {parseDate} from '../../utils/dateUtils';\nimport useForeignerPermitInsert from '../../services/graphql/foreignerPermits/useForeignerPermitInsert';\n\ninterface PermitEntryModalProps {\n  open: boolean;\n  onClose: () => void;\n  data?: ForeignerPermitParams | null;\n  id?: number;\n  refetchList: () => void;\n  countries: any[];\n  alert: any;\n}\n\nconst initialValues: ForeignerPermitParams = {\n  work_permit_number: '',\n  work_permit_issuer: null,\n  work_permit_date_of_start: '',\n  work_permit_date_of_end: '',\n  residence_permit_number: '',\n  residence_permit_date_of_end: '',\n  country_of_origin: null,\n  residence_permit_indefinite_length: false,\n};\n\nconst PermitEntryModal: React.FC<PermitEntryModalProps> = ({\n  onClose,\n  open,\n  data,\n  id,\n  refetchList,\n  countries,\n  alert,\n}) => {\n  const countryOptions = useMemo(() => {\n    return countries?.map((country: any) => {\n      return {\n        id: country.alpha_3_code,\n        title: country.en_short_name,\n      };\n    });\n  }, [countries]);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: {errors},\n    setValue,\n    reset,\n  } = useForm({defaultValues: data ?? initialValues});\n\n  const indefinite = watch('residence_permit_indefinite_length');\n\n  const {mutate} = useForeignerPermitInsert();\n\n  useEffect(() => {\n    if (data) {\n      reset({\n        ...data,\n        country_of_origin: countryOptions.find((country: any) => country.id === data.country_of_origin),\n        work_permit_issuer: cityData.find((city: any) => city.id === data.work_permit_issuer),\n      } as any);\n    }\n  }, [data]);\n\n  const onSubmit = async (values: any) => {\n    try {\n      mutate(\n        {\n          ...values,\n          work_permit_issuer: values.work_permit_issuer.id,\n          country_of_origin: values.country_of_origin.id,\n          id: id ? id : 0,\n          user_profile_id: 3,\n          work_permit_date_of_start: parseDate(values.work_permit_date_of_start),\n          work_permit_date_of_end: parseDate(values.work_permit_date_of_end),\n          residence_permit_date_of_end: parseDate(values.residence_permit_date_of_end),\n        },\n        () => {\n          refetchList();\n          alert.success('Uspješno ste dodali unos');\n          // setAlert({variant: AlertVariants.success, message: 'Uspješno ste dodali unos'});\n          onClose();\n        },\n      );\n    } catch (e) {\n      alert.error('Greška prilikom dodavanja unosa');\n      // setAlert({variant: AlertVariants.success, message: 'Greška prilikom dodavanja unosa'});\n      console.log(e);\n    }\n  };\n\n  return (\n    <PermitModal\n      onClose={onClose}\n      open={open}\n      title=\"DODAJTE DOZVOLU\"\n      style={{width: '1020px'}}\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      content={\n        <Form>\n          <FormColumn>\n            <ColumnTitle content=\"PODACI O RADNOJ DOZVOLI\" variant=\"bodySmall\" style={{fontWeight: 600}} />\n            <FormGroup>\n              <Input\n                {...register('work_permit_number', {required: 'Ovo polje je obavezno'})}\n                label=\"BROJ:\"\n                error={errors.work_permit_number?.message as string}\n                placeholder=\"Unesite broj radne dozvole\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Controller\n                name=\"work_permit_issuer\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    name={name}\n                    label=\"IZDAVALAC:\"\n                    options={cityData}\n                    error={errors.work_permit_issuer?.message as string}\n                    placeholder=\"Izaberite izdavaoca\"\n                  />\n                )}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Controller\n                name=\"work_permit_date_of_start\"\n                control={control}\n                rules={{required: 'Ovo polje je obavezno'}}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    onChange={onChange}\n                    label=\"VAŽI OD:\"\n                    name={name}\n                    value={value ? parseDate(value) : ''}\n                    error={errors.work_permit_date_of_start?.message as string}\n                  />\n                )}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Controller\n                name=\"work_permit_date_of_end\"\n                control={control}\n                rules={{required: {value: !indefinite, message: 'Ovo polje je obavezno'}}}\n                render={({field: {onChange, name, value}}) => {\n                  return (\n                    <Datepicker\n                      onChange={onChange}\n                      label=\"VAŽI DO:\"\n                      name={name}\n                      value={value ? parseDate(value) : ''}\n                      error={errors.work_permit_date_of_end?.message as string}\n                      disabled={indefinite}\n                    />\n                  );\n                }}\n              />\n            </FormGroup>\n\n            <Controller\n              name=\"residence_permit_indefinite_length\"\n              control={control}\n              render={({field: {name, value}}) => {\n                return (\n                  <CheckboxContainer>\n                    <Checkbox\n                      onChange={() => setValue('residence_permit_indefinite_length', !value)}\n                      name={name}\n                      checked={value}\n                    />\n                    <CheckboxLabel content=\"Neograničeno Trajanje\" variant=\"bodySmall\" />\n                  </CheckboxContainer>\n                );\n              }}\n            />\n          </FormColumn>\n          <FormColumn>\n            <ColumnTitle content=\"PODACI O BORAVIŠNOJ VIZI\" variant=\"bodySmall\" style={{fontWeight: 600}} />\n            <FormGroup>\n              <Input\n                {...register('residence_permit_number')}\n                label=\"BROJ PASOŠA:\"\n                error={errors.residence_permit_number?.message as string}\n                placeholder=\"Unesite broj pasoša\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Controller\n                name=\"residence_permit_date_of_end\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    onChange={onChange}\n                    label=\"VAŽI DO:\"\n                    name={name}\n                    value={value ? parseDate(value) : ''}\n                    error={errors.residence_permit_date_of_end?.message as string}\n                  />\n                )}\n              />\n            </FormGroup>\n          </FormColumn>\n          <FormColumn>\n            <ColumnTitle content=\"REZIDENTSTVO\" variant=\"bodySmall\" style={{fontWeight: 600}} />\n            <FormGroup>\n              <Controller\n                name=\"country_of_origin\"\n                control={control}\n                rules={{required: 'Ovo polje je obavezno'}}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    onChange={onChange}\n                    value={value as any}\n                    label=\"DRŽAVA:\"\n                    name={name}\n                    options={countryOptions}\n                    error={errors.residence_permit_date_of_end?.message as string}\n                    placeholder=\"Izaberite državu\"\n                  />\n                )}\n              />\n            </FormGroup>\n          </FormColumn>\n        </Form>\n      }\n    />\n  );\n};\n\nexport default PermitEntryModal;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/components/permitEntryModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/constants.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EditIconTwo' is defined but never used.","line":1,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Theme' is defined but never used.","line":1,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrashIconTwo' is defined but never used.","line":1,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {EditIconTwo, Theme, TrashIconTwo} from '@oykos-development/devkit-react-ts-styled-components';\nimport {DropdownDataNumber, DropdownDataString} from './types/dropdownData';\n\nexport const cityData: DropdownDataString[] = [\n  {id: 'PJ Andrijevica', title: 'PJ Andrijevica'},\n  {id: 'PJ Bar', title: 'PJ Bar'},\n  {id: 'PJ Berane', title: 'PJ Berane'},\n  {id: 'PJ Bijelo Polje', title: 'PJ Bijelo Polje'},\n  {id: 'PJ Budva', title: 'PJ Budva'},\n  {id: 'PJ Cetinje', title: 'PJ Cetinje'},\n  {id: 'PJ Danilovgrad', title: 'PJ Danilovgrad'},\n  {id: 'PJ Gusinje', title: 'PJ Gusinje'},\n  {id: 'PJ Herceg Novi', title: 'PJ Herceg Novi'},\n  {id: 'PJ Kolašin', title: 'PJ Kolašin'},\n  {id: 'PJ Kotor', title: 'PJ Kotor'},\n  {id: 'PJ Mojkovac', title: 'PJ Mojkovac'},\n  {id: 'PJ Nikšić', title: 'PJ Nikšić'},\n  {id: 'PJ Petnjica', title: 'PJ Petnjica'},\n  {id: 'PJ Plav', title: 'PJ Plav'},\n  {id: 'PJ Plužine', title: 'PJ Plužine'},\n  {id: 'PJ Pljevlja', title: 'PJ Pljevlja'},\n  {id: 'PJ Podgorica', title: 'PJ Podgorica'},\n  {id: 'PJ Rožaje', title: 'PJ Rožaje'},\n  {id: 'PJ Šavnik', title: 'PJ Šavnik'},\n  {id: 'PJ Tivat', title: 'PJ Tivat'},\n  {id: 'PJ Tuzi', title: 'PJ Tuzi'},\n  {id: 'PJ Ulcinj', title: 'PJ Ulcinj'},\n  {id: 'PJ Zeta', title: 'PJ Zeta'},\n  {id: 'PJ Žabljak', title: 'PJ Žabljak'},\n];\n\nexport const countriesData: DropdownDataString[] = [\n  {id: 'Crna Gora', title: 'Crna Gora'},\n  {id: 'Srbija', title: 'Srbija'},\n  {id: 'Hrvatska', title: 'Hrvatska'},\n];\n\nexport const maleMaritalStatusOptions: DropdownDataString[] = [\n  {id: 'ozenjen', title: 'Oženjen'},\n  {id: 'neozenjen', title: 'Neoženjen'},\n];\n\nexport const femaleMaritalStatusOptions: DropdownDataString[] = [\n  {id: 'udata', title: 'Udata'},\n  {id: 'neudata', title: 'Neudata'},\n];\n\nexport const genderOptions: DropdownDataString[] = [\n  {id: 'muski', title: 'Muški'},\n  {id: 'zenski', title: 'Ženski'},\n];\n\nexport const nationalMinorities: DropdownDataString[] = [\n  {id: 'albanska', title: 'Albanska'},\n  {id: 'bosnjačka', title: 'Bošnjačka'},\n  {id: 'hrvatska', title: 'Hrvatska'},\n  {id: 'romska', title: 'Romska'},\n  {id: 'srpska', title: 'Srpska'},\n];\n\nexport const yesAndNoOptions = [\n  {id: null, title: 'Svi'},\n  {id: true, title: 'Da'},\n  {id: false, title: 'Ne'},\n];\n\nexport const yesOrNoOptionsBoolean = [\n  {id: true, title: 'Da'},\n  {id: false, title: 'Ne'},\n];\n\nexport const yesOrNoOptionsNumber = [\n  {id: 1, title: 'Da'},\n  {id: 2, title: 'Ne'},\n];\n\nexport const yesOrNoOptionsString = [\n  {id: 'Da', title: 'Da'},\n  {id: 'Da', title: 'Ne'},\n];\n\n//TODO: remove this later\nexport const departmentOptions = [{id: 'Odjeljenje za lkt', title: 'Odjeljenje za lkt'}];\n\nexport const EMAIL_REGEX = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\n\nexport const contractTypes: DropdownDataNumber[] = [\n  {id: 1, title: 'Ugovor o radu na neodređeno vrijeme'},\n  {id: 2, title: 'Ugovor o radu na određeno vrijeme'},\n  {id: 3, title: 'Ugovor o privremeno povremenim poslovima'},\n  {id: 4, title: 'Ugovor o radu sa nepunim radnim vremenom'},\n  {id: 5, title: 'Ugovor o djelu'},\n  {id: 6, title: 'Ugovor o radu sa strancem'},\n  {\n    id: 7,\n    title: 'Ugovor o radu za obavljanje poslova van prostorija poslodavca',\n  },\n  {id: 8, title: 'Radni odnos u svojstvu pripravnika'},\n  {\n    id: 9,\n    title: 'Ugovor o radu za obavljanje poslova van prostorija poslodavca',\n  },\n];\n\nexport const quarterOptions = [\n  {id: '1/4', title: '1/4'},\n  {id: '2/4', title: '2/4'},\n  {id: '3/4', title: '3/4'},\n  {id: '4/4', title: '4/4'},\n];\n\nexport const revisionPriorityOptions: DropdownDataString[] = [\n  {id: 'low', title: 'Nizak'},\n  {id: 'normal', title: 'Srednji'},\n  {id: 'high', title: 'Visok'},\n];\n\nexport const revisionDeadlineOptions: DropdownDataString[] = [\n  {id: '1', title: '1 mjesec'},\n  {id: '2', title: '2 mjeseca'},\n  {id: '3', title: '3 mjeseca'},\n  {id: '4', title: '4 mjeseca'},\n  {id: '5', title: '5 mjeseci'},\n  {id: '6', title: '6 mjeseci'},\n  {id: '7', title: '7 mjeseci'},\n  {id: '8', title: '8 mjeseci'},\n  {id: '9', title: '9 mjeseci'},\n  {id: '10', title: '10 mjeseci'},\n  {id: '11', title: '11 mjeseci'},\n  {id: '12', title: '12 mjeseci'},\n];\n\nexport const revisionStatusOptions: DropdownDataString[] = [\n  {id: 'implemented', title: 'Sprovedena'},\n  {id: 'failed', title: 'Neuspješna'},\n  {id: 'waiting', title: 'Na čekanju'},\n];\n\nexport const revisionTypeOptions: DropdownDataNumber[] = [\n  {id: 1, title: 'Redovna'},\n  {id: 2, title: 'Ad Hoc'},\n  {id: 3, title: 'Sporazum'},\n];\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/index.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":14,"column":3,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":14,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":20,"column":5,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":20,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":24,"column":3,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":24,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":27,"column":5,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":27,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/router.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/404.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/absents/absents.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1336,1339],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1336,1339],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1567,1570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1567,1570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1751,1754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1751,1754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3016,3019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3016,3019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4211,4214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4211,4214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":229,"column":15,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":229,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":242,"column":15,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":242,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useEffect, useMemo, useState} from 'react';\nimport {TableHead, Dropdown, Typography, Table, EditIconTwo, TrashIcon, Theme, Button} from 'client-library';\nimport {\n  Container,\n  Subtitle,\n  SuperTitle,\n  Title,\n  TableHeader,\n  VacationContainer,\n  VacationWrapper,\n  YearContainer,\n  YearWrapper,\n  TableTitle,\n} from './styles';\nimport {UserProfileAbsents, UserProfileAbsentsParams} from '../../../types/graphql/profileAbsentsTypes';\nimport {Divider, ValueType} from '@oykos-development/devkit-react-ts-styled-components';\nimport {AbsentModal} from '../../../components/absentsModal/absentsModal';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {MicroserviceProps} from '../../../types/micro-service-props';\nimport {\n  dropdownAbsentsOptions,\n  dropdownVacationOptions,\n  vacationTypeList,\n} from '../../../components/absentsModal/constants';\nimport {parseDate} from '../../../utils/dateUtils';\nimport {DropdownDataString} from '../../../types/dropdownData';\nimport useAbsentOverview from '../../../services/graphql/userProfile/absents/useAbsentOverview';\nimport useAbsentDelete from '../../../services/graphql/userProfile/absents/useAbsentDelete';\n\nconst tableHeads: TableHead[] = [\n  {\n    title: 'Godina',\n    accessor: 'date_of_start',\n    type: 'custom',\n    renderContents: (_, item: any) => {\n      return <Typography variant=\"bodyMedium\" content={parseDate(item.date_of_start, true)} />;\n    },\n  },\n  {\n    title: 'Vrsta prilagodbe',\n    accessor: 'vacation_type',\n    type: 'custom',\n    renderContents: (item: any) => {\n      return <Typography variant=\"bodyMedium\" content={item.title} />;\n    },\n  },\n  {\n    title: 'Dana',\n    accessor: '',\n    type: 'custom',\n    renderContents: (_, item: any) => {\n      const startDate = new Date(item.date_of_start);\n      const endDate = new Date(item.date_of_end);\n      const timeDiff = endDate.getTime() - startDate.getTime();\n      const numberOfDays = Math.floor(timeDiff / (1000 * 3600 * 24));\n\n      return <Typography variant=\"bodyMedium\" content={numberOfDays} />;\n    },\n  },\n  {title: 'Datoteka', accessor: 'file_id', type: 'text'},\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n\nconst currentYear = new Date().getFullYear();\n\nconst YearList: DropdownDataString[] = Array.from({length: 10}, (_, index) => {\n  const year = currentYear - index;\n  return {id: year.toString(), title: year.toString()};\n});\n\nconst Absents: React.FC<{context: MicroserviceProps}> = ({context}) => {\n  const userProfileID = context.navigation.location.pathname.split('/')[3];\n  const {absentsData, refetchData, summary} = useAbsentOverview(userProfileID);\n  const tableData = absentsData || [];\n  const [firstTableData, setFirstTableData] = useState<UserProfileAbsents[]>([]);\n  const [secondTableData, setSecondTableData] = useState<UserProfileAbsents[]>([]);\n  const [showModal, setShowModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n  const [form, setForm] = useState<any>();\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const {mutate} = useAbsentDelete();\n\n  const selectedItem = useMemo(() => {\n    if (selectedItemId) {\n      return tableData.find((item: UserProfileAbsents) => item.id === selectedItemId);\n    }\n    return null;\n  }, [selectedItemId]);\n\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const handleDelete = async () => {\n    mutate(\n      selectedItemId,\n      selectedItem?.vacation_type.id || 0,\n      () => {\n        refetchData();\n        context.alert.success('Uspješno obrisano');\n        setShowDeleteModal(false);\n        setSelectedItemId(0);\n      },\n      () => {\n        context.alert.error('Brisanje nije uspješno');\n      },\n    );\n  };\n\n  const handleCloseModal = (refetch: boolean) => {\n    setShowModal(false);\n    setSelectedItemId(0);\n    refetch && refetchData();\n  };\n\n  const handleEdit = (item: UserProfileAbsentsParams) => {\n    setSelectedItemId(item.id);\n    setShowModal(true);\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedItemId(id);\n  };\n\n  const handleChange = (value: ValueType, name: string) => {\n    setForm((prevState: any) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const filterFirstTableData = () => {\n    if (absentsData) {\n      const filteredData = absentsData.filter(item =>\n        dropdownAbsentsOptions.some(option => option.id === item.vacation_type?.id),\n      );\n      setFirstTableData(filteredData);\n      return filteredData;\n    } else {\n      setFirstTableData([]);\n      return [];\n    }\n  };\n\n  const filterSecondTableData = () => {\n    if (absentsData) {\n      const filteredData = absentsData.filter(item =>\n        dropdownVacationOptions.some(option => option.id === item.vacation_type?.id),\n      );\n      setSecondTableData(filteredData);\n      return filteredData;\n    } else {\n      setSecondTableData([]);\n      return [];\n    }\n  };\n\n  const filteredFirstTableData = useMemo(() => {\n    if (form?.year?.id && form?.vacation_type?.id) {\n      return firstTableData.filter((item: UserProfileAbsents) => {\n        return item.date_of_start.includes(form.year.id) && item.vacation_type.id === form.vacation_type.id;\n      });\n    } else if (form?.year?.id) {\n      return firstTableData.filter((item: UserProfileAbsents) => item.date_of_start.includes(form.year.id));\n    } else if (form?.vacation_type?.id) {\n      return firstTableData.filter((item: UserProfileAbsents) => item.vacation_type.id === form.vacation_type.id);\n    }\n    return firstTableData;\n  }, [firstTableData, form?.year?.id, form?.vacation_type?.id]);\n\n  const filteredSecondTableData = useMemo(() => {\n    if (form?.year?.id && form?.vacation_type?.id) {\n      return secondTableData.filter((item: UserProfileAbsents) => {\n        return item.date_of_start.includes(form.year.id) && item.vacation_type.id === form.vacation_type.id;\n      });\n    } else if (form?.year?.id) {\n      return secondTableData.filter((item: UserProfileAbsents) => item.date_of_start.includes(form.year.id));\n    } else if (form?.vacation_type?.id) {\n      return secondTableData.filter((item: UserProfileAbsents) => item.vacation_type.id === form.vacation_type.id);\n    }\n    return secondTableData;\n  }, [firstTableData, form?.year?.id, form?.vacation_type?.id]);\n\n  useEffect(() => {\n    filterFirstTableData();\n    filterSecondTableData();\n  }, [absentsData]);\n\n  return (\n    <Container>\n      <VacationWrapper>\n        <VacationContainer>\n          <SuperTitle variant=\"bodySmall\" content={`${summary?.current_available_days}` || null}></SuperTitle>\n          <Title variant=\"bodySmall\" content=\"DOSTUPNIH DANA\" />\n          <Subtitle variant=\"bodySmall\" content=\"TRENUTNA GODINA\" />\n        </VacationContainer>\n        <VacationContainer>\n          <SuperTitle variant=\"bodySmall\" content={`${summary?.past_available_days}` || null}></SuperTitle>\n          <Title variant=\"bodySmall\" content=\"DOSTUPNIH DANA\" />\n          <Subtitle variant=\"bodySmall\" content=\"PRETHODNOG POSLODAVCA\" />\n        </VacationContainer>\n        <VacationContainer>\n          <SuperTitle variant=\"bodySmall\" content={`${summary?.used_days}` || ''}></SuperTitle>\n          <Title variant=\"bodySmall\" content=\"UZETI DANI\" />\n          <Subtitle variant=\"bodySmall\" content=\"\" />\n        </VacationContainer>\n        <VacationContainer>\n          <SuperTitle\n            variant=\"bodySmall\"\n            content={`${\n              summary ? summary?.current_available_days + summary?.past_available_days - summary?.used_days : ''\n            }`}></SuperTitle>\n          <Title variant=\"bodySmall\" content=\"UKUPNO RASPOLOŽIVIH DANA\" />\n          <Subtitle variant=\"bodySmall\" content=\"TEKUĆA + PRETHODNE\" />\n        </VacationContainer>\n      </VacationWrapper>\n      <TableHeader>\n        <YearWrapper>\n          <YearContainer>\n            <Dropdown\n              label={<Typography variant=\"bodySmall\" content=\"GODINA:\" />}\n              options={YearList}\n              name=\"year\"\n              value={form?.year || null}\n              placeholder=\"Odaberite godinu:\"\n              // @TODO remove ts-ignore\n              //eslint-disable-next-line @typescript-eslint/ban-ts-comment\n              //@ts-ignore\n              onChange={handleChange}\n            />\n          </YearContainer>\n          <YearContainer>\n            <Dropdown\n              label={<Typography variant=\"bodySmall\" content=\"TIP ZAHTJEVA:\" />}\n              options={vacationTypeList}\n              name=\"vacation_type\"\n              value={form?.vacation_type || null}\n              placeholder=\"Odaberite tip zahtjeva:\"\n              // @TODO remove ts-ignore\n              //eslint-disable-next-line @typescript-eslint/ban-ts-comment\n              //@ts-ignore\n              onChange={handleChange}\n            />\n          </YearContainer>\n        </YearWrapper>\n\n        <div>\n          <Button\n            variant=\"secondary\"\n            content={<Typography variant=\"bodyMedium\" content=\"Zahtjevi\" />}\n            onClick={handleAdd}\n          />\n        </div>\n      </TableHeader>\n      <div>\n        <div>\n          <TableTitle content=\"ODSUTNOST\" variant=\"bodyMedium\" />\n          <Divider height=\"1px\" />\n        </div>\n        <Table\n          tableHeads={tableHeads}\n          data={filteredFirstTableData || []}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n      </div>\n\n      <div>\n        <div>\n          <TableTitle content=\"GODIŠNJI ODMORI\" variant=\"bodyMedium\" />\n          <Divider height=\"1px\" style={{marginBottom: '30px'}} />\n        </div>\n        <Table\n          tableHeads={tableHeads}\n          data={filteredSecondTableData || []}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n      </div>\n\n      <AbsentModal\n        open={showModal}\n        onClose={refetch => handleCloseModal(refetch)}\n        selectedItem={selectedItem}\n        userProfileId={userProfileID}\n        key={selectedItem ? selectedItem.id : ''}\n        alert={context.alert}\n      />\n\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </Container>\n  );\n};\n\nexport default Absents;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/absents/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/absents/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[54,57],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[54,57],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[97,100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[97,100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[145,148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[145,148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface AbsentsModalProps {\n  selectedItem?: any;\n  open: boolean;\n  onClose: (action?: any) => void;\n  userProfileId: number;\n  alert: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/basicInfo/basicInfo.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'contractTypes' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'departmentOptions' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'nationalMinorities' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserProfileBasicInfo' is defined but never used.","line":26,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'jobPositions' is assigned a value but never used.","line":43,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'organizationUnitsList' is assigned a value but never used.","line":44,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3156,3159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3156,3159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3385,3388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3385,3388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":118,"column":27,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":118,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4495,4498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4495,4498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5690,5693],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5690,5693],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6947,6950],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6947,6950],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":241,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8277,8280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8277,8280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":259,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8931,8934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8931,8934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":334,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":334,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11444,11447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11444,11447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":351,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":351,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12046,12049],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12046,12049],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":352,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":352,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12104,12107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12104,12107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":368,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12666,12669],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12666,12669],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":369,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12724,12727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12724,12727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useEffect, useMemo, useState} from 'react';\nimport {\n  FormContainer,\n  FormColumn,\n  FormFooter,\n  FormWrapper,\n  FormRow,\n  FormItem,\n  FormFileUpload,\n  Controls,\n  TextWrapper,\n} from './styles';\nimport {Typography, Input, Button, Dropdown, Datepicker} from 'client-library';\nimport {BasicInfoPageProps} from './types';\nimport {\n  cityData,\n  contractTypes,\n  departmentOptions,\n  femaleMaritalStatusOptions,\n  genderOptions,\n  maleMaritalStatusOptions,\n  nationalMinorities,\n  yesOrNoOptionsString,\n} from '../../../constants';\nimport {Controller, useForm} from 'react-hook-form';\nimport {UserProfileBasicInfo, UserProfileBasicInfoFormValues} from '../../../types/graphql/userProfiles';\nimport {parseDate} from '../../../utils/dateUtils';\nimport useOrganizationUnits from '../../../services/graphql/organizationUnits/useOrganizationUnits';\nimport {initialValues} from './constants';\nimport useJobPositions from '../../../services/graphql/jobPositions/useJobPositionOverview';\nimport {formatData} from './utils';\nimport useBasicInfoGet from '../../../services/graphql/userProfile/basicInfo/useBasicInfoGet';\nimport useBasicInfoInsert from '../../../services/graphql/userProfile/basicInfo/useBasicInfoInsert';\n\n//TODO For the department field (odjeljenje), create an option for fetching all the departments of a certain organization unit (by its ID) in the BFF\n//TODO Fix checkbox to work in the react hook form without the reset function\n//TODO Fix all as any down below (and in rest of the forms)\n//TODO Make name prop on the dropdown and datepicker to be optional\n\nexport const BasicInfo: React.FC<BasicInfoPageProps> = ({context}) => {\n  const [isDisabled, setIsDisabled] = useState<boolean>(true);\n  const {data: profileData, refetch} = useBasicInfoGet(Number(context.navigation.location.pathname.split('/')[3]));\n  const {data: jobPositions} = useJobPositions('');\n  const {organizationUnitsList} = useOrganizationUnits();\n  const {mutate} = useBasicInfoInsert();\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors, isValid},\n    reset,\n    control,\n    watch,\n    setValue,\n  } = useForm({\n    defaultValues: initialValues,\n  });\n\n  const onFileUpload = (acceptedFiles: FileList) => {\n    console.log('File(s) uploaded:', acceptedFiles);\n  };\n\n  const handleSave = (values: UserProfileBasicInfoFormValues, close: boolean) => {\n    if (isValid) {\n      mutate(\n        formatData(values),\n        () => {\n          refetch();\n          context.alert.success('Čuvanje podataka uspješno');\n          setIsDisabled(true);\n\n          if (close) {\n            const overviewPathname = context.navigation.location.pathname.split('/').slice(0, 3).join('/');\n            context.navigation.navigate(overviewPathname);\n          }\n        },\n        () => {\n          context.alert.error('Greška prilikom čuvanja podataka');\n        },\n      );\n    }\n  };\n\n  // const jobPositionOptions = useMemo(() => {\n  //   return jobPositions.items.map((jobPosition: any) => ({id: jobPosition.id, title: jobPosition.title}));\n  // }, [jobPositions]);\n\n  const countryOptions = useMemo(() => {\n    return context.countries?.map((country: any) => {\n      return {\n        id: country.alpha_3_code,\n        title: country.en_short_name,\n      };\n    });\n  }, [context.countries]);\n\n  const citizenshipArray = useMemo(() => {\n    return context.countries?.map((country: any) => {\n      return {\n        id: country.alpha_3_code,\n        title: country.nationality,\n      };\n    });\n  }, [context.countries]);\n\n  useEffect(() => {\n    refetch();\n\n    // If new employee, enable the form immediately\n    if (context.navigation.location.pathname.split('/')[3] === 'new-employee') {\n      setIsDisabled(false);\n    }\n  }, [context.navigation.location]);\n\n  useEffect(() => {\n    if (profileData) {\n      Object.entries(profileData).forEach(([key, value]) => {\n        if (initialValues.hasOwnProperty(key)) {\n          setValue(key as keyof typeof initialValues, value);\n        }\n      });\n    }\n  }, [profileData]);\n\n  // When coming from the job tender applications, when changing an external candidates status to accepted, it leads here to create it in the system, basically becoming an internal candidate in order to be accepted\n  useEffect(() => {\n    if (!context.navigation.location.state) return;\n    reset({\n      ...initialValues,\n      ...context.navigation.location.state.user,\n    });\n  }, [context.navigation.location.state]);\n\n  const gender = watch('gender')['id' as any];\n  const maritalOptions = gender === 'muski' ? maleMaritalStatusOptions : femaleMaritalStatusOptions;\n\n  return (\n    <FormContainer>\n      <FormWrapper>\n        <TextWrapper>\n          <Typography content=\"PERSONALNI PODACI\" variant=\"bodyMedium\" />\n        </TextWrapper>\n\n        <FormRow>\n          <FormColumn>\n            <FormItem>\n              <Input\n                {...register('first_name', {required: 'Ovo polje je obavezno'})}\n                label=\"IME:\"\n                disabled={isDisabled}\n                error={errors.first_name?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('last_name', {required: 'Ovo polje je obavezno'})}\n                label=\"PREZIME\"\n                disabled={isDisabled}\n                error={errors.last_name?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"gender\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"POL:\"\n                    value={value as any}\n                    options={genderOptions}\n                    isDisabled={isDisabled}\n                    onChange={onChange}\n                    error={errors.gender?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('official_personal_id', {required: 'Ovo polje je obavezno'})}\n                label=\"JMBG:\"\n                disabled={isDisabled}\n                error={errors.official_personal_id?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('official_personal_document_number', {required: 'Ovo polje je obavezno'})}\n                label=\"BROJ LIČNE KARTE:\"\n                disabled={isDisabled}\n                error={errors.official_personal_document_number?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"official_personal_document_issuer\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"PJ LIČNE KARTE:\"\n                    value={value as any}\n                    options={cityData}\n                    isDisabled={isDisabled}\n                    onChange={onChange}\n                    error={errors.official_personal_document_issuer?.message}\n                  />\n                )}\n              />\n            </FormItem>\n          </FormColumn>\n\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"date_of_birth\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    name={name}\n                    value={value ? parseDate(value) : ''}\n                    onChange={onChange}\n                    label=\"DATUM ROĐENJA:\"\n                    disabled={isDisabled}\n                    error={errors.date_of_birth?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"country_of_birth\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"DRŽAVA ROĐENJA:\"\n                    onChange={onChange}\n                    value={value as any}\n                    isDisabled={isDisabled}\n                    options={countryOptions}\n                    error={errors.date_of_birth?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"citizenship\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"DRŽAVLJANSTVO:\"\n                    value={value as any}\n                    options={citizenshipArray}\n                    isDisabled={isDisabled}\n                    error={errors.nationality?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Input {...register('city_of_birth')} label=\"OPŠTINA ROĐENJA:\" disabled={isDisabled} />\n            </FormItem>\n            {/* <FormItem>\n              <Controller\n                name=\"national_minority\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"PRIPADNOST NACIONALNOJ MANJINI:\"\n                    onChange={onChange}\n                    noOptionsText=\"Prazno\"\n                    value={value as any}\n                    options={nationalMinorities}\n                    isDisabled={isDisabled}\n                    error={errors.national_minority?.message}\n                  />\n                )}\n              />\n            </FormItem> */}\n            <FormItem>\n              <Input\n                {...register('address')}\n                label=\"ADRESA STANOVANJA:\"\n                disabled={isDisabled}\n                error={errors.address?.message}\n              />\n            </FormItem>\n          </FormColumn>\n\n          <FormColumn>\n            <FormItem>\n              <Input\n                {...register('father_name')}\n                label=\"IME OCA:\"\n                disabled={isDisabled}\n                error={errors.father_name?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('mother_name')}\n                label=\"IME MAJKE:\"\n                disabled={isDisabled}\n                error={errors.mother_name?.message}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('birth_last_name')}\n                label=\"PREZIME PO ROĐENJU:\"\n                disabled={isDisabled}\n                error={errors.birth_last_name?.message}\n              />\n            </FormItem>\n          </FormColumn>\n\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"marital_status\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"BRAČNO STANJE:\"\n                    value={value as any}\n                    onChange={onChange}\n                    options={maritalOptions}\n                    isDisabled={isDisabled}\n                    error={errors.marital_status?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"single_parent\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"SAMOHRANI RODITELJ:\"\n                    value={value as any}\n                    options={yesOrNoOptionsString as any}\n                    isDisabled={isDisabled}\n                    error={errors.single_parent?.message}\n                    onChange={onChange}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"housing_done\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"RIJEŠENO STAMBENO PITANJE:\"\n                    value={value as any}\n                    options={yesOrNoOptionsString as any}\n                    isDisabled={isDisabled}\n                    onChange={onChange}\n                    error={errors.housing_done?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('housing_description')}\n                label=\"OPIS STAMBENOG PITANJA:\"\n                disabled={isDisabled}\n                error={errors.housing_description?.message}\n              />\n            </FormItem>\n          </FormColumn>\n        </FormRow>\n      </FormWrapper>\n\n      <FormWrapper>\n        <TextWrapper>\n          <Typography content=\"PODACI O ZAPOSLENJU\" variant=\"bodyMedium\" />\n        </TextWrapper>\n\n        <FormRow>\n          <FormColumn>\n            {/* <FormItem>\n              <Controller\n                name=\"organization_unit_id\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"ORGANIZACIONA JEDINICA:\"\n                    isDisabled={isDisabled}\n                    value={value as any}\n                    options={organizationUnitsList as any}\n                    error={errors.organization_unit_id?.message}\n                  />\n                )}\n              />\n            </FormItem> */}\n            {/* <FormItem>\n              <Controller\n                name=\"organization_unit_department_id\"\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"ODJELJENJE:\"\n                    value={value as any}\n                    onChange={onChange}\n                    noOptionsText=\"Prazno\"\n                    options={departmentOptions as any}\n                    isDisabled={isDisabled}\n                    error={errors.organization_unit_id?.message}\n                  />\n                )}\n              />\n            </FormItem> */}\n            {/* <FormItem>\n              <Controller\n                name=\"job_position_id\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"RADNO MJESTO:\"\n                    value={value as any}\n                    noOptionsText=\"Prazno\"\n                    options={jobPositionOptions}\n                    isDisabled={isDisabled}\n                    error={errors.job_position_id?.message}\n                  />\n                )}\n              />\n            </FormItem> */}\n          </FormColumn>\n\n          <FormColumn>\n            {/* <FormItem>\n              <Controller\n                name=\"contract_type_id\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    label=\"VRSTA UGOVORA:\"\n                    onChange={onChange}\n                    value={value as any}\n                    noOptionsText=\"Prazno\"\n                    options={contractTypes}\n                    isDisabled={isDisabled}\n                    error={errors.contract_type_id?.message}\n                  />\n                )}\n              />\n            </FormItem> */}\n            <FormItem>\n              <Controller\n                name=\"date_of_becoming_judge\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    name={name}\n                    value={value ? parseDate(value) : ''}\n                    onChange={onChange}\n                    label=\"DATUM IZBORA:\"\n                    disabled={isDisabled}\n                    error={errors.date_of_becoming_judge?.message}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <FormFileUpload\n                onUpload={onFileUpload}\n                variant=\"secondary\"\n                buttonVariant=\"primary\"\n                buttonText=\"UČITAJ\"\n                buttonSize={'sm'}\n                icon={<></>}\n                note={<Typography variant=\"bodySmall\" content=\"Ugovor o radu\" />}\n                disabled={isDisabled}\n              />\n            </FormItem>\n          </FormColumn>\n\n          <FormColumn>\n            {/* <FormItem>\n              <Controller\n                name=\"date_of_start\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    name={name}\n                    label=\"POČETAK RADNOG ODNOSA:\"\n                    value={value ? parseDate(value) : ''}\n                    onChange={onChange}\n                    disabled={isDisabled}\n                    error={errors.date_of_start?.message}\n                  />\n                )}\n              />\n            </FormItem> */}\n\n            {/* <FormItem>\n              <Controller\n                name=\"date_of_end\"\n                rules={{\n                  validate: value =>\n                    !value || !watch('date_of_start') || new Date(value) >= new Date(watch('date_of_start'))\n                      ? true\n                      : 'Kraj radnog odnosa ne može biti prije početka radnog odnosa.',\n                }}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Datepicker\n                    name={name}\n                    label=\"KRAJ RADNOG ODNOSA:\"\n                    value={value ? parseDate(value) : ''}\n                    onChange={onChange}\n                    disabled={isDisabled}\n                    error={errors.date_of_end?.message}\n                  />\n                )}\n              />\n            </FormItem> */}\n            <FormItem>\n              <Button\n                size=\"lg\"\n                content={<Typography variant=\"bodyMedium\" content=\"Prekid radnog odnosa:\" />}\n                disabled={isDisabled}\n              />\n            </FormItem>\n          </FormColumn>\n        </FormRow>\n      </FormWrapper>\n\n      <FormWrapper>\n        <TextWrapper>\n          <Typography content=\"KORISNIČKI NALOG\" variant=\"bodyMedium\" />\n        </TextWrapper>\n\n        <FormRow style={{paddingBottom: 0}}>\n          <FormColumn style={{flexBasis: 'calc(50% + 23px)'}}>\n            <FormItem>\n              {/* TODO value prop needs to be number also */}\n              <Input {...register('id')} label=\"SISTEMSKI ID:\" disabled={true} />\n            </FormItem>\n          </FormColumn>\n        </FormRow>\n\n        <FormRow style={{padding: 0}}>\n          <FormColumn>\n            <FormItem>\n              <Input {...register('email')} label=\"E-MAIL:\" disabled={isDisabled} />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('password', {required: 'Ovo polje je obavezno'})}\n                label=\"LOZINKA:\"\n                type=\"password\"\n                placeholder=\"******\"\n                disabled={isDisabled}\n              />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('phone', {required: 'Ovo polje je obavezno'})}\n                label=\"BROJ TELEFONA:\"\n                disabled={isDisabled}\n              />\n            </FormItem>\n          </FormColumn>\n\n          <FormColumn>\n            <FormItem>\n              <Input {...register('secondary_email')} label=\"PRIVATNI E-MAIL:\" disabled={isDisabled} />\n            </FormItem>\n            <FormItem>\n              <Input\n                {...register('pin', {required: 'Ovo polje je obavezno'})}\n                type=\"number\"\n                maxLength={4}\n                label=\"PIN:\"\n                disabled={isDisabled}\n              />\n            </FormItem>\n          </FormColumn>\n        </FormRow>\n      </FormWrapper>\n\n      <FormFooter>\n        <Controls>\n          {isDisabled ? (\n            <Button content=\"Uredi\" variant=\"secondary\" onClick={() => setIsDisabled(false)} />\n          ) : (\n            <>\n              <Button\n                content=\"Sačuvaj i zatvori\"\n                variant=\"secondary\"\n                onClick={() => handleSubmit((data: UserProfileBasicInfoFormValues) => handleSave(data, true))()}\n              />\n              <Button\n                content=\"Sačuvaj i nastavi\"\n                variant=\"primary\"\n                onClick={() => handleSubmit((data: UserProfileBasicInfoFormValues) => handleSave(data, false))()}\n              />\n            </>\n          )}\n        </Controls>\n      </FormFooter>\n    </FormContainer>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/basicInfo/constants.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserProfileBasicInfo' is defined but never used.","line":1,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {UserProfileBasicInfo, UserProfileBasicInfoFormValues} from '../../../types/graphql/userProfiles';\n\nexport const initialValues: UserProfileBasicInfoFormValues = {\n  id: 0,\n  first_name: '',\n  last_name: '',\n  date_of_birth: '',\n  birth_last_name: '',\n  country_of_birth: '',\n  city_of_birth: '',\n  nationality: '',\n  citizenship: '',\n  address: '',\n  father_name: '',\n  mother_name: '',\n  mother_birth_last_name: '',\n  bank_account: '',\n  bank_name: '',\n  official_personal_id: '',\n  official_personal_document_number: '',\n  official_personal_document_issuer: '',\n  gender: '',\n  single_parent: false,\n  housing_done: false,\n  revisor_role: false,\n  housing_description: '',\n  marital_status: '',\n  date_of_taking_oath: '',\n  date_of_becoming_judge: '',\n  email: '',\n  phone: '',\n  national_minority: '',\n  secondary_email: '',\n  pin: '',\n  password: '',\n  middle_name: '',\n  position_in_organization_unit_id: 0,\n  role_id: 0,\n  contracts: [],\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/basicInfo/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/basicInfo/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[118,121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[118,121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {MicroserviceProps} from '../../../types/micro-service-props';\n\nexport interface BasicInfoPageProps {\n  data?: any[];\n  context: MicroserviceProps;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/basicInfo/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[86,89],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[86,89],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {parseDate} from '../../../utils/dateUtils';\n\nexport const formatData = (data: any) => {\n  const payload = {\n    ...data,\n    id: data?.id || 0,\n    first_name: data?.first_name,\n    last_name: data?.last_name,\n    date_of_birth: parseDate(data?.date_of_birth, true),\n    birth_last_name: data?.birth_last_name,\n    country_of_birth: data?.country_of_birth?.id,\n    city_of_birth: data?.city_of_birth,\n    nationality: data?.citizenship?.id ? data?.citizenship?.title : 'Crnogorac',\n    citizenship: data?.citizenship?.id,\n    address: data?.address,\n    father_name: data?.father_name,\n    mother_name: data?.mother_name,\n    mother_birth_last_name: data?.mother_birth_last_name,\n    bank_account: data?.bank_account,\n    bank_name: data?.bank_name,\n    official_personal_id: data?.official_personal_id,\n    official_personal_document_number: data?.official_personal_document_number,\n    official_personal_document_issuer: data?.official_personal_document_issuer,\n    gender: data?.gender?.id,\n    single_parent: data?.single_parent === 'Da' ? true : false,\n    housing_done: data?.housing_done === 'Da' ? true : false,\n    revisor_role: data?.revisor_role === 'Da' ? true : false,\n    benefited_track: data?.benefited_track === 'Da' ? true : false,\n    housing_description: data?.housing_description,\n    marital_status: data?.marital_status?.id,\n    date_of_taking_oath: parseDate(new Date(), true),\n    date_of_start: parseDate(data?.date_of_start, true),\n    date_of_end: parseDate(data?.date_of_end, true),\n    date_of_becoming_judge: parseDate(data?.date_of_becoming_judge, true),\n    email: data?.email,\n    phone: data?.phone,\n    organization_unit_id: data?.organization_unit_id?.id || 0,\n    job_position_id: data?.job_position_id?.id || 0,\n    contract_type_id: data?.contract_type_id?.id || 0,\n    national_minority: data?.national_minority,\n    private_email: data?.private_email,\n    pin: data?.pin,\n    organization_unit_department_id: data?.organization_unit_department_id || 0,\n    password: data?.password,\n  };\n\n  delete payload.created_at;\n  delete payload.updated_at;\n\n  return payload;\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/confirmations/confirmations.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[973,976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[973,976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2110,2113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2110,2113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2559,2562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2559,2562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":118,"column":13,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":118,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Typography, Button, Table, TableHead, EditIconTwo, TrashIcon, Theme, Dropdown} from 'client-library';\nimport {Container, TableHeader, YearWrapper} from './styles';\nimport React, {ReactNode, useMemo, useState} from 'react';\nimport {ConfirmationsModal} from '../../../components/confirmationsModal/confirmationsModal';\nimport {UserProfileResolutionItem} from '../../../types/graphql/userProfileGetResolution';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {MicroserviceProps} from '../../../types/micro-service-props';\nimport useResolutionOverview from '../../../services/graphql/userProfile/resolution/useResolutionOverview';\nimport useResolutionDelete from '../../../services/graphql/userProfile/resolution/useResolutionDelete';\ninterface ValueType {\n  id: number | string;\n  title: ReactNode;\n}\n\nconst tableHeads: TableHead[] = [\n  {\n    title: 'Vrsta',\n    accessor: 'resolution_type',\n    type: 'custom',\n    renderContents: (item: any) => {\n      return <Typography variant=\"bodyMedium\" content={item.title} />;\n    },\n  },\n  {title: 'Datum izdavanja', accessor: 'date_of_start', type: 'text'},\n  {title: 'Svrha', accessor: 'resolution_purpose', type: 'text'},\n  {title: 'Datoteka', accessor: 'file_id', type: 'text'},\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n\nconst currentYear = new Date().getFullYear();\n\nconst YearList: ValueType[] = Array.from({length: 10}, (_, index) => {\n  const year = currentYear - index;\n  return {id: year.toString(), title: year.toString()};\n});\n\nexport const ConfirmationsPage: React.FC<{context: MicroserviceProps}> = ({context}) => {\n  const userProfileID = context.navigation.location.pathname.split('/')[3];\n  const {data, fetch} = useResolutionOverview(userProfileID);\n  const tableData = data;\n\n  const [showModal, setShowModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n\n  const selectedItem = useMemo(\n    () => tableData?.find((item: UserProfileResolutionItem) => item.id === selectedItemId),\n    [selectedItemId, tableData],\n  );\n\n  const [form, setForm] = useState<any>();\n\n  const filteredTableData = useMemo(() => {\n    if (form?.year?.id) {\n      return tableData?.filter((item: UserProfileResolutionItem) => item.date_of_start.includes(form.year.id));\n    }\n    return tableData;\n  }, [tableData, form?.year?.id]);\n\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const {mutate} = useResolutionDelete();\n\n  const handleChange = (value: ValueType, name: string) => {\n    setForm((prevState: any) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const handleEdit = (item: UserProfileResolutionItem) => {\n    setSelectedItemId(item.id);\n    setShowModal(true);\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedItemId(id);\n  };\n\n  const handleDelete = () => {\n    mutate(\n      selectedItemId,\n      () => {\n        fetch();\n        context.alert.success('Uspješno obrisano');\n        setShowDeleteModal(false);\n        setSelectedItemId(0);\n      },\n      () => {\n        context.alert.error('Brisanje nije uspješno');\n      },\n    );\n    setShowDeleteModal(false);\n    setSelectedItemId(0);\n  };\n\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = (refetch: boolean) => {\n    setShowModal(false);\n    setSelectedItemId(0);\n    refetch && fetch();\n  };\n\n  return (\n    <Container>\n      <TableHeader>\n        <YearWrapper>\n          <Dropdown\n            label={<Typography variant=\"bodySmall\" content=\"GODINA:\" />}\n            options={YearList}\n            name=\"year\"\n            value={form?.year || null}\n            // @TODO remove ts-ignore\n            //eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            //@ts-ignore\n            onChange={handleChange}\n            placeholder=\"Odaberite godinu:\"\n          />\n        </YearWrapper>\n        <div>\n          <Button\n            variant=\"secondary\"\n            content={<Typography variant=\"bodyMedium\" content=\"Dodajte svrhu\" />}\n            onClick={handleAdd}\n          />\n        </div>\n      </TableHeader>\n\n      <div>\n        <Table\n          tableHeads={tableHeads}\n          data={filteredTableData || []}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n      </div>\n\n      <ConfirmationsModal\n        open={showModal}\n        onClose={refetch => handleCloseModal(refetch)}\n        selectedItem={selectedItem}\n        userProfileId={userProfileID}\n        key={selectedItem ? selectedItem.id : 'new'}\n        alert={context.alert}\n      />\n\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </Container>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/confirmations/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/confirmations/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[60,63],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[60,63],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[103,106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[103,106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[151,154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[151,154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ConfirmationsModalProps {\n  selectedItem?: any;\n  open: boolean;\n  onClose: (action?: any) => void;\n  userProfileId: number;\n  alert: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/constants.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Typography' is defined but never used.","line":1,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {TableHead, Typography} from 'client-library';\n\nexport const tableHeads: TableHead[] = [\n  {title: 'ID', accessor: 'id'},\n  {title: 'Ime i Prezime', accessor: 'full_name', sortable: true},\n  {title: 'Datum rođenja', accessor: 'date_of_birth'},\n  {\n    title: 'Organizaciona jedinica',\n    accessor: 'organization_unit',\n    type: 'custom',\n    renderContents: row => row.organization_unit?.title,\n  },\n  {title: 'Radno mjesto', accessor: 'job_position', type: 'custom', renderContents: row => row.job_position?.title},\n  {title: 'Status', accessor: 'active', type: 'badge'},\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n\nexport const employeeTabs = [\n  {id: 1, title: 'Osnovni Podaci', routeName: 'basic-info', disabled: false},\n  {id: 2, title: 'Obrazovanje', routeName: 'education', disabled: false},\n  {id: 3, title: 'Radna Knjižica', routeName: 'experience', disabled: false},\n  {id: 4, title: 'Članovi Porodice', routeName: 'family-members', disabled: false},\n  {id: 5, title: 'Dozvole', routeName: 'foreigner-permits', disabled: false},\n  {id: 6, title: 'Parametri za Obračun Plata', routeName: 'salary-params', disabled: false},\n  {id: 7, title: 'Lična Ocjena', routeName: 'evaluations', disabled: false},\n  {id: 8, title: 'Rekapitulacija Zarada', routeName: 'rekapitulacija-zarada', disabled: false},\n  {id: 9, title: 'Disciplinske mjere', routeName: 'disciplinske-mjere', disabled: false},\n  {id: 10, title: 'Odsutnost', routeName: 'absents', disabled: false},\n  {id: 12, title: 'Potvrde i Rješenja', routeName: 'confirmations', disabled: false},\n];\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/education/education.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/education/styles.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Theme' is defined but never used.","line":2,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import styled from 'styled-components';\nimport {Theme, Table} from 'client-library';\n\nexport const EducationContainer = styled.div`\n  padding: 20px 30px 0px 30px;\n  display: grid;\n  overflow-y: auto;\n  height: calc(100vh - 320px);\n`;\n\nexport const TableContainer = styled(Table)`\n  padding-bottom: 22px;\n`;\n\nexport const AlertWrapper = styled.div`\n  position: fixed;\n  bottom: 75px;\n  right: 23px;\n  width: 40%;\n`;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/education/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[154,157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[154,157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[241,244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[241,244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[256,259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[256,259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[318,321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[318,321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[352,355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[352,355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[473,476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[473,476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[490,493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[490,493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {ReactElement} from 'react';\nimport {MicroserviceProps} from '../../../types/micro-service-props';\n\nexport interface EducationPageProps {\n  data?: any[];\n  context: MicroserviceProps;\n}\n\nexport interface ModalProps {\n  selectedItem?: any;\n  alert?: any;\n  open: boolean;\n  onClose: () => void;\n  dropdownData?: any[];\n  handleDelete?: (action?: any) => void;\n  customContent?: ReactElement;\n  refetchList?: () => void;\n}\n\nexport interface TableProps {\n  languages?: any[];\n  alert?: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/evaluations/evaluations.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/evaluations/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/evaluations/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[261,264],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[261,264],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[310,313],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[310,313],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[354,357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[354,357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[369,372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[369,372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {MicroserviceProps} from '../../../types/micro-service-props';\n\nexport interface EvaluationPageProps {\n  context: MicroserviceProps;\n}\n\nexport type YearType = {\n  id: number | string;\n  title: string;\n};\n\nexport interface EvaluationModalProps {\n  alert: any;\n  refetchList: () => void;\n  selectedItem?: any;\n  open: boolean;\n  onClose: (refetch?: any, message?: any) => void;\n  years: YearType[];\n  userProfileId?: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/evaluations/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33,36],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33,36],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const formatData = (data: any) => {\n  const payload = {\n    ...data,\n    id: data?.id || 0,\n    user_profile_id: data?.user_profile_id,\n    score: data?.score.id,\n    is_relevant: data?.is_relevant?.id === 'Da' ? true : false,\n    date_of_evaluation: data?.date_of_evaluation.id || data?.date_of_evaluation.title,\n    file_id: data?.file_id,\n  };\n\n  delete payload.created_at;\n  delete payload.updated_at;\n\n  return payload;\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/experience/constants.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[295,298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[295,298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":11,"column":32,"nodeType":"JSXOpeningFragment","messageId":"notInScope","endLine":11,"endColumn":34},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":11,"column":40,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":11,"endColumn":104},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[598,601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[598,601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":19,"column":44,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":19,"endColumn":105},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":19,"column":108,"nodeType":"JSXOpeningFragment","messageId":"notInScope","endLine":19,"endColumn":110},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[790,793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[790,793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":25,"column":44,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":25,"endColumn":105},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":25,"column":108,"nodeType":"JSXOpeningFragment","messageId":"notInScope","endLine":25,"endColumn":110}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Typography, TableHead} from 'client-library';\nimport {parseDate} from '../../../utils/dateUtils';\n\nexport const tableHeads: TableHead[] = [\n  {title: 'Br.', accessor: 'id', type: 'text'},\n  {\n    title: 'Sudstvo',\n    accessor: 'relevant',\n    type: 'custom',\n    renderContents: (item: any) => {\n      return item === 'hide' ? <></> : <Typography variant=\"bodyMedium\" content={item ? 'Da' : 'Ne'} />;\n    },\n  },\n  {title: 'Organizacija', accessor: 'organization_unit', type: 'text'},\n  {\n    title: 'Početak',\n    accessor: 'date_of_start',\n    type: 'custom',\n    renderContents: (item: any) => (item ? <Typography variant=\"bodyMedium\" content={parseDate(item)} /> : <></>),\n  },\n  {\n    title: 'Kraj',\n    accessor: 'date_of_end',\n    type: 'custom',\n    renderContents: (item: any) => (item ? <Typography variant=\"bodyMedium\" content={parseDate(item)} /> : <></>),\n  },\n  {title: 'Radni staž', accessor: 'amount_of_insured_experience', type: 'text'},\n  {title: 'Radno iskustvo', accessor: 'amount_of_experience', type: 'text'},\n  {title: 'Dosije', accessor: 'reference_file_id', type: 'text'},\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/experience/experience.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TableHead' is defined but never used.","line":2,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1258,1261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1258,1261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1965,1968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1965,1968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3624,3627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3624,3627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3875,3878],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3875,3878],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useMemo, useState} from 'react';\nimport {Typography, Button, Table, TableHead, EditIconTwo, TrashIcon, Theme} from 'client-library';\nimport {ExperiencePageProps, UnitType} from './types';\nimport {ExperienceModal} from '../../../components/experienceModal/experienceModal';\nimport {Container} from './styles';\nimport useOrganizationUnits from '../../../services/graphql/organizationUnits/useOrganizationUnits';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {UserProfileExperience} from '../../../types/graphql/userProfileGetExperienceTypes';\nimport useExperience from '../../../services/graphql/userProfile/experience/useExperienceOverview';\nimport useExperienceDelete from '../../../services/graphql/userProfile/experience/useExperienceDelete';\nimport {tableHeads} from './constants';\n\nexport const ExperiencePage: React.FC<ExperiencePageProps> = ({context}) => {\n  const userProfileID = context.navigation.location.pathname.split('/')[3];\n  const {experienceData, refetchData} = useExperience(userProfileID);\n  const {organizationUnitsList} = useOrganizationUnits(context);\n\n  const tableData = useMemo(() => {\n    let totalInsuredExperience = 0;\n    let totalExperience = 0;\n\n    experienceData?.forEach((item: any) => {\n      totalExperience += item.amount_of_experience;\n      totalInsuredExperience += item.amount_of_insured_experience;\n    });\n\n    return (\n      experienceData && [\n        ...experienceData,\n        {\n          id: '',\n          relevant: 'hide',\n          organization_unit: '',\n          date_of_start: '',\n          date_of_end: '',\n          amount_of_insured_experience: (\n            <Typography variant=\"bodyMedium\" style={{fontWeight: 600}} content={totalInsuredExperience} />\n          ),\n          amount_of_experience: <Typography variant=\"bodyMedium\" style={{fontWeight: 600}} content={totalExperience} />,\n          reference_file_id: '',\n          TABLE_ACTIONS: '',\n        } as any,\n      ]\n    );\n  }, [experienceData]);\n\n  const [showModal, setShowModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n\n  const selectedItem = useMemo(() => {\n    return tableData?.find((item: UserProfileExperience) => item.id === selectedItemId);\n  }, [selectedItemId]);\n\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const {mutate} = useExperienceDelete(\n    () => {\n      refetchData();\n      context.alert.success('Podaci su uspješno obrisani');\n    },\n    () => {\n      context.alert.error('Greška prilikom brisanja');\n    },\n  );\n\n  const handleEdit = (item: UserProfileExperience) => {\n    setSelectedItemId(item.id);\n    setShowModal(true);\n  };\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedItemId(id);\n  };\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const closeModal = () => {\n    setShowModal(false);\n    setSelectedItemId(0);\n  };\n\n  const handleDelete = () => {\n    mutate(selectedItemId);\n    setShowDeleteModal(false);\n    setSelectedItemId(0);\n  };\n\n  return (\n    <Container>\n      <span>\n        <Button\n          variant=\"secondary\"\n          content={<Typography variant=\"bodyMedium\" content=\"Dodajte novo zaposlenje\" />}\n          onClick={handleAdd}\n        />\n      </span>\n      <div>\n        <Table\n          tableHeads={tableHeads}\n          data={tableData || []}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n              shouldRender: item => item.id !== ('' as any),\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n              shouldRender: item => item.id !== ('' as any),\n            },\n          ]}\n        />\n      </div>\n      <ExperienceModal\n        alert={context.alert}\n        refetchList={refetchData}\n        open={showModal}\n        onClose={closeModal}\n        selectedItem={selectedItem}\n        units={organizationUnitsList as UnitType[]}\n        userProfileId={userProfileID}\n      />\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </Container>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/experience/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/experience/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[119,122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[119,122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[268,271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[268,271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[317,320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[317,320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[361,364],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[361,364],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[376,379],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[376,379],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {MicroserviceProps} from '../../../types/micro-service-props';\n\nexport interface ExperiencePageProps {\n  data?: any[];\n  context: MicroserviceProps;\n}\n\nexport type UnitType = {\n  id: number;\n  title: string;\n};\n\nexport interface ExperienceModalProps {\n  alert: any;\n  refetchList: () => void;\n  selectedItem?: any;\n  open: boolean;\n  onClose: (refetch?: any, message?: any) => void;\n  units: UnitType[];\n  userProfileId?: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/experience/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[107,110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[107,110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {calculateExperience, parseDate} from '../../../utils/dateUtils';\n\nexport const formatData = (data: any, newExperience?: boolean) => {\n  const calculatedExperience = calculateExperience(data?.date_of_start, data?.date_of_end);\n\n  console.log(data);\n\n  const payload = {\n    ...data,\n    relevant: data?.relevant?.id === 'Da' ? true : false,\n    organization_unit_id: data?.relevant?.id === 'Da' ? data?.selectedOrganizationUnit?.id : 0,\n    organization_unit: data?.relevant?.id === 'Da' ? data?.selectedOrganizationUnit?.title : data.organization_unit,\n    date_of_start: parseDate(data?.date_of_start, true),\n    date_of_end: parseDate(data?.date_of_end, true),\n    date_of_signature: data?.date_of_signature ? parseDate(data?.date_of_signature, true) : parseDate(new Date(), true),\n    amount_of_experience: calculatedExperience,\n    amount_of_insured_experience:\n      Number(data?.amount_of_insured_experience) >= calculatedExperience\n        ? calculatedExperience\n        : Number(data?.amount_of_insured_experience),\n    reference_file_id: data?.reference_file_id,\n  };\n\n  if (newExperience) {\n    delete payload.id;\n  }\n\n  delete payload.selectedOrganizationUnit;\n  delete payload.created_at;\n  delete payload.updated_at;\n\n  return payload;\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/family/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/family/family.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1494,1497],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1494,1497],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useMemo, useState} from 'react';\nimport {Container} from './styles';\nimport {Typography, Button, Table, EditIcon, TrashIcon, Theme} from 'client-library';\nimport {FamilyPageProps} from './types';\nimport {FamilyMemberModal} from '../../../components/familyMemberModal/familyMemberModal';\nimport {tableHeads} from './constants';\nimport {UserProfileFamily} from '../../../types/graphql/userProfileGetFamilyTypes';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport useFamilyOverview from '../../../services/graphql/userProfile/family/useFamilyOverview';\nimport useFamilyDelete from '../../../services/graphql/userProfile/family/useFamilyDelete';\n\nexport const FamilyPage: React.FC<FamilyPageProps> = ({context}) => {\n  const userProfileID = context.navigation.location.pathname.split('/')[3];\n  const {familyData, refetchData} = useFamilyOverview(userProfileID);\n  const [showModal, setShowModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n  const selectedItem = useMemo(() => {\n    return familyData?.find((item: UserProfileFamily) => item.id === selectedItemId);\n  }, [selectedItemId]);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const {mutate, success, error} = useFamilyDelete(() => {\n    if (success) {\n      refetchData();\n      context.alert.success('Uspješno obrisano');\n    } else if (error) {\n      context.alert.error('Brisanje nije uspješno');\n    }\n  });\n\n  const handleEdit = (item: any) => {\n    setSelectedItemId(item.id);\n    setShowModal(true);\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedItemId(id);\n  };\n\n  const handleDelete = () => {\n    mutate(selectedItemId);\n    setShowDeleteModal(false);\n    setSelectedItemId(0);\n  };\n\n  const handleAdd = () => {\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setSelectedItemId(0);\n  };\n\n  return (\n    <Container>\n      <span>\n        <Button\n          variant=\"secondary\"\n          content={<Typography variant=\"bodyMedium\" content=\"Dodajte člana porodice\" />}\n          onClick={handleAdd}\n        />\n      </span>\n      <div>\n        <Table\n          tableHeads={tableHeads}\n          data={familyData || []}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item),\n              icon: <EditIcon stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n      </div>\n      <FamilyMemberModal\n        open={showModal}\n        onClose={handleCloseModal}\n        selectedItem={selectedItem}\n        countries={context?.countries}\n        userProfileId={userProfileID}\n        alert={context.alert}\n        refetch={refetchData}\n      />\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </Container>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/family/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/family/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[115,118],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[115,118],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[214,217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[214,217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[273,276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[273,276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[315,318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[315,318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {MicroserviceProps} from '../../../types/micro-service-props';\n\nexport interface FamilyPageProps {\n  data?: any[];\n  context: MicroserviceProps;\n}\n\nexport interface FamilyMemberModalProps {\n  selectedItem?: any;\n  open: boolean;\n  onClose: () => void;\n  countries?: any[];\n  userProfileId?: number;\n  alert: any;\n  refetch: () => void;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/family/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[86,89],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[86,89],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {parseDate} from '../../../utils/dateUtils';\n\nexport const formatData = (data: any) => {\n  const payload = {\n    ...data,\n    id: data?.id || 0,\n    handicapped_person: data?.handicapped_person?.id === 'Da' ? true : false,\n    insurance_coverage: data?.insurance_coverage?.id === 'Ne' ? 'Ne' : 'Da',\n    date_of_birth: parseDate(data?.date_of_birth, true),\n    citizenship: data?.citizenship?.title,\n    country_of_birth: data?.country_of_birth?.title,\n    city_of_birth: data?.city_of_birth?.title,\n    employee_relationship: data?.employee_relationship?.title,\n    gender: data?.gender?.title,\n  };\n\n  delete payload.created_at;\n  delete payload.updated_at;\n\n  return payload;\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/foreigners/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/foreigners/foreigners.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[854,857],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[854,857],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1783,1786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1783,1786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {EditIconTwo, Theme, TrashIcon} from '@oykos-development/devkit-react-ts-styled-components';\nimport {Button, Table} from 'client-library';\nimport React, {useState} from 'react';\nimport PermitEntryModal from '../../../components/permitEntryModal/permitEntryModal';\nimport useForeignerPermitDelete from '../../../services/graphql/foreignerPermits/useForeignerPermitDelete';\nimport useForeignerPermits from '../../../services/graphql/foreignerPermits/useForeignerPermitOverview';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {tableHeads} from './constants';\nimport {ButtonContainer, TableContainer} from './styles';\nimport {ForeignersProps} from './types';\n\nconst Foreigners: React.FC<ForeignersProps> = ({context}) => {\n  const [entryModal, setEntryModal] = useState(false);\n  const [editData, setEditData] = useState<any>();\n  const [deleteModal, setDeleteModal] = useState(0);\n\n  const {data, refetch} = useForeignerPermits(3);\n  const {mutate: deleteEntry} = useForeignerPermitDelete();\n\n  const openModal = () => {\n    setEntryModal(true);\n  };\n\n  const closeModal = () => {\n    setEntryModal(false);\n    setEditData(null);\n  };\n\n  const handleDelete = () => {\n    if (deleteModal) {\n      deleteEntry(\n        deleteModal,\n        () => {\n          setDeleteModal(0);\n          refetch();\n          context.alert.success('Dozvola uspješno obrisana');\n          // setAlert({message: 'Dozvola uspješno obrisano', variant: AlertVariants.success});\n        },\n        () => {\n          setDeleteModal(0);\n          context.alert.error('Došlo je do greške pri brisanju dozvole');\n          // setAlert({message: 'Došlo je do greške pri brisanju dozvole', variant: AlertVariants.error});\n        },\n      );\n    }\n  };\n\n  const handleEdit = (row: any) => {\n    setEditData(row);\n    openModal();\n  };\n\n  const toggleDeleteModal = (id: number) => {\n    setDeleteModal(id);\n  };\n\n  return (\n    <TableContainer>\n      <ButtonContainer>\n        <Button content=\"Dodaj novi unos\" onClick={openModal} variant=\"secondary\" />\n      </ButtonContainer>\n      <Table\n        tableHeads={tableHeads}\n        data={data.items}\n        tableActions={[\n          {\n            name: 'edit',\n            onClick: item => handleEdit(item),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n          },\n          {\n            name: 'delete',\n            onClick: item => toggleDeleteModal(item.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <PermitEntryModal\n        countries={context.countries}\n        open={entryModal}\n        onClose={closeModal}\n        data={editData}\n        refetchList={refetch}\n        alert={context.alert}\n      />\n      <DeleteModal open={!!deleteModal} onClose={() => toggleDeleteModal(0)} handleDelete={handleDelete} />\n    </TableContainer>\n  );\n};\n\nexport default Foreigners;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/foreigners/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/foreigners/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1578,1581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1578,1581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1730,1733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1730,1733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2983,2986],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2983,2986],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {AlertVariants} from '@oykos-development/devkit-react-ts-styled-components';\nimport {Alert, CircleCheckIcon, DangerIcon, Typography} from 'client-library';\nimport {ValueType} from 'client-library/dist/components/dropdown/types';\nimport React, {useMemo, useState} from 'react';\nimport EmployeeDetails from '../../components/employeeDetails/employeeDetails';\nimport EmployeesList from '../../components/employeesList/employeesList';\nimport NewEmployeeSearch from '../../components/newEmployeeSearch/newEmployeeSearch';\nimport useUserProfiles from '../../services/graphql/userProfile/useUserProfiles';\nimport {AlertWrapper} from '../../shared/alertWrapper';\nimport ScreenWrapper from '../../shared/screenWrapper';\nimport {DropdownDataBoolean, DropdownDataNumber} from '../../types/dropdownData';\nimport {ScreenProps} from '../../types/screen-props';\nimport {useDebounce} from '../../utils/useDebounce';\n\nexport interface EmployeeListFilters {\n  is_active?: DropdownDataBoolean | null;\n  organization_unit_id?: DropdownDataNumber | null;\n  job_position_id?: DropdownDataNumber | null;\n  type?: DropdownDataNumber | null;\n}\n\nconst initialValues: EmployeeListFilters = {\n  is_active: null,\n  organization_unit_id: null,\n  job_position_id: null,\n  type: null,\n};\n\nexport const EmployeesScreen: React.FC<ScreenProps> = ({context}) => {\n  const [employeeModal, setEmployeeModal] = useState(false);\n  const [alert, setAlert] = useState<{variant: AlertVariants; message: string}>({\n    variant: AlertVariants.success,\n    message: '',\n  });\n  const [filters, setFilters] = useState<any>(initialValues);\n  const [search, setSearch] = useState('');\n\n  const debouncedSearch = useDebounce(search, 500);\n\n  const onFilterChange = (value: any, name: string) => {\n    console.log(value);\n    setFilters({...filters, [name]: value});\n  };\n\n  const [page, setPage] = useState(1);\n\n  const {\n    navigation: {\n      navigate,\n      location: {pathname},\n    },\n  } = context;\n\n  const {data} = useUserProfiles({page, size: 10, ...filters, name: debouncedSearch});\n\n  const isNewEmployeeRoute = useMemo(() => {\n    const paths = pathname.split('/');\n    if (paths[paths.length - 2] === 'new-employee') {\n      return true;\n    }\n  }, [pathname]);\n\n  const onSearch = (value: ValueType, name: string) => {\n    console.log(value, name);\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const toggleEmployeeImportModal = () => {\n    setEmployeeModal(!employeeModal);\n  };\n\n  return (\n    <ScreenWrapper context={context}>\n      <EmployeesList\n        onPageChange={onPageChange}\n        toggleEmployeeImportModal={toggleEmployeeImportModal}\n        navigate={navigate}\n        data={data}\n        filters={filters}\n        search={search}\n        onFilterChange={onFilterChange}\n        onSearch={e => setSearch(e.target.value)}\n      />\n      {isNewEmployeeRoute && <NewEmployeeSearch onSearch={onSearch} />}\n      <EmployeeDetails context={context} setAlert={(alert: any) => setAlert(alert)} />\n      {alert.message && (\n        <AlertWrapper>\n          <Alert\n            variant={alert.variant}\n            content={<Typography variant=\"bodySmall\" content={alert.message} />}\n            icon={\n              alert.variant === AlertVariants.success ? (\n                <CircleCheckIcon fill={'none'} stroke={'white'} />\n              ) : (\n                <DangerIcon fill={'none'} stroke={'white'} />\n              )\n            }\n            onClose={() => setAlert({variant: AlertVariants.success, message: ''})}\n          />\n        </AlertWrapper>\n      )}\n    </ScreenWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/salaryParams/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/salaryParams/salaryParams.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3090,3093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3090,3093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3721,3724],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3721,3724],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4496,4499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4496,4499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4555,4558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4555,4558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5851,5854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5851,5854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5910,5913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5910,5913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":186,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7178,7181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7178,7181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":260,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9836,9839],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9836,9839],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useEffect, useMemo, useState} from 'react';\nimport {FormContainer, FormColumn, FormFooter, FormWrapper, FormRow, FormItem, Controls} from './styles';\nimport {Input, Dropdown, Button, Datepicker} from 'client-library';\nimport useOrganizationUnits from '../../../services/graphql/organizationUnits/useOrganizationUnits';\nimport {SalaryParamsPageProps} from './types';\nimport {Controller, useForm} from 'react-hook-form';\nimport {insuranceBasis, salaryRanks} from './constants';\nimport {parseDate} from '../../../utils/dateUtils';\nimport useJobPositions from '../../../services/graphql/jobPositions/useJobPositionOverview';\nimport {contractTypes, yesOrNoOptionsBoolean, yesOrNoOptionsString} from '../../../constants';\nimport {UserProfileGetSalaryParams} from '../../../types/graphql/userProfileGetSalaryParams';\nimport {formatData, initialValues} from './utils';\nimport useSalaryParamsOverview from '../../../services/graphql/userProfile/salaryParams/useSalaryParamsOverview';\nimport useSalaryParamsInsert from '../../../services/graphql/userProfile/salaryParams/useSalaryParamsinsert';\n\nexport const SalaryParams: React.FC<SalaryParamsPageProps> = ({context}) => {\n  const [isDisabled, setIsDisabled] = useState<boolean>(true);\n  const userProfileID = context.navigation.location.pathname.split('/')[3];\n  const {data, refetch} = useSalaryParamsOverview(userProfileID);\n\n  const item = useMemo(() => {\n    return (\n      data && {\n        ...data,\n        benefited_track: data?.benefited_track ? {id: 'Da', title: 'Da'} : {id: 'Ne', title: 'Ne'},\n        without_raise: data?.without_raise ? {id: 'Da', title: 'Da'} : {id: 'Ne', title: 'Ne'},\n        insurance_basis: {id: data?.insurance_basis, title: data?.insurance_basis},\n        daily_work_hours: {id: data?.daily_work_hours, title: data?.daily_work_hours},\n        weekly_work_hours: {id: data?.weekly_work_hours, title: data?.weekly_work_hours},\n        salary_rank: {id: data?.salary_rank, title: data?.salary_rank},\n        user_resolution_id: data?.user_resolution_id ?? {id: data?.user_resolution_id, title: data?.user_resolution_id},\n      }\n    );\n  }, [data]);\n\n  const {data: jobPositions} = useJobPositions('');\n  const {organizationUnitsList} = useOrganizationUnits(context);\n\n  const {mutate} = useSalaryParamsInsert(\n    () => {\n      refetch();\n      setIsDisabled(true);\n      context.alert.success('Dodavanje podataka uspješno');\n    },\n    () => {\n      context.alert.error('Greška prilikom čuvanja podataka');\n    },\n  );\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors, isValid},\n    reset,\n    control,\n  } = useForm({\n    defaultValues: item || initialValues,\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [context.navigation.location]);\n\n  useEffect(() => {\n    reset(item);\n  }, [item]);\n\n  const handleSave = (values: UserProfileGetSalaryParams) => {\n    const payload = formatData({...values, user_profile_id: userProfileID});\n    if (isValid) {\n      mutate(payload);\n    }\n  };\n\n  const jobPositionOptions = useMemo(() => {\n    return jobPositions.items.map((jobPosition: any) => ({id: jobPosition.id, title: jobPosition.title}));\n  }, [jobPositions]);\n\n  return (\n    <FormContainer>\n      <FormWrapper style={{marginTop: '20px'}}>\n        <FormRow>\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"job_position_id\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"STATUS ZAPOSLENOG:\"\n                    value={value as any}\n                    noOptionsText=\"Prazno\"\n                    options={jobPositionOptions}\n                    isDisabled={isDisabled}\n                    error={errors.job_position_id?.message as string}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"organization_unit_id\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"ORGANIZACIONA JEDINICA:\"\n                    isDisabled={isDisabled}\n                    value={value as any}\n                    options={organizationUnitsList as any}\n                    error={errors.organization_unit_id?.message as string}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"benefited_track\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"BENEFI. STAŽ:\"\n                    isDisabled={isDisabled}\n                    value={value}\n                    options={yesOrNoOptionsString}\n                    error={errors.benefited_track?.message as string}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"without_raise\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"BEZ POVEĆANJA:\"\n                    isDisabled={isDisabled}\n                    value={value as any}\n                    options={yesOrNoOptionsBoolean as any}\n                    error={errors.without_raise?.message as string}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"insurance_basis\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"OSNOVA OSIG. PO PIO:\"\n                    isDisabled={isDisabled}\n                    value={value}\n                    options={insuranceBasis}\n                    error={errors.insurance_basis?.message as string}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"zk\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"ZK:\"\n                    isDisabled={isDisabled}\n                    value={value as any}\n                    options={yesOrNoOptionsString}\n                    error={errors.zk?.message as string}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"salary_rank\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"TARIFNI PLATNI RAZRED:\"\n                    isDisabled={isDisabled}\n                    value={value}\n                    options={salaryRanks}\n                    error={errors.salary_rank?.message as string}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"user_resolution_id\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"RJEŠENJE:\"\n                    isDisabled={isDisabled}\n                    value={value}\n                    options={contractTypes}\n                    error={errors.user_resolution_id?.message as string}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"created_at\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {name, onChange, value}}) => (\n                  <Datepicker\n                    name={name}\n                    value={value ? parseDate(value) : ''}\n                    onChange={onChange}\n                    label=\"DATUM RJEŠENJA:\"\n                    disabled={isDisabled}\n                    error={errors.created_at?.message}\n                  />\n                )}\n              />\n            </FormItem>\n          </FormColumn>\n\n          <FormColumn>\n            <FormItem>\n              <Controller\n                name=\"daily_work_hours\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"RADNO VRIJEME:\"\n                    isDisabled={isDisabled}\n                    value={value as any}\n                    options={[\n                      {id: '8', title: '8'},\n                      {id: '4', title: '4'},\n                      {id: '2', title: '2'},\n                    ]}\n                    error={errors.daily_work_hours?.message as string}\n                  />\n                )}\n              />\n            </FormItem>\n            <FormItem>\n              <Controller\n                name=\"weekly_work_hours\"\n                rules={{required: 'Ovo polje je obavezno'}}\n                control={control}\n                render={({field: {onChange, name, value}}) => (\n                  <Dropdown\n                    name={name}\n                    onChange={onChange}\n                    label=\"SEDMIČNA OBAVEZA:\"\n                    isDisabled={isDisabled}\n                    value={value}\n                    options={[\n                      {id: '10', title: '10'},\n                      {id: '20', title: '20'},\n                      {id: '40', title: '40'},\n                    ]}\n                    error={errors.weekly_work_hours?.message as string}\n                  />\n                )}\n              />\n            </FormItem>\n          </FormColumn>\n\n          <FormColumn>\n            <FormItem>\n              <Input\n                {...register('education_rank', {required: 'Ovo polje je obavezno'})}\n                label=\"STEPEN STRUČNOG OBRAZOVANJA:\"\n                disabled={isDisabled}\n                error={errors.education_rank?.message as string}\n              />\n            </FormItem>\n          </FormColumn>\n          <FormColumn>\n            <FormItem>\n              <FormItem>\n                <Input\n                  {...register('education_naming', {required: 'Ovo polje je obavezno'})}\n                  label=\"ZANIMANJE PO STRUCI:\"\n                  disabled={isDisabled}\n                  error={errors.education_naming?.message as string}\n                />\n              </FormItem>\n            </FormItem>\n          </FormColumn>\n        </FormRow>\n      </FormWrapper>\n\n      <FormFooter>\n        <Controls>\n          {isDisabled ? (\n            <Button content=\"Uredi\" variant=\"secondary\" onClick={() => setIsDisabled(false)} />\n          ) : (\n            <>\n              <Button\n                content=\"Sačuvaj i zatvori\"\n                variant=\"secondary\"\n                onClick={() => handleSubmit((data: UserProfileGetSalaryParams) => handleSave(data))()}\n              />\n              <Button\n                content=\"Sačuvaj i nastavi\"\n                variant=\"primary\"\n                onClick={() => handleSubmit((data: UserProfileGetSalaryParams) => handleSave(data))()}\n              />\n            </>\n          )}\n        </Controls>\n      </FormFooter>\n    </FormContainer>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/salaryParams/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/salaryParams/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[121,124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[121,124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {MicroserviceProps} from '../../../types/micro-service-props';\n\nexport interface SalaryParamsPageProps {\n  data?: any[];\n  context: MicroserviceProps;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/salaryParams/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[128,131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[128,131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {UserProfileGetSalaryParams} from '../../../types/graphql/userProfileGetSalaryParams';\n\nexport const formatData = (data: any) => {\n  const payload = {\n    ...data,\n    id: data?.id || 0,\n    benefited_track: data?.benefited_track?.id === 'Da' ? true : false,\n    without_raise: data?.without_raise?.id === 'Da' ? true : false,\n    insurance_basis: data?.insurance_basis?.id,\n    daily_work_hours: data?.daily_work_hours.id,\n    weekly_work_hours: data?.weekly_work_hours.id,\n    salary_rank: data?.salary_rank.id,\n    user_resolution_id: data?.user_resolution_id?.id,\n  };\n\n  delete payload.created_at;\n  delete payload.updated_at;\n\n  return payload;\n};\n\nexport const initialValues: UserProfileGetSalaryParams = {\n  id: 0,\n  user_profile_id: 0,\n  benefited_track: false,\n  without_raise: false,\n  insurance_basis: '',\n  salary_rank: '',\n  daily_work_hours: '',\n  weekly_work_hours: '',\n  education_rank: '',\n  education_naming: '',\n  user_resolution_id: 0,\n  created_at: '',\n  updated_at: '',\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/employees/types..ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/internalRevision/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/internalRevision/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/internalRevision/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/applicationDetails/applicationDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/applicationDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/applications/applications.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'JobPosition' is defined but never used.","line":13,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1842,1845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1842,1845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2550,2553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2550,2553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useMemo, useState} from 'react';\nimport {JobTenderModal} from '../../components/jobTenderModal/jobTenderModal';\nimport JobTendersList from '../../components/jobTendersList/jobTendersList';\nimport useOrganizationUnits from '../../services/graphql/organizationUnits/useOrganizationUnits';\nimport ScreenWrapper from '../../shared/screenWrapper';\nimport {JobTender} from '../../types/graphql/jobTenders';\nimport {ScreenProps} from '../../types/screen-props';\nimport {DropdownDataBoolean, DropdownDataNumber} from '../../types/dropdownData';\nimport useJobTendersOverview from '../../services/graphql/jobTenders/useJobTenderOverview';\nimport useJobTendersDelete from '../../services/graphql/jobTenders/useJobTenderDelete';\nimport useJobTendersTypesSearch from '../../services/graphql/jobPositions/useJobTendersTypesSearch';\nimport useJobPositionsOrganizationUnit from '../../services/graphql/jobPositions/useJobPositionsOrganizationUnit';\nimport {JobPosition} from '../../types/graphql/jobPositions';\n\nexport interface JobTendersListFilters {\n  active: DropdownDataBoolean | null;\n  organization_unit_id: DropdownDataNumber | null;\n  job_position_id: DropdownDataNumber | null;\n  type: DropdownDataNumber | null;\n}\n\nconst initialValues: JobTendersListFilters = {\n  active: null,\n  organization_unit_id: null,\n  job_position_id: null,\n  type: null,\n};\n\nexport const JobTendersScreen: React.FC<ScreenProps> = ({context}) => {\n  const [showModal, setShowModal] = useState(false);\n  const [page, setPage] = useState(1);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n  const {types, typesUnitsList} = useJobTendersTypesSearch('');\n  const {organizationUnitsList} = useOrganizationUnits(context);\n  const {positions} = useJobPositionsOrganizationUnit(context?.organization_unit?.id);\n\n  const [filters, setFilters] = useState<any>(initialValues);\n\n  const {data, refreshData} = useJobTendersOverview({page, size: 10, ...filters});\n\n  const selectedItem = useMemo(() => {\n    return data?.items?.find((item: JobTender) => item.id === selectedItemId);\n  }, [selectedItemId]);\n\n  const {alert} = context.contextMain;\n\n  const handleEdit = (item?: JobTender) => {\n    setSelectedItemId(item?.id ? item.id : 0);\n    setShowModal(true);\n  };\n\n  const {mutate: deleteJobTenders} = useJobTendersDelete(\n    () => {\n      refreshData();\n      alert.success('Uspješno obrisano');\n    },\n    () => {\n      alert.error('Brisanje nije uspješno');\n    },\n  );\n\n  const {\n    navigation: {navigate},\n  } = context;\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value});\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const toggleEmployeeImportModal = (item?: JobTender) => {\n    setShowModal(!showModal);\n    handleEdit(item);\n  };\n\n  const handleCloseModal = (refetch: boolean, message: string) => {\n    setShowModal(false);\n    setSelectedItemId(0);\n    if (refetch) {\n      refreshData();\n      alert.success(message);\n    } else {\n      alert.error(message);\n    }\n  };\n\n  return (\n    <ScreenWrapper context={context}>\n      <JobTendersList\n        navigate={navigate}\n        toggleJobTenderImportModal={toggleEmployeeImportModal}\n        onPageChange={onPageChange}\n        data={data}\n        dropdownJobTenderType={typesUnitsList || []}\n        organizationUnitsList={organizationUnitsList || []}\n        filters={filters}\n        onFilterChange={onFilterChange}\n        deleteJobTender={deleteJobTenders}\n        context={context}\n      />\n      <JobTenderModal\n        open={showModal}\n        onClose={(refetch, message) => handleCloseModal(refetch, message)}\n        selectedItem={selectedItem}\n        dropdownJobTenderType={types?.items || []}\n        jobPositionOrganizationUnitsList={positions.items || []}\n      />\n    </ScreenWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/jobTenders/jobTenderDetails/jobTenderDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/constants.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {DropdownDataNumber} from '../../types/dropdownData';\n\nexport const areaItems: DropdownDataNumber[] = [\n  {\n    id: 1,\n    title: 'Krivica',\n  },\n  {\n    id: 2,\n    title: 'Parnica',\n  },\n];\n\nexport const areaFilterItems: DropdownDataNumber[] = [\n  {\n    id: 0,\n    title: 'Sve',\n  },\n  {\n    id: 1,\n    title: 'Krivica',\n  },\n  {\n    id: 2,\n    title: 'Parnica',\n  },\n];\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgeNorms/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgeNorms/judges.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3076,3079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3076,3079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3188,3191],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3188,3191],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useEffect, useMemo, useState} from 'react';\nimport {ScreenProps} from '../../../types/screen-props';\nimport useJudgesOverview from '../../../services/graphql/judges/useJudgeOverview';\nimport useOrganizationUnits from '../../../services/graphql/organizationUnits/useOrganizationUnits';\nimport {DropdownDataNumber} from '../../../types/dropdownData';\nimport {JudgeOverview, Norms} from '../../../types/graphql/judges';\nimport ScreenWrapper from '../../../shared/screenWrapper';\nimport JudgeNormModal from '../../../components/judgeNormModal/judgeNormModal';\nimport NormsList from '../../../components/normsList/normsList';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {areaFilterItems} from '../constants';\nimport JudgesList from '../../../components/judgesList/judgesList';\nimport useJudgeNormsDelete from '../../../services/graphql/judges/useJudgeNormDelete';\n\nexport interface JudgesListFilters {\n  organization_unit: DropdownDataNumber | null;\n  user_profile: DropdownDataNumber | null;\n}\n\nconst initialValues: JudgesListFilters = {\n  organization_unit: null,\n  user_profile: null,\n};\n\nexport interface NormListFilters {\n  area: DropdownDataNumber | null;\n}\n\nconst initialNormValues: NormListFilters = {\n  area: null,\n};\n\nconst JudgeNorms: React.FC<ScreenProps> = ({context}) => {\n  const [showModal, setShowModal] = useState(false);\n  const [page, setPage] = useState(1);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n  const [selectedNormItemId, setSelectedNormItemId] = useState(0);\n  const [normsList, setNormsList] = useState<Norms[]>([]);\n  const {organizationUnitsList} = useOrganizationUnits(context);\n\n  const [filters, setFilters] = useState<JudgesListFilters>(initialValues);\n  const [filtersNorm, setFiltersNorm] = useState<NormListFilters>(initialNormValues);\n\n  const {data, total, refetch} = useJudgesOverview({page, size: 10, ...filters});\n  const {judgesUnitsList} = useJudgesOverview({page, size: 1000, ...initialValues});\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const selectedNormItem = useMemo(() => {\n    return normsList?.find((item: Norms) => item.id === selectedNormItemId);\n  }, [selectedNormItemId]);\n\n  const normsListSet = () => {\n    const item = data?.find((item: JudgeOverview) => item.id === selectedItemId);\n    setNormsList([\n      ...(item?.norms || []).map(norm => ({\n        ...norm,\n        full_name: item?.full_name,\n      })),\n    ]);\n  };\n\n  useEffect(() => {\n    normsListSet();\n  }, [data]);\n\n  const {mutate: deleteJudgeNorm} = useJudgeNormsDelete(\n    () => {\n      refetch();\n      context.success('Uspješno obrisano');\n    },\n    () => {\n      context.error('Brisanje nije uspješno');\n    },\n  );\n\n  const openNormModal = (item?: Norms) => {\n    setShowModal(true);\n    setSelectedNormItemId(item?.id || 0);\n  };\n\n  const toggleJudgesNorms = (item?: JudgeOverview) => {\n    setSelectedItemId(item?.id || 0);\n    normsListSet();\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value});\n  };\n\n  const onFilterNormChange = (value: any, name: string) => {\n    setFiltersNorm({...filtersNorm, [name]: value});\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setSelectedNormItemId(0);\n  };\n\n  const handleDelete = () => {\n    deleteJudgeNorm(selectedNormItemId);\n    setShowDeleteModal(false);\n    setSelectedNormItemId(0);\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedNormItemId(id);\n  };\n\n  return (\n    <ScreenWrapper context={context}>\n      <JudgesList\n        toggleJudgesNorms={toggleJudgesNorms}\n        onPageChange={onPageChange}\n        data={data || []}\n        usersUnitsList={judgesUnitsList}\n        organizationUnitsList={organizationUnitsList || []}\n        filters={filters}\n        onFilterChange={onFilterChange}\n        total={total}\n        addNorm={() => openNormModal()}\n      />\n      {normsList.length > 0 && (\n        <NormsList\n          data={normsList}\n          filters={filtersNorm}\n          areas={areaFilterItems}\n          onFilterChange={onFilterNormChange}\n          toggleNormsModal={item => openNormModal(item)}\n          handleDeleteIconClick={handleDeleteIconClick}\n        />\n      )}\n\n      <JudgeNormModal\n        alert={context.alert}\n        refetchList={refetch}\n        open={showModal}\n        onClose={handleCloseModal}\n        selectedItem={selectedNormItem}\n        dropdownData={judgesUnitsList}\n      />\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n    </ScreenWrapper>\n  );\n};\n\nexport default JudgeNorms;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgesDecisionDetails/judgesDecisionDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2519,2522],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2519,2522],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":65,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":65,"endColumn":15,"fix":{"range":[2750,2764],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":66,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":66,"endColumn":13,"fix":{"range":[2807,2819],"text":"          "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":184,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6417,6420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6417,6420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6456,6459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6456,6459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":202,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6941,6944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6941,6944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import {Button, Divider, Table, Input, TableHead} from 'client-library';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {Controls, Filters, FormFooter} from './styles';\nimport {OverviewBox} from '../../../components/employeesList/styles';\nimport useOrganizationUnits from '../../../services/graphql/organizationUnits/useOrganizationUnits';\nimport {MainTitle} from '../../../shared/mainTitle';\nimport {JudgeResolutionOverview, JudgeResolutionItem} from '../../../types/graphql/judges';\nimport {yearsForDropdown} from '../../../utils/constants';\nimport {judgeResolutionTableHeads} from '../judgeNorms/constants';\nimport {ScreenProps} from '../../../types/screen-props';\nimport {FilterDropdown} from '../../../components/judgesList/styles';\nimport useJudgeResolutionsOverview from '../../../services/graphql/judges/useJudgeResolutionOverview';\nimport {OrganizationUnit} from '../../../types/graphql/organizationUnitsTypes';\nimport {nanoid} from 'nanoid';\nimport {DropdownDataString} from '../../../types/dropdownData';\nimport useJudgeResolutionsInsert from '../../../services/graphql/judges/useJudgeResolutionInsert';\nimport ScreenWrapper from '../../../shared/screenWrapper';\n\n// If you start experiencing pain in your brain while looking at this code, talk to Petar.\n\nexport interface JudgesNumbersDetailsListProps extends ScreenProps {\n  isNew?: boolean;\n}\n\ninterface DecisionForm {\n  id: number;\n  user_profile_id: number;\n  serial_number: string;\n  year: DropdownDataString | null;\n  items: {[key: string]: number};\n}\n\nconst initialValues = {\n  available_slots_presidents: 0,\n  available_slots_judges: 0,\n  number_of_judges: 0,\n  number_of_presidents: 0,\n  number_of_employees: 0,\n  number_of_relocated_judges: 0,\n  number_of_suspended_judges: 0,\n};\n\nexport const JudgesNumbersDetails: React.FC<JudgesNumbersDetailsListProps> = ({context, isNew}) => {\n  const [isDisabled, setIsDisabled] = useState<boolean>(isNew ? false : true);\n  const {organizationUnits} = useOrganizationUnits();\n\n  const id = context.navigation.location.pathname.split('/')[4];\n\n  const {data} = useJudgeResolutionsOverview({page: 1, size: 1000});\n\n  const {mutate} = useJudgeResolutionsInsert();\n\n  const item = data?.find((i: JudgeResolutionOverview) => i.id === Number(id));\n\n  // constructing initial values for the form, serial number, year and dynamic number of fields for judge number based on org units\n  const getInitialValues = useMemo(() => {\n    const values: any = {};\n\n    organizationUnits\n      ?.filter(orgItem => !!orgItem.id && !orgItem.parent_id)\n      .forEach((unit: OrganizationUnit) => {\n        values[unit.id] = item\n          ? item?.items?.find((i: JudgeResolutionItem) => {\n              return i.organization_unit.id === unit.id;\n            })?.available_slots_judges\n          : '';\n      });\n\n    return {\n      id: item?.id ?? 0,\n      user_profile_id: 1,\n      serial_number: item?.serial_number ?? '',\n      year: item?.year ? {id: item?.year, title: item?.year} : null,\n      items: values,\n    };\n  }, [organizationUnits, item]);\n\n  const list = useMemo(() => {\n    return organizationUnits\n      .filter(unit => !unit.parent_id && unit.id)\n      .map((orgItem: OrganizationUnit) => {\n        const itemFromList = item?.items?.find((i: JudgeResolutionItem) => i.organization_unit.id === orgItem.id) ?? {\n          ...initialValues,\n          id: nanoid(),\n        };\n\n        return {\n          ...itemFromList,\n          organization_unit: {id: orgItem.id, title: orgItem.title},\n        };\n      });\n  }, [organizationUnits, item]);\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors},\n    control,\n    reset,\n  } = useForm<DecisionForm>({defaultValues: getInitialValues});\n\n  const judgeNumberTableHead: TableHead = {\n    title: 'Odluka o broju sudija',\n    accessor: 'available_slots_judges',\n    type: 'custom',\n    renderContents: (_, item) => (\n      <Input\n        {...register(`items.${item.organization_unit.id}`, {required: 'Ovo polje je obavezno'})}\n        disabled={isDisabled}\n      />\n    ),\n  };\n\n  const handleSave = (values: DecisionForm, close: boolean) => {\n    setIsDisabled(true);\n\n    const data = {\n      id: values.id,\n      serial_number: values.serial_number,\n      year: values.year?.id ?? '',\n      active: true,\n      items: Object.keys(values.items).map(key => ({\n        organization_unit_id: Number(key),\n        number_of_judges: Number(values.items[key]),\n        number_of_presidents: 1,\n        id: item?.items.find(i => i.organization_unit.id === Number(key))?.id ?? 0,\n      })),\n    };\n\n    mutate(\n      data,\n      id => {\n        setIsDisabled(true);\n        context.alert.success('Uspješno ste sačuvali odluku');\n        if (close) {\n          context.navigation.navigate('/hr/judges/number-decision');\n          context.breadcrumbs.remove();\n        } else {\n          context.navigation.navigate(`/hr/judges/number-decision/${id}`);\n        }\n      },\n      () => {\n        context.alert.error('Došlo je do greške prilikom čuvanja odluke');\n      },\n    );\n  };\n\n  const availableYears = useMemo(() => {\n    const yearOptions = [...yearsForDropdown().map(year => ({id: year.id.toString(), title: year.title.toString()}))];\n    return data ? yearOptions.filter(year => !data.find(resolution => resolution.year === year.id)) : [];\n  }, [data]);\n\n  useEffect(() => {\n    if (getInitialValues) {\n      reset(getInitialValues);\n    }\n  }, [getInitialValues]);\n\n  return (\n    <ScreenWrapper context={context}>\n      <OverviewBox>\n        <MainTitle variant=\"bodyMedium\" content=\"DETALJI ODLUKE\" />\n        {/*TODO: theme color */}\n        <Divider color=\"#615959\" height=\"1px\" />\n        <div>\n          <Filters>\n            <Input\n              {...register('serial_number', {required: 'Redni broj je obavezan'})}\n              label=\"REDNI BROJ:\"\n              style={{width: 300}}\n              error={errors.serial_number?.message}\n              placeholder=\"Unesite redni broj\"\n              disabled={isDisabled}\n            />\n            <Controller\n              control={control}\n              rules={{required: 'Godina je obavezna'}}\n              name=\"year\"\n              render={({field: {onChange, name, value}}) => (\n                <FilterDropdown\n                  label=\"GODINA:\"\n                  name={name}\n                  options={availableYears as any}\n                  value={value as any}\n                  onChange={onChange}\n                  placeholder=\"Odaberite godinu\"\n                  error={errors.year?.message}\n                  isDisabled={isDisabled}\n                />\n              )}\n            />\n          </Filters>\n        </div>\n\n        <Table\n          tableHeads={[\n            ...judgeResolutionTableHeads.slice(0, 2),\n            judgeNumberTableHead,\n            ...judgeResolutionTableHeads.slice(3),\n          ]}\n          data={(list as any) || []}\n          style={{marginBottom: 22}}\n        />\n        <FormFooter>\n          <Controls>\n            {isDisabled ? (\n              <Button content=\"Uredi\" variant=\"secondary\" onClick={() => setIsDisabled(false)} />\n            ) : (\n              <>\n                <Button\n                  content=\"Sačuvaj i zatvori\"\n                  variant=\"secondary\"\n                  onClick={handleSubmit(values => handleSave(values, true))}\n                />\n                <Button\n                  content=\"Sačuvaj i nastavi\"\n                  variant=\"primary\"\n                  onClick={handleSubmit(values => handleSave(values, false))}\n                />\n              </>\n            )}\n          </Controls>\n        </FormFooter>\n      </OverviewBox>\n    </ScreenWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgesDecisionDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgesNumberDecisions/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/judges/judgesNumberDecisions/judgesNumberDecision.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1074,1077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1074,1077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useMemo, useState} from 'react';\nimport JudgesNumbersList from '../../../components/judgesNumbersList/judgesNumbersList';\nimport ScreenWrapper from '../../../shared/screenWrapper';\nimport {DropdownDataString} from '../../../types/dropdownData';\nimport {ScreenProps} from '../../../types/screen-props';\nimport {yearsForDropdown} from '../../../utils/constants';\nimport useJudgesResolutionsOverview from '../../../services/graphql/judges/useJudgeResolutionOverview';\n\nexport interface JudgesNumberListFilters {\n  year: DropdownDataString | null;\n}\n\nconst initialValues: JudgesNumberListFilters = {\n  year: null,\n};\n\nconst JudgesNumberDecisions: React.FC<ScreenProps> = ({context}) => {\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState<JudgesNumberListFilters>(initialValues);\n  const {\n    data: judgesResolutions,\n    total,\n    refetch,\n  } = useJudgesResolutionsOverview({page, size: 10, year: filters?.year?.id || ''});\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value});\n  };\n\n  const yearOptions = useMemo(\n    () => [...yearsForDropdown().map(year => ({id: year.id.toString(), title: year.title.toString()}))],\n    [],\n  );\n\n  return (\n    <ScreenWrapper context={context}>\n      <JudgesNumbersList\n        years={yearOptions}\n        data={judgesResolutions || []}\n        total={total}\n        filters={filters}\n        onFilterChange={onFilterChange}\n        onPageChange={onPageChange}\n        navigate={context.navigation.navigate}\n        alert={context.alert}\n        refetch={refetch}\n      />\n    </ScreenWrapper>\n  );\n};\n\nexport default JudgesNumberDecisions;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/landing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/organization-units/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/filters/style.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/filters/systematizationFilters.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":108,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":111,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[610,613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[610,613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1448,1451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1448,1451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1786,1789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1786,1789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1911,1914],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1911,1914],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useEffect} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {Dropdown, Input, SearchIcon, Theme} from 'client-library';\nimport {Wrapper} from './style';\nimport {yearsForDropdown} from '../../../utils/constants';\nimport useOrganizationUnits from '../../../services/graphql/organizationUnits/useOrganizationUnits';\nimport {SystematizationFiltersProps} from '../types';\n\nconst initialValues = {\n  systematization_number: 0,\n  year: 0,\n  organization_unit_id: 0,\n};\n\nexport const SystematizationFilters: React.FC<SystematizationFiltersProps> = ({setFilters, data, context}: any) => {\n  const {register, control, watch} = useForm({defaultValues: data || initialValues});\n  const years = yearsForDropdown();\n  const {organizationUnitsList} = useOrganizationUnits(context);\n  const unit = watch('organization_unit_id');\n\n  useEffect(() => {\n    unit !== 0 && setFilters({organization_unit_id: unit?.id});\n  }, [unit]);\n\n  return (\n    <Wrapper>\n      <Input\n        {...register('systematization_number', {required: 'Ovo polje je obavezno'})}\n        label=\"BROJ SISTEMATIZACIJE:\"\n        rightContent={<SearchIcon style={{marginLeft: 10, marginRight: 10}} stroke={Theme.palette.gray300} />}\n        disabled\n      />\n      <Controller\n        name=\"year\"\n        control={control}\n        render={({field: {onChange, name, value}}) => {\n          return (\n            <Dropdown onChange={onChange} value={value as any} name={name} label=\"GODINA:\" options={years} isDisabled />\n          );\n        }}\n      />\n\n      <Controller\n        name=\"organization_unit_id\"\n        control={control}\n        render={({field: {onChange, name, value}}) => {\n          return (\n            <Dropdown\n              onChange={onChange}\n              value={value as any}\n              name={name}\n              label=\"ORGANIZACIONA JEDINICA:\"\n              options={organizationUnitsList as any}\n            />\n          );\n        }}\n      />\n    </Wrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1009,1012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1009,1012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1242,1245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1242,1245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2584,2587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2584,2587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2615,2618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2615,2618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useEffect, useState} from 'react';\nimport {Divider, Theme, Button, Table, EditIconTwo, TrashIcon, TableHead, Typography} from 'client-library';\nimport {ScreenProps} from '../../types/screen-props';\nimport ScreenWrapper from '../../shared/screenWrapper';\nimport {MainTitle, OverviewBox} from '../../components/employeesList/styles';\nimport {Header} from './styles';\nimport {SystematizationFilters} from './filters/systematizationFilters';\nimport {DeleteModal} from '../../shared/deleteModal/deleteModal';\nimport useSystematizationsDelete from '../../services/graphql/systematization/useSystematizationsDelete';\nimport useSystematizationOverview from '../../services/graphql/systematization/useSystematizations';\n\nconst tableHeads: TableHead[] = [\n  {title: 'Broj sistematizacije', accessor: 'serial_number', type: 'text'},\n  {title: 'Datum izdavanja', accessor: 'date_of_activation', type: 'text'},\n  {\n    title: 'Status',\n    accessor: 'active',\n    type: 'custom',\n    renderContents: (item: any) => {\n      return <Typography variant=\"bodyMedium\" content={item ? 'Odobreno' : 'Nacrt'} />;\n    },\n  },\n  {\n    title: 'Organizaciona Jedinica',\n    accessor: 'organization_unit',\n    type: 'custom',\n    renderContents: (item: any) => {\n      return <Typography variant=\"bodyMedium\" content={item.title} />;\n    },\n  },\n  {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n];\n\nexport const SystematizationScreen: React.FC<ScreenProps> = ({context}) => {\n  const [params, setParams] = useState({page: 1, size: 10, organization_unit_id: 0, active: ''});\n  const {data, refetch} = useSystematizationOverview(params);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n\n  const {mutate, success, error} = useSystematizationsDelete(() => {\n    if (success) {\n      refetch();\n      context.alert.success('Uspješno obrisano');\n    } else if (error) {\n      context.alert.error('Brisanje nije uspješno');\n    }\n  });\n\n  const {\n    navigation: {navigate},\n  } = context;\n\n  const handleEdit = (id: number) => {\n    navigate(`/hr/systematization/systematization-details/${id}`);\n    context.breadcrumbs.add({\n      name: `Sistematizacija broj ${id}`,\n      to: `/hr/systematization/systematization-details/${id}`,\n    });\n  };\n\n  const handleDeleteIconClick = (id: number) => {\n    setShowDeleteModal(true);\n    setSelectedItemId(id);\n  };\n\n  const handleDelete = () => {\n    mutate(selectedItemId);\n    setShowDeleteModal(false);\n    setSelectedItemId(0);\n  };\n\n  const setFilters = (params: any) => {\n    setParams((data: any) => ({...data, ...params}));\n  };\n\n  useEffect(() => {\n    refetch();\n  }, [params]);\n\n  return (\n    <ScreenWrapper context={context}>\n      <OverviewBox>\n        <MainTitle variant=\"bodyMedium\" content=\"Sistematizacija\" />\n        <Divider color={Theme?.palette?.gray200} height=\"1px\" />\n        <Header>\n          <SystematizationFilters setFilters={params => setFilters(params)} />\n          <Button\n            variant=\"secondary\"\n            content=\"Napravite sistematizaciju\"\n            onClick={() => {\n              navigate('/hr/systematization/systematization-details');\n              context.breadcrumbs.add({\n                name: 'Napravite sistematizaciju',\n                to: '/hr/systematization/systematization-details',\n              });\n            }}\n          />\n        </Header>\n        <Table\n          tableHeads={tableHeads}\n          data={data || []}\n          tableActions={[\n            {\n              name: 'edit',\n              onClick: item => handleEdit(item.id),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            },\n            {\n              name: 'delete',\n              onClick: item => handleDeleteIconClick(item.id),\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            },\n          ]}\n        />\n        <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={handleDelete} />\n      </OverviewBox>\n    </ScreenWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/footer.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":44,"column":17,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":44,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/printPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[846,849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[846,849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {PrintPageProps} from '../types';\nimport {JobInfo, PrintPageWrapper, SectorTitle} from './styles';\nimport {Typography, Divider, Theme} from 'client-library';\nimport {SectorType} from '../../../types/graphql/systematizationsGetDetailsTypes';\n\nexport const PrintPage: React.FC<PrintPageProps> = ({sectorDetails}) => {\n  return (\n    <PrintPageWrapper>\n      {sectorDetails?.map((sector: SectorType) => {\n        return (\n          <div key={`sector-details-${sector?.id}`}>\n            <div>\n              <SectorTitle>\n                <Typography variant=\"bodyLarge\" content={sector?.title} style={{fontWeight: 600}} />\n              </SectorTitle>\n              <Divider height=\"2px\" color={Theme?.palette?.gray200} />\n            </div>\n            <div>\n              {sector?.job_positions?.map((jobPosition: any) => {\n                return (\n                  <>\n                    <JobInfo key={`job-position-${jobPosition?.id}`}>\n                      <Typography variant=\"bodyMedium\" content={jobPosition?.serial_number} style={{fontWeight: 600}} />\n                      <Typography variant=\"bodyMedium\" content={jobPosition?.description} />\n                    </JobInfo>\n                  </>\n                );\n              })}\n            </div>\n          </div>\n        );\n      })}\n    </PrintPageWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/sectors.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1473,1476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1473,1476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1486,1489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1486,1489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2108,2111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2108,2111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3069,3072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3069,3072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3365,3368],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3365,3368],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3854,3857],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3854,3857],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4292,4295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4292,4295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4572,4575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4572,4575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useEffect, useState} from 'react';\nimport {SectorsProps} from '../types';\nimport {AccordionHeader, AccordionIconsWrapper, Menu, MenuItem, SectorsWrapper} from './styles';\nimport {Accordion, ChevronDownIcon, MoreVerticalIcon, Typography} from 'client-library';\nimport {SystematizationJobPositions} from '../../../types/graphql/jobPositions';\nimport {JobPositionTable} from '../../../components/jobPositionTable/jobPositionTable';\nimport {DeleteModal} from '../../../shared/deleteModal/deleteModal';\nimport {SectorType} from '../../../types/graphql/systematizationsGetDetailsTypes';\n\nexport const Sectors: React.FC<SectorsProps> = ({\n  sectors,\n  handleDeleteSector,\n  systematizationID,\n  refreshData,\n  handleEditSector,\n  context,\n}) => {\n  const [isOpen, setIsOpen] = useState<number>(0);\n  const [showMenu, setShowMenu] = useState<number>(0);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [deleteItemId, setDeleteItemId] = useState(0);\n  const [selectedItemId, setSelectedItemId] = useState(0);\n\n  const [jobPositions, setJobPositions] = useState<SystematizationJobPositions[] | undefined>([]);\n\n  const openAccordion = (sectorId: number) => {\n    setIsOpen(prevState => (prevState === sectorId ? 0 : sectorId));\n    setSelectedItemId(sectorId);\n    setShowMenu(0);\n  };\n\n  const showMenuHandler = (sectorId: number) => {\n    setShowMenu(prevState => (prevState === sectorId ? 0 : sectorId));\n  };\n\n  const addJobPosition = (e: any, sector: any) => {\n    e.stopPropagation();\n    setSelectedItemId(sector?.id);\n    setShowMenu(0);\n    jobPositions &&\n      setJobPositions([\n        ...jobPositions,\n        {\n          available_slots: 0,\n          description: '',\n          employees: [],\n          id: 0,\n          job_position: {id: 0, title: ''},\n          requirements: '',\n          serial_number: '',\n        },\n      ]);\n  };\n\n  const deleteSector = () => {\n    handleDeleteSector(deleteItemId);\n    setShowDeleteModal(false);\n    setDeleteItemId(0);\n  };\n\n  useEffect(() => {\n    if (selectedItemId) {\n      const jobPositions = sectors?.find((sector: any) => sector?.id === selectedItemId)?.job_positions;\n      setJobPositions(jobPositions);\n    }\n  }, [selectedItemId]);\n\n  return (\n    <SectorsWrapper>\n      {sectors?.map((sector: SectorType) => {\n        return (\n          <div key={`sector-${sector?.id}`} style={{position: 'relative'}}>\n            <Accordion\n              style={{border: 0, padding: 0, marginBottom: 20, display: 'block'}}\n              isOpen={isOpen === sector?.id ? true : false}\n              customHeader={\n                <AccordionHeader color={sector?.color}>\n                  <Typography\n                    variant=\"bodyMedium\"\n                    content={`${sector?.id}. ${sector?.title}`}\n                    style={{fontWeight: 600}}\n                  />\n                  <AccordionIconsWrapper isOpen={isOpen === sector?.id}>\n                    <ChevronDownIcon\n                      width=\"15px\"\n                      height=\"8px\"\n                      onClick={(e: any) => {\n                        e.stopPropagation();\n                        openAccordion(sector.id);\n                      }}\n                    />\n                    <MoreVerticalIcon\n                      width=\"5px\"\n                      height=\"16px\"\n                      onClick={(e: any) => {\n                        e.stopPropagation();\n                        showMenuHandler(sector.id);\n                      }}\n                      style={{padding: '10px'}}\n                    />\n                  </AccordionIconsWrapper>\n                  <Menu open={showMenu === sector?.id}>\n                    <MenuItem>\n                      <Typography\n                        content=\"Uredi\"\n                        variant=\"bodyMedium\"\n                        onClick={(e: any) => {\n                          e.stopPropagation();\n                          handleEditSector(sector.id);\n                          setShowMenu(0);\n                        }}\n                      />\n                    </MenuItem>\n                    <MenuItem>\n                      <Typography\n                        content=\"Dodaj radno mjesto\"\n                        variant=\"bodyMedium\"\n                        onClick={(e: any) => addJobPosition(e, sector)}\n                      />\n                    </MenuItem>\n                    <MenuItem>\n                      <Typography\n                        content=\"Obriši\"\n                        variant=\"bodyMedium\"\n                        onClick={(e: any) => {\n                          e.stopPropagation();\n                          setShowDeleteModal(true);\n                          setDeleteItemId(sector?.id);\n                          setShowMenu(0);\n                        }}\n                      />\n                    </MenuItem>\n                  </Menu>\n                </AccordionHeader>\n              }\n              content={\n                <JobPositionTable\n                  data={jobPositions || []}\n                  sectorID={sector?.id}\n                  systematizationID={systematizationID}\n                  refetch={availableSlotsChanged => refreshData && refreshData(availableSlotsChanged)}\n                  alert={context?.alert}\n                />\n              }\n            />\n          </div>\n        );\n      })}\n      <DeleteModal open={showDeleteModal} onClose={() => setShowDeleteModal(false)} handleDelete={deleteSector} />\n    </SectorsWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/systematizationDetails/systematizationDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'insertJobPosition' is assigned a value but never used.","line":47,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3640,3643],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3640,3643],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4213,4216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4213,4216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'counter' is assigned a value but never used.","line":115,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":115,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalJobPositions' is assigned a value but never used.","line":118,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":118,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4387,4390],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4387,4390],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'payload' is assigned a value but never used.","line":129,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":129,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7339,7342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7339,7342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":206,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7494,7497],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7494,7497],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {useEffect, useMemo, useState} from 'react';\nimport {StyledTabs} from '../../../components/employeeDetails/styles';\nimport {OverviewBox} from '../../../components/employeesList/styles';\nimport ScreenWrapper from '../../../shared/screenWrapper';\nimport {SystematizationDetailsPageProps} from '../types';\nimport {ButtonWrapper, Row, TitleWrapper} from './styles';\nimport {Typography, Divider, Theme, Button, Input, Dropdown} from 'client-library';\nimport {systematizationDetailsTabs} from '../constants';\nimport {Tab} from '@oykos-development/devkit-react-ts-styled-components';\nimport {Controller, FormProvider, useForm} from 'react-hook-form';\nimport useOrganizationUnits from '../../../services/graphql/organizationUnits/useOrganizationUnits';\nimport useSystematizationGetDetails from '../../../services/graphql/systematization/useSystematizationGetDetails';\nimport {Sectors} from './sectors';\nimport {Footer} from './footer';\nimport {PrintPage} from './printPage';\nimport {formatDataSaveSystematization} from '../utils';\nimport {OrganisationalUnitModal} from '../../../components/organizationUnitModal/organizationUnitModal';\nimport useDeleteOrganisationUnit from '../../../services/graphql/organizationUnits/useOrganizationUnitDelete';\nimport {SectorType} from '../../../types/graphql/systematizationsGetDetailsTypes';\nimport useSystematizationInsert from '../../../services/graphql/systematization/useSystematizationsInsert';\nimport useOrganizationUnitJobPositionInsert from '../../../services/graphql/organizationUnitsJobPositions/useOrganizationUnitInsertJobPosition';\n\nconst initialValues = {\n  organization_unit: {id: 0, value: ''},\n  user_profile_id: 0,\n  serial_number: '',\n  description: '',\n  active: false,\n  date_of_activation: '',\n  sectors: [],\n  file_id: 0,\n};\n\nexport const SystematizationDetails: React.FC<SystematizationDetailsPageProps> = ({context}) => {\n  const [activeTab, setActiveTab] = useState(1);\n  const onTabChange = (tab: Tab) => {\n    setActiveTab(tab.id as number);\n  };\n  const [showEditSectorModal, setShowEditSectorModal] = useState(false);\n  const systematizationID = context?.navigation?.location?.pathname.split('/')[4];\n  const {systematizationDetails, refetch: refreshData} = useSystematizationGetDetails(systematizationID);\n  const {organizationUnits} = useOrganizationUnits(context);\n  const [sectorId, setSectorId] = useState<number>(0);\n  const selectedSector = useMemo(() => {\n    return systematizationDetails?.sectors?.find((i: SectorType) => i.id === sectorId);\n  }, [sectorId]);\n  const {mutate: insertJobPosition} = useOrganizationUnitJobPositionInsert();\n\n  const organizationUnitsList = useMemo(() => {\n    return organizationUnits\n      .filter(i => !i.parent_id)\n      .map(unit => {\n        return {id: unit.id, title: unit.title};\n      });\n  }, [organizationUnits]);\n\n  const {\n    navigation: {navigate},\n  } = context;\n\n  const {mutate, success, error} = useSystematizationInsert(() => {\n    if (success) {\n      navigate('/hr/systematization');\n      context.alert.success('Uspješno sačuvano');\n      context.breadcrumbs.remove();\n    } else if (error) {\n      context.alert.error('Čuvanje nije uspješno');\n    }\n  });\n\n  const {\n    mutate: deleteSector,\n    success: deleteSuccess,\n    error: deleteError,\n  } = useDeleteOrganisationUnit(() => {\n    if (deleteSuccess) {\n      refreshData();\n      context.alert.success('Brisanje uspješno');\n    } else if (deleteError) {\n      context.alert.error('Dodavanje nije uspješno');\n    }\n  });\n\n  const methods = useForm({\n    defaultValues: systematizationDetails || initialValues,\n  });\n\n  const handleSave = (data: any) => {\n    const payload = formatDataSaveSystematization(data);\n    mutate(payload);\n  };\n\n  const handleCloseModal = (refetch: boolean, message: string) => {\n    setShowEditSectorModal(false);\n    if (refetch) {\n      refreshData();\n      context.alert.success(message);\n    } else {\n      if (!message) return;\n      context.alert.error(message);\n    }\n  };\n\n  const handleDeleteSector = (id: number) => {\n    deleteSector(id);\n  };\n\n  const editSector = (id: number) => {\n    setSectorId(id);\n    setShowEditSectorModal(true);\n  };\n\n  const setSerialNumbers = (data: any) => {\n    let start = 1;\n    const counter = 0;\n    const updatedData = {...data};\n\n    const totalJobPositions = updatedData.sectors.reduce(\n      (sum: number, sector: any) => sum + sector.job_positions.length,\n      0,\n    );\n\n    updatedData.sectors.forEach((sector: SectorType) => {\n      sector.job_positions.forEach(job_position => {\n        const available_slots = job_position.available_slots;\n        const end = start + available_slots - 1;\n        const serial_number = `${start}-${end}`;\n        start = end + 1;\n        const payload = {\n          id: job_position.id || 0,\n          available_slots: Number(job_position?.available_slots) || 1,\n          parent_job_position_id: 0,\n          job_position_id: job_position?.job_position?.id,\n          system_permission_id: 0,\n          description: job_position?.description,\n          requirements: job_position?.requirements,\n          icon: '',\n          systematization_id: updatedData?.id,\n          parent_organization_unit_id: sector?.id,\n          serial_number: serial_number,\n        };\n        //TODO Check if this is bff problem\n\n        // insertJobPosition(payload, () => {\n        //   counter++;\n        //   if (counter === totalJobPositions) {\n        //     refreshData();\n        //   }\n        // });\n      });\n    });\n  };\n\n  const refetchDataOnSectorChanged = (availableSlotsChanged?: boolean) => {\n    refreshData(res => {\n      if (availableSlotsChanged) {\n        setSerialNumbers(res);\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (systematizationDetails) {\n      methods.reset(systematizationDetails);\n    }\n  }, [systematizationDetails]);\n\n  return (\n    <ScreenWrapper context={context}>\n      <OverviewBox>\n        <FormProvider {...methods}>\n          <TitleWrapper>\n            <Typography\n              style={{fontWeight: 600}}\n              variant=\"bodyMedium\"\n              content={systematizationDetails?.organization_unit?.title?.toUpperCase() || ''}\n            />\n            <StyledTabs\n              tabs={systematizationDetailsTabs}\n              activeTab={activeTab}\n              onChange={onTabChange}\n              //TODO: change in devkit/library\n              style={{borderWidth: '1px', borderRadius: '0.5em 0.5em 0 0', whiteSpace: 'nowrap'}}\n            />\n          </TitleWrapper>\n          <Divider color={Theme?.palette?.gray200} height=\"1px\" style={{margin: 0}} />\n          {activeTab === 1 ? (\n            <div>\n              <Row>\n                <Input\n                  {...methods?.register('serial_number', {required: 'Ovo polje je obavezno'})}\n                  label=\"BROJ SISTEMATIZACIJE:\"\n                  error={methods?.formState?.errors.serial_number?.message as string}\n                />\n                <Controller\n                  name=\"organization_unit\"\n                  control={methods?.control}\n                  rules={{required: 'Ovo polje je obavezno'}}\n                  render={({field: {onChange, name, value}}) => {\n                    return (\n                      <Dropdown\n                        onChange={onChange}\n                        value={value as any}\n                        name={name}\n                        label=\"ORGANIZACIONA JEDINICA:\"\n                        options={organizationUnitsList as any}\n                        isDisabled={systematizationDetails?.organization_unit?.id}\n                        error={methods?.formState?.errors.organization_unit?.message as string}\n                      />\n                    );\n                  }}\n                />\n              </Row>\n              <Input\n                {...methods?.register('description', {required: 'Ovo polje je obavezno'})}\n                label=\"OPIS:\"\n                error={methods?.formState?.errors.description?.message as string}\n                textarea\n              />\n              <ButtonWrapper>\n                <Button variant=\"secondary\" content=\"Dodaj odjel\" onClick={() => setShowEditSectorModal(true)} />\n              </ButtonWrapper>\n              <Sectors\n                sectors={systematizationDetails?.sectors}\n                handleDeleteSector={id => handleDeleteSector(id)}\n                systematizationID={systematizationDetails?.id}\n                refreshData={availableSlotsChanged => refetchDataOnSectorChanged(availableSlotsChanged)}\n                handleEditSector={(id: number) => editSector(id)}\n                context={context}\n              />\n            </div>\n          ) : (\n            <PrintPage sectorDetails={systematizationDetails?.sectors} />\n          )}\n\n          <Footer activeTab={activeTab} handleSaveButton={methods?.handleSubmit(handleSave)} />\n        </FormProvider>\n        {showEditSectorModal && (\n          <OrganisationalUnitModal\n            open={showEditSectorModal}\n            onClose={(refetch: boolean, message: string) => {\n              handleCloseModal(refetch, message);\n            }}\n            organizationUnit={systematizationDetails?.organization_unit}\n            selectedItem={selectedSector}\n          />\n        )}\n      </OverviewBox>\n    </ScreenWrapper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[553,556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[553,556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[613,616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[613,616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {SectorType} from '../../types/graphql/systematizationsGetDetailsTypes';\nimport {MicroserviceProps} from '../../types/micro-service-props';\n\nexport interface SystematizationDetailsPageProps {\n  context: MicroserviceProps;\n}\n\nexport interface SectorsProps {\n  sectors: SectorType[];\n  handleDeleteSector: (id: number) => void;\n  handleEditSector: (id: number) => void;\n  systematizationID: number;\n  refreshData?: (availableSlotsChanged?: boolean) => void;\n  context?: MicroserviceProps;\n}\n\nexport interface SystematizationFiltersProps {\n  data?: any;\n  context?: MicroserviceProps;\n  setFilters: (filters: any) => void;\n}\n\nexport interface PrintPageProps {\n  sectorDetails: SectorType[];\n}\n\nexport interface FooterProps {\n  activeTab: number;\n  handleSaveButton: () => void;\n}\n\nexport interface SectorModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/screens/systematization/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[102,105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[102,105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[600,603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[600,603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {parseDate} from '../../utils/dateUtils';\n\nexport const formatDataSaveSystematization = (data: any) => {\n  const payload = {\n    ...data,\n    id: data?.id || 0,\n    user_profile_id: data?.user_profile_id || 1,\n    organization_unit_id: data?.organization_unit?.id,\n    date_of_activation: data?.date_of_activation ? parseDate(data?.date_of_activation, true) : '',\n    file_id: data?.file_id || 0,\n  };\n\n  delete payload.organization_unit;\n  delete payload.sectors;\n  delete payload.created_at;\n  delete payload.updated_at;\n\n  return payload;\n};\n\nexport const formatDataAddJobPosition = (data: any) => {\n  const payload = {\n    ...data,\n    id: data?.id || 0,\n    available_slots: Number(data?.available_slots?.value) || 1,\n    parent_job_position_id: 0,\n    job_position_id: data?.job_position?.id,\n    system_permission_id: 0,\n    description: data?.job_position?.description,\n    requirements: data?.job_position?.requirements,\n    icon: '',\n  };\n\n  delete payload.employees;\n  delete payload.job_position;\n\n  return payload;\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/get-environment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/foreignerPermitDelete.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[87,90],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[87,90],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {GraphQL} from '..';\n\nconst foreignerPermitDelete = async (id: number): Promise<any> => {\n  const response = await GraphQL.fetch(`mutation {\n    userProfile_Foreigner_Delete(id: ${id}) {\n        message\n        status\n    }\n}`);\n\n  return response.data?.userProfile_Foreigner_Delete || {};\n};\n\nexport default foreignerPermitDelete;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/foreignerPermitInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/foreignerPermitOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/useForeignerPermitDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/useForeignerPermitInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/foreignerPermits/useForeignerPermitOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[243,246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[243,246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[386,389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[386,389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nconst useForeignerPermitOverview = (user_profile_id: number) => {\n  const [data, setData] = useState<any>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchForeignerPermits = async () => {\n    const foreignerPermits: any = await GraphQL.foreignerPermits(user_profile_id);\n    setData(foreignerPermits);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchForeignerPermits();\n  }, [user_profile_id]);\n\n  return {data, loading, refetch: fetchForeignerPermits};\n};\n\nexport default useForeignerPermitOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'employees' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4677,4680],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4677,4680],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4691,4694],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4691,4694],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {getEnvironment} from '../get-environment';\nimport employees from './userProfile/userProfileOverview';\nimport organizationUnits from './organizationUnits/organizationUnitOverview';\nimport foreignerPermitDelete from './foreignerPermits/foreignerPermitDelete';\nimport foreignerPermitInsert from './foreignerPermits/foreignerPermitInsert';\nimport foreignerPermits from './foreignerPermits/foreignerPermitOverview';\nimport jobPositionsGet from './jobPositions/jobPositionOverview';\nimport jobPositionInOrganizationUnitInsert from './organizationUnitsJobPositions/jobPositionInOrganizationUnitInsert';\nimport employeeInOrganizationUnitInsert from './organizationUnitsEmployees/employeeInOrganizationUnitInsert';\nimport employeeInOrganizationUnitDelete from './organizationUnitsEmployees/employeeInOrganizationUnitDelete';\nimport jobPositionInOrganizationUnitDelete from './organizationUnitsJobPositions/jobPositionInOrganizationUnitDelete';\nimport basicInfoGet from './userProfile/basicInfo/basicInfoGet';\nimport basicInfoInsert from './userProfile/basicInfo/basicInfoInsert';\nimport experienceOverview from './userProfile/experience/experienceOverview';\nimport experienceInsert from './userProfile/experience/experienceInsert';\nimport experienceDelete from './userProfile/experience/experienceDelete';\nimport educationOverview from './userProfile/education/educationOverview';\nimport educationDelete from './userProfile/education/educationDelete';\nimport educationInsert from './userProfile/education/educationInsert';\nimport familyInsert from './userProfile/family/familyinsert';\nimport familyOverview from './userProfile/family/familyOverview';\nimport familyDelete from './userProfile/family/familyDelete';\nimport salaryParamsInsert from './userProfile/salaryParams/salarayParamsInsert';\nimport salaryParamsOverview from './userProfile/salaryParams/salaryParamsOverview';\nimport evaluationDelete from './userProfile/evaluation/evaluationDelete';\nimport evaluationInsert from './userProfile/evaluation/evaluationInsert';\nimport evaluationOverview from './userProfile/evaluation/evalutationOverview';\nimport resolutionDelete from './userProfile/resolution/resolutionDelete';\nimport resolutionInsert from './userProfile/resolution/resolutionInsert';\nimport resolutionOverview from './userProfile/resolution/resolutionOverview';\nimport absentDelete from './userProfile/absents/absentDelete';\nimport absentInsert from './userProfile/absents/absentInsert';\nimport absentOverview from './userProfile/absents/absentOverview';\nimport judgeOverview from './judges/judgeOverview';\nimport judgeNormDelete from './judges/judgeNormDelete';\nimport judgeNormInsert from './judges/judgeNormInsert';\nimport judgeResolutionDelete from './judges/judgeResolutionDelete';\nimport judgeResolutionInsert from './judges/judgeResolutionInsert';\nimport judgeResolutionOverview from './judges/judgeResolutionOverview';\nimport organizationUnitInsert from './organizationUnits/organizationUnitInsert';\nimport organizationUnitDelete from './organizationUnits/organizationUnitDelete';\nimport jobTenderApplicationDelete from './jobTenders/jobTenderApplicationDelete';\nimport jobTenderInsert from './jobTenders/jobTenderInsert';\nimport jobPositionSearch from './jobPositions/jobPositionsSearch';\nimport jobTenderTypesSearch from './jobTenderTypes/jobTenderTypesSearch';\nimport revisionDelete from './internalRevision/revisionDelete';\nimport revisionDetails from './internalRevision/revisionDetails';\nimport revisionInsert from './internalRevision/revisionInsert';\nimport revisionOverview from './internalRevision/revisionOverview';\nimport jobTenderDelete from './jobTenders/jobTenderDelete';\nimport jobTenderOverview from './jobTenders/jobTenderOverview';\nimport jobTenderApplicationOverview from './jobTenders/jobTenderApplicationOverview';\nimport jobTenderApplicationInsert from './jobTenders/jobTenderApplicationInsert';\nimport jobTenderDetails from './jobTenders/jobTenderDetails';\nimport systematizationDetails from './systematization/systematizationDetails';\nimport systematizationOverview from './systematization/systematizationOverview';\nimport systematizationInsert from './systematization/systematizationsInsert';\nimport systematizationDelete from './systematization/systematizationsDelete';\nimport userProfileOverview from './userProfile/userProfileOverview';\nimport jobPositionsOrganizationUnit from './jobPositions/jobPositionsOrganizationUnit';\n\nexport const BFF_URL = {\n  local: 'http://localhost:8080',\n  development: 'https://sss-erp-bff.oykos.me',\n  staging: 'http://localhost:8080',\n  production: 'http://localhost:8080',\n};\n\nexport const GraphQL = {\n  fetch: (query: string, variables?: any): Promise<any> => {\n    return fetch(BFF_URL[getEnvironment()], {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({query, variables}),\n    })\n      .then(response => response.json())\n      .catch(error => console.error(error));\n  },\n  organizationUnits: organizationUnits,\n  basicInfoGet: basicInfoGet,\n  basicInfoInsert: basicInfoInsert,\n  experienceOverview: experienceOverview,\n  experienceInsert: experienceInsert,\n  experienceDelete: experienceDelete,\n  userProfileOverview: userProfileOverview,\n  jobTenderOverview: jobTenderOverview,\n  jobTenderDelete: jobTenderDelete,\n  jobTenderApplicationDelete: jobTenderApplicationDelete,\n  jobTenderInsert: jobTenderInsert,\n  jobPositionSearch: jobPositionSearch,\n  jobTenderTypesSearch: jobTenderTypesSearch,\n  jobTenderApplicationOverview: jobTenderApplicationOverview,\n  jobTenderApplicationInsert: jobTenderApplicationInsert,\n  foreignerPermits: foreignerPermits,\n  educationOverview: educationOverview,\n  educationInsert: educationInsert,\n  educationDelete: educationDelete,\n  familyOverview: familyOverview,\n  familyInsert: familyInsert,\n  familyDelete: familyDelete,\n  foreignerPermitDelete: foreignerPermitDelete,\n  foreignerPermitInsert: foreignerPermitInsert,\n  systematizationOverview: systematizationOverview,\n  systematizationInsert: systematizationInsert,\n  systematizationDetails: systematizationDetails,\n  systematizationDelete: systematizationDelete,\n  salaryParamsInsert: salaryParamsInsert,\n  salaryParamsOverview: salaryParamsOverview,\n  jobPositionsGet: jobPositionsGet,\n  jobPositionsOrganizationUnit: jobPositionsOrganizationUnit,\n  resolutionOverview: resolutionOverview,\n  resolutionInsert: resolutionInsert,\n  resolutionDelete: resolutionDelete,\n  evaluationOverview: evaluationOverview,\n  evaluationInsert: evaluationInsert,\n  evaluationDelete: evaluationDelete,\n  revisionOverview: revisionOverview,\n  revisionDetails: revisionDetails,\n  revisionDelete: revisionDelete,\n  revisionInsert: revisionInsert,\n  organizationUnitInsert: organizationUnitInsert,\n  organizationUnitDelete: organizationUnitDelete,\n  jobPositionInOrganizationUnitInsert: jobPositionInOrganizationUnitInsert,\n  jobPositionInOrganizationUnitDelete: jobPositionInOrganizationUnitDelete,\n  employeeInOrganizationUnitInsert: employeeInOrganizationUnitInsert,\n  employeeInOrganizationUnitDelete: employeeInOrganizationUnitDelete,\n  absentOverview: absentOverview,\n  absentInsert: absentInsert,\n  absentDelete: absentDelete,\n  judgeOverview: judgeOverview,\n  judgeNormDelete: judgeNormDelete,\n  judgeNormInsert: judgeNormInsert,\n  judgeResolutionDelete: judgeResolutionDelete,\n  judgeResolutionInsert: judgeResolutionInsert,\n  judgeResolutionOverview: judgeResolutionOverview,\n  jobTenderDetails: jobTenderDetails,\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/internalRevision/revisionDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/internalRevision/revisionDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/internalRevision/revisionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/internalRevision/revisionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/internalRevision/useRevision.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[221,224],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[221,224],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[441,444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[441,444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\n\nconst initialState = {item: {}, total: 0, message: '', status: ''};\n\nconst useRevisionDetails = (id: number) => {\n  const [data, setData] = useState<any>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchInternalRevisionDetails = async () => {\n    if (!id) {\n      setData({items: []});\n      return;\n    }\n    const internalRevisionDetails: any = await GraphQL.revisionDetails(id);\n    setData(internalRevisionDetails);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchInternalRevisionDetails();\n  }, [id]);\n\n  return {data, loading, refetch: fetchInternalRevisionDetails};\n};\n\nexport default useRevisionDetails;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/internalRevision/useRevisionDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/internalRevision/useRevisionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/internalRevision/useRevisionOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[395,398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[395,398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[538,541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[538,541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {InternalRevisionsParams} from '../../../types/graphql/internalRevision';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nconst useRevisionOverview = ({\n  page,\n  size,\n  id,\n  organization_unit_id,\n  revisor_user_profile_id,\n}: InternalRevisionsParams) => {\n  const [data, setData] = useState<any>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchInternalRevision = async () => {\n    const internalRevision: any = await GraphQL.revisionOverview(\n      page,\n      size,\n      id,\n      organization_unit_id,\n      revisor_user_profile_id,\n    );\n    setData(internalRevision);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchInternalRevision();\n  }, [page, size, id, organization_unit_id, revisor_user_profile_id]);\n\n  return {data, loading, refetch: fetchInternalRevision};\n};\n\nexport default useRevisionOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/jobPositionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/jobPositionsOrganizationUnit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/jobPositionsSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/useJobPositionOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[230,233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[230,233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[365,368],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[365,368],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nconst useJobPositionOverview = (search: string) => {\n  const [data, setData] = useState<any>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchJobPositions = async () => {\n    const jobPositions: any = await GraphQL.jobPositionsGet(search);\n    setData(jobPositions);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchJobPositions();\n  }, [search]);\n\n  return {data, loading, refetch: fetchJobPositions};\n};\n\nexport default useJobPositionOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/useJobPositionsOrganizationUnit.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[488,491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[488,491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {JobPositionResponse} from '../../../types/graphql/useJobPositions';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nconst useJobPositionsOrganizationUnit = (organization_unit_id?: number) => {\n  const [positions, setData] = useState<JobPositionResponse>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchJobTenderTypes = async () => {\n    const jobPositions: any = await GraphQL.jobPositionsOrganizationUnit(organization_unit_id);\n    setData(jobPositions);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchJobTenderTypes();\n  }, [organization_unit_id]);\n\n  return {positions, loading};\n};\n\nexport default useJobPositionsOrganizationUnit;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/useJobPositionsSearch.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[462,465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[462,465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {JobPositionResponse} from '../../../types/graphql/useJobPositions';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nconst useJobPositionSearch = (search: string) => {\n  const [positions, setData] = useState<JobPositionResponse>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchJobTenderTypes = async () => {\n    const jobPositions: any = await GraphQL.jobPositionSearch(search);\n    setData(jobPositions);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchJobTenderTypes();\n  }, [search]);\n\n  return {positions, loading};\n};\n\nexport default useJobPositionSearch;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobPositions/useJobTendersTypesSearch.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[692,695],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[692,695],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useMemo, useState} from 'react';\nimport {GraphQL} from '..';\nimport {JobTenderTypeResponse} from '../../../types/graphql/useJobTendersTypes';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nconst useJobTendersTypesSearch = (search: string) => {\n  const [types, setData] = useState<JobTenderTypeResponse>(initialState);\n  const [loading, setLoading] = useState(true);\n  const typesUnitsList = useMemo(() => {\n    return [\n      {id: 0, title: 'Sve tpovi oglasa'},\n      ...types.items.map(unit => {\n        return {id: unit.id, title: unit.title};\n      }),\n    ];\n  }, [types]);\n\n  const fetchJobTenderTypes = async () => {\n    const jobTenderTypes: any = await GraphQL.jobTenderTypesSearch(search);\n    setData(jobTenderTypes);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchJobTenderTypes();\n  }, [search]);\n\n  return {types, typesUnitsList, loading};\n};\n\nexport default useJobTendersTypesSearch;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenderTypes/jobTenderTypesSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderApplicationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderApplicationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderApplicationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderInsert.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[242,245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[242,245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'data' is never reassigned. Use 'const' instead.","line":36,"column":3,"nodeType":"Identifier","messageId":"useConst","endLine":36,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {GraphQL} from '..';\nimport {JobTender, JobTendersResponse} from '../../../types/graphql/jobTenders';\n\nconst jobTenderInsert = async (dataJobTender: JobTender): Promise<JobTendersResponse['data']['jobTenders_Insert']> => {\n  let data: any;\n  const mutation = `mutation($data: JobTenderInsertMutation!) {\n      jobTenders_Insert(data: $data) {\n          message\n          status\n          item {\n              id\n              organization_unit {\n                  id\n                  title\n              }\n              job_position {\n                  id\n                  title\n              }\n              type {\n                  id\n                  title\n              }\n              description\n              serial_number\n              available_slots\n              active\n              date_of_start\n              date_of_end\n              created_at\n              updated_at\n              file_id\n          }\n      }\n  }`;\n  data = {\n    id: dataJobTender?.id,\n    position_in_organization_unit_id: dataJobTender.job_position?.id,\n    type: dataJobTender?.type_tender?.id,\n    description: '',\n    serial_number: dataJobTender.serial_number,\n    available_slots: dataJobTender.available_slots ? dataJobTender.available_slots : 1,\n    active: dataJobTender.active,\n    date_of_start: dataJobTender.date_of_start,\n    date_of_end: dataJobTender.date_of_end,\n    file_id: dataJobTender.file_id,\n  };\n  if (dataJobTender.id > 0) data.id = dataJobTender.id;\n  const response = await GraphQL.fetch(mutation, {data});\n  return response?.data?.jobTenders_Insert || {};\n};\n\nexport default jobTenderInsert;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/jobTenderOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'type' is assigned a value but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":7}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {JobTendersResponse} from '../../../types/graphql/jobTenders';\nimport {GraphQL} from '../index';\n\ninterface UseJobTendersParams {\n  page: number;\n  size: number;\n  id: number;\n  active: boolean;\n  organization_unit_id: number;\n  type: string;\n}\n\nconst jobTenderOverview = async ({\n  page,\n  size,\n  id = 0,\n  active = true,\n  organization_unit_id = 0,\n  type = '',\n}: UseJobTendersParams): Promise<{data: JobTendersResponse['data']['jobTenders_Overview']}> => {\n  const query = `query JobTendersOverview($id: Int, $page: Int!, $size: Int!, $organization_unit_id: Int, $active: Boolean) {\n      jobTenders_Overview(\n          id: $id,\n          page: $page, \n          size: $size, \n          organization_unit_id: $organization_unit_id,\n          active: $active\n          ) {\n          message\n          status\n          total\n          items {\n              id\n              organization_unit {\n                  id\n                  title\n              }\n              job_position {\n                  id\n                  title\n              }\n              type {\n                  id\n                  title\n              }\n              description\n              serial_number\n              available_slots\n              active\n              date_of_start\n              date_of_end\n              created_at\n              updated_at\n              file_id\n          }\n      }\n  }`;\n\n  const response = await GraphQL.fetch(query, {id, page, size, organization_unit_id, active});\n\n  return response?.data?.jobTenders_Overview || {};\n};\n\nexport default jobTenderOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTender.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[223,226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[223,226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[353,356],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[353,356],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nconst useJobTenderDetails = (id: number) => {\n  const [data, setData] = useState<any>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchJobTender = async () => {\n    const jobTenders: any = await GraphQL.jobTenderDetails({\n      id,\n    });\n    setData(jobTenders.items[0]);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchJobTender();\n  }, [id]);\n\n  return {data, loading, refreshData: fetchJobTender};\n};\n\nexport default useJobTenderDetails;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderApplicationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderApplicationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderApplicationOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[371,374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[371,374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[524,527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[524,527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {JobTenderApplicationsParams} from '../../../types/graphql/jobTenders';\nimport {GraphQL} from '..';\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nconst useJobTenderApplicationOverview = ({page, size, id = 0, job_tender_id = 0}: JobTenderApplicationsParams) => {\n  const [data, setData] = useState<any>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchJobTenderApplications = async () => {\n    const jobTenderApplications: any = await GraphQL.jobTenderApplicationOverview({\n      page,\n      size,\n      id,\n      job_tender_id,\n    });\n    setData(jobTenderApplications);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchJobTenderApplications();\n  }, [page, size, id, job_tender_id]);\n\n  return {data, loading, refreshData: fetchJobTenderApplications};\n};\n\nexport default useJobTenderApplicationOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/jobTenders/useJobTenderOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[720,723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[720,723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {JobTendersListFilters} from '../../../screens/jobTenders';\nimport {JobTendersResponse} from '../../../types/graphql/jobTenders';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\nexport interface UseJobTendersParams extends JobTendersListFilters {\n  id?: number;\n  page: number;\n  size: number;\n}\n\nconst useJobTenderOverview = ({page, size, id, organization_unit_id, active, type}: UseJobTendersParams) => {\n  const [data, setData] = useState<JobTendersResponse['data']['jobTenders_Overview']>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchJobTenders = async () => {\n    const jobTenders: any = await GraphQL.jobTenderOverview({\n      page,\n      size,\n      id: id ? id : 0,\n      organization_unit_id: organization_unit_id ? organization_unit_id.id : 0,\n      active: active ? active.id : true,\n      type: type?.id ? type.title.toString() : '',\n    });\n    setData(jobTenders);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchJobTenders();\n  }, [page, size, id, active, organization_unit_id, type]);\n\n  return {data, loading, refreshData: fetchJobTenders};\n};\n\nexport default useJobTenderOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeNormDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeNormInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeResolutionDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeResolutionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/judgeResolutionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeNormDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeNormInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeResolutionDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeResolutionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/judges/useJudgeResolutionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnits/organizationUnitDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnits/organizationUnitInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnits/organizationUnitOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnits/useOrganizationUnitDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnits/useOrganizationUnitInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnits/useOrganizationUnits.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[256,259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[256,259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useMemo, useState} from 'react';\nimport {GraphQL} from '..';\nimport {OrganizationUnit} from '../../../types/graphql/organizationUnitsTypes';\nimport {REQUEST_STATUSES} from '../../constants';\n\nconst useOrganizationUnitOverview = (props?: any) => {\n  const [organizationUnits, setOrganizationUnits] = useState<OrganizationUnit[]>([]);\n  const organizationUnitsList = useMemo(() => {\n    return [\n      {id: 0, title: 'Sve organizacione jedinice'},\n      ...organizationUnits.map(unit => {\n        return {id: unit.id, title: unit.title};\n      }),\n    ];\n  }, [organizationUnits]);\n\n  const fetchOrganizationUnits = async () => {\n    GraphQL?.organizationUnits().then(response => {\n      if (response?.status === REQUEST_STATUSES.success) {\n        delete response.message;\n        delete response.status;\n        setOrganizationUnits(response.items as OrganizationUnit[]);\n      } else {\n        alert(`Login failed due to error - ${response.message}`);\n      }\n    });\n  };\n\n  useEffect(() => {\n    fetchOrganizationUnits();\n  }, [props]);\n\n  return {organizationUnits, organizationUnitsList, fetch: fetchOrganizationUnits};\n};\n\nexport default useOrganizationUnitOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsEmployees/employeeInOrganizationUnitDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsEmployees/employeeInOrganizationUnitInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsEmployees/useOrganizationUnitEmployeeDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsEmployees/useOrganizationUnitEmployeeInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsJobPositions/jobPositionInOrganizationUnitDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsJobPositions/jobPositionInOrganizationUnitInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsJobPositions/useOrganizationUnitDeleteJobPosition.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/organizationUnitsJobPositions/useOrganizationUnitInsertJobPosition.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/systematizationDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/systematizationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/systematizationsDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/systematizationsInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/useSystematizationGetDetails.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[159,162],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[159,162],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[278,281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[278,281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\n\nconst useSystematizationDetails = (id: number) => {\n  const [data, setData] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  const getSystematizationDetails = async (onSuccess?: (item: any) => void) => {\n    const response = await GraphQL.systematizationDetails(id);\n    //Ask filip if we need array of items here\n    const data = response?.item || null;\n\n    setData(data);\n    setLoading(false);\n    onSuccess && onSuccess(data);\n  };\n\n  useEffect(() => {\n    getSystematizationDetails();\n  }, [id]);\n\n  return {systematizationDetails: data, loading, refetch: getSystematizationDetails};\n};\n\nexport default useSystematizationDetails;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/useSystematizations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[467,470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[467,470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {SystematizationsParams, SystematizationType} from '../../../types/graphql/systematizationsTypes';\n\nconst useSystematizationOverview = ({page, size, id, organization_unit_id}: SystematizationsParams) => {\n  const [data, setData] = useState<SystematizationType[]>();\n  const [loading, setLoading] = useState(true);\n\n  const fetchSystematizations = async () => {\n    const systematizations: any = await GraphQL.systematizationOverview({\n      page,\n      size,\n      id,\n      organization_unit_id,\n    });\n\n    setData(systematizations?.items);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchSystematizations();\n  }, [page, size, id, organization_unit_id]);\n\n  return {data, loading, refetch: fetchSystematizations};\n};\n\nexport default useSystematizationOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/useSystematizationsDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/systematization/useSystematizationsInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/absentDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/absentInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/absentOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/useAbsentDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/useAbsentInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/absents/useAbsentOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/basicInfo/basicInfoGet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/basicInfo/basicInfoInsert.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserProfileBasicInfo' is defined but never used.","line":3,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {GraphQL} from '../..';\nimport {UserProfileInsertBasicInfoResponse} from '../../../../types/graphql/userProfileInsertBasicInfo';\nimport {UserProfileBasicInfo, UserProfileBasicInfoFormValues} from '../../../../types/graphql/userProfiles';\n\nconst basicInfoInsert = async (\n  data: UserProfileBasicInfoFormValues,\n): Promise<UserProfileInsertBasicInfoResponse['data']['userProfile_Basic_Insert']> => {\n  const mutation = `mutation($data: UserProfileBasicInsertMutation!) {\n    userProfile_Basic_Insert(data: $data) {\n        message\n        status\n        item {\n            id\n            first_name\n            last_name\n            date_of_birth\n            birth_last_name\n            country_of_birth\n            city_of_birth\n            nationality\n            citizenship\n            address\n            father_name\n            mother_name\n            mother_birth_last_name\n            bank_account\n            bank_name\n            official_personal_id\n            official_personal_document_number\n            official_personal_document_issuer\n            gender\n            single_parent\n            housing_done\n            housing_description\n            revisor_role\n            marital_status\n            date_of_taking_oath\n            date_of_becoming_judge\n            email\n            phone\n            position_in_organization_unit_id\n            organization_unit {\n                id\n                title\n            }\n            job_position {\n                id\n                title\n            }\n            contracts {\n                id\n                user_profile_id\n                contract_type_id\n                abbreviation\n                description\n                active\n                serial_number\n                net_salary\n                gross_salary\n                bank_account\n                bank_name\n                date_of_signature\n                date_of_eligibility\n                date_of_start\n                date_of_end\n                file_id\n                contract_type {\n                    id\n                    title\n                    abbreviation\n                    description\n                    color\n                    icon\n                    created_at\n                    updated_at\n                }\n                created_at\n                updated_at\n            }\n        }\n    }\n}\n`;\n\n  const response = await GraphQL.fetch(mutation, {data});\n\n  return response?.data?.userProfile_Basic_Insert || {};\n};\n\nexport default basicInfoInsert;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/basicInfo/useBasicInfoGet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/basicInfo/useBasicInfoInsert.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserProfileBasicInfo' is defined but never used.","line":3,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useState} from 'react';\nimport {GraphQL} from '../..';\nimport {UserProfileBasicInfo, UserProfileBasicInfoFormValues} from '../../../../types/graphql/userProfiles';\n\nconst useBasicInfoInsert = () => {\n  const [loading, setLoading] = useState(false);\n\n  const insertBasicInfo = async (\n    data: UserProfileBasicInfoFormValues,\n    onSuccess?: () => void,\n    onError?: () => void,\n  ) => {\n    setLoading(true);\n    const response = await GraphQL.basicInfoInsert(data);\n    if (response.status === 'success') {\n      onSuccess && onSuccess();\n    } else {\n      onError && onError();\n    }\n    setLoading(false);\n  };\n\n  return {loading, mutate: insertBasicInfo};\n};\n\nexport default useBasicInfoInsert;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/educationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/educationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/educationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/useEducationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/useEducationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/education/useEducationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/evaluationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/evaluationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/evalutationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/useEvaluationDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/useEvaluationInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/evaluation/useEvaluationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/experienceDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/experienceInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/experienceOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/useExperienceDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/useExperienceInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/experience/useExperienceOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/familyDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/familyOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/familyinsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/useFamilyDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/useFamilyInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/family/useFamilyOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/resolutionDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/resolutionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/resolutionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/useResolutionDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/useResolutionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/resolution/useResolutionOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/salaryParams/salarayParamsInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/salaryParams/salaryParamsOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/salaryParams/useSalaryParamsOverview.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[176,179],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[176,179],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '../..';\n\nconst useSalaryParamsOverview = (id: number) => {\n  const [salaryParams, setSalaryParams] = useState<any>();\n  const [loading, setLoading] = useState(true);\n\n  const fetchSalaryParams = async () => {\n    const response = await GraphQL.salaryParamsOverview(id);\n\n    if (response) {\n      setSalaryParams(response);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchSalaryParams();\n  }, [id]);\n\n  return {data: salaryParams, loading, refetch: fetchSalaryParams};\n};\n\nexport default useSalaryParamsOverview;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/salaryParams/useSalaryParamsinsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/useUserProfiles.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[785,788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[785,788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useEffect, useState} from 'react';\nimport {GraphQL} from '..';\nimport {UserProfileResponse} from '../../../types/graphql/userProfiles';\nimport {EmployeeListFilters} from '../../../screens/employees';\nimport {PaginationProps} from '../../../types/paginationParams';\n\nconst initialState = {items: [], total: 0, message: '', status: ''};\n\ninterface UserProfileHookParams extends EmployeeListFilters, PaginationProps {\n  id?: number;\n  name?: string;\n}\n\nconst useUserProfiles = ({\n  page,\n  size,\n  id,\n  is_active,\n  job_position_id,\n  organization_unit_id,\n  name,\n}: UserProfileHookParams) => {\n  const [data, setData] = useState<UserProfileResponse>(initialState);\n  const [loading, setLoading] = useState(true);\n\n  const fetchEmployees = async () => {\n    const userProfiles: any = await GraphQL.userProfileOverview({\n      page,\n      size,\n      id: id ?? 0,\n      is_active: is_active ? is_active.id : true,\n      job_position_id: job_position_id ? job_position_id.id : 0,\n      organization_unit_id: organization_unit_id ? organization_unit_id.id : 0,\n      name: name ?? '',\n    });\n    setData(userProfiles);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchEmployees();\n  }, [page, size, id, is_active, job_position_id, organization_unit_id, name]);\n\n  return {data, loading, refetch: fetchEmployees};\n};\n\nexport default useUserProfiles;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/services/graphql/userProfile/userProfileOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/alertWrapper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/deleteModal/deleteModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/deleteModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/deleteModal/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[74,77],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[74,77],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[114,117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[114,117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[146,149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[146,149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface DeleteModalProps {\n  open: boolean;\n  onClose: (action?: any) => void;\n  handleDelete: (action?: any) => void;\n  customContent?: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/infoPreview/infoPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/infoPreview/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/mainTitle.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/screenWrapper.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[483,486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[483,486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[978,981],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[978,981],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {ReactNode, ReactElement} from 'react';\nimport {Breadcrumbs} from 'client-library';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  background-color: #f8f8f8;\n  padding: 28px 40px;\n  height: calc(100vh - 157px);\n  overflow-y: auto;\n  box-sizing: border-box;\n\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nconst StyledBreadcrumbs = styled(Breadcrumbs)`\n  padding: 0;\n  margin: 0;\n`;\n\nconst ScreenWrapper: React.FC<{children: ReactNode; context: any}> = ({children, context}) => {\n  const breadcrumbs = context?.breadcrumbs;\n  const breadcrumbItems = breadcrumbs?.get();\n  const navigate = context?.navigation?.navigate;\n\n  const handleNavigation = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | undefined,\n    item?: {\n      name: string;\n      to: string;\n      icon?: ReactElement;\n    },\n  ) => {\n    e?.preventDefault();\n    const newBreacrumbs = [...breadcrumbItems];\n    const index = newBreacrumbs.findIndex((breadcrumb: any) => breadcrumb.name === item?.name);\n    newBreacrumbs.splice(index + 1, newBreacrumbs.length - index);\n    breadcrumbs.set(newBreacrumbs);\n    navigate(item?.to);\n  };\n  return (\n    <Container>\n      <StyledBreadcrumbs items={breadcrumbItems} onClick={handleNavigation} />\n      {children}\n    </Container>\n  );\n};\n\nexport default ScreenWrapper;\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/shared/sectionBox.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/dropdownData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/environment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/ProfileResolutionInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/employeeInOrganizationUnitTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/foreignerPermits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/internalRevision.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/jobPositionInOrganizationUnitInsertTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/jobPositions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/jobTenders.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[765,768],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[765,768],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[780,783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[780,783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {ModalProps} from '../../screens/employees/education/types';\n\nimport {JobTenderType} from './useJobTendersTypes';\n\nexport interface DropdownItemType {\n  id: number;\n  title: string;\n}\n\nexport interface JobTender {\n  id: number;\n  organization_unit: DropdownItemType;\n  type_tender?: DropdownItemType;\n  type?: DropdownItemType;\n  description: string;\n  serial_number: string;\n  available_slots: number;\n  active: boolean;\n  date_of_start: string;\n  date_of_end: string;\n  created_at?: string;\n  updated_at?: string;\n  file_id: number;\n  job_position?: DropdownItemType;\n}\n\nexport interface JobTendersModal extends ModalProps {\n  dropdownJobTenderType: JobTenderType[];\n  jobPositionOrganizationUnitsList: {id: number; title: string}[];\n  onClose: (refetch?: any, message?: any) => void;\n}\n\nexport interface JobTenderApplication {\n  id: number;\n  status: string;\n  job_tender: DropdownItemType | null;\n  user_profile: DropdownItemType | null;\n  type: 'external' | 'internal';\n  first_name: string;\n  last_name: string;\n  official_personal_id: string;\n  date_of_birth: string;\n  nationality: string;\n  evaluation: string;\n  date_of_application: string;\n  created_at: string;\n  updated_at: string;\n  file_id: number;\n}\n\nexport interface JobTenderApplicationInsertParams\n  extends Omit<JobTenderApplication, 'job_tender' | 'user_profile' | 'create_at' | 'updated_at'> {\n  job_tender_id: number;\n  user_profile_id: number;\n}\n\nexport interface JobTenderApplicationsParams {\n  page: number;\n  size: number;\n  job_tender_id?: number;\n  id?: number;\n}\n\nexport interface JobTenderApplicationResponse {\n  items: JobTenderApplication[];\n  message: string;\n  status: string;\n  total: number;\n}\n\nexport interface JobTenderApplicationResponse {\n  data: {\n    jobTender_Applications_Insert: {\n      status: string;\n      message: string;\n      item: JobTenderApplication;\n    };\n    jobTender_Applications: {\n      status: string;\n      message: string;\n      items: JobTenderApplication[];\n      total: number;\n    };\n    jobTender_Applications_Delete: {\n      status: string;\n      message: string;\n    };\n  };\n}\n\nexport interface JobTendersResponse {\n  data: {\n    jobTenders_Overview: {\n      status: string;\n      message: string;\n      items: JobTender[];\n      total: number;\n    };\n    jobTender_Details: {\n      status: string;\n      message: string;\n      items: JobTender[];\n    };\n    jobTenders_Delete: {\n      status: string;\n      message: string;\n    };\n    jobTenders_Insert: {\n      status: string;\n      message: string;\n      item: JobTender[];\n    };\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/judges.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/organizationUnitsTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/profileAbsentsDelete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/profileAbsentsInsertType.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/profileAbsentsTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/systematizationsDeleteTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/systematizationsGetDetailsTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/systematizationsInsertTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/systematizationsTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/useJobPositions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/useJobTendersTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileDeleteEducation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileDeleteEvaluation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileDeleteExperienceTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileDeleteFamilyTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileDeleteResolution.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetEducation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetEvaluations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetExperienceTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetFamilyTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetResolution.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileGetSalaryParams.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertBasicInfo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertEducation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertEvaluation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertExperienceTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertFamilyTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfileInsertSalaryParams.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/graphql/userProfiles.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2050,2053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2050,2053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {DropdownDataNumber} from '../dropdownData';\n\nexport interface UserProfileBasicInfo {\n  id: number;\n  first_name: string;\n  last_name: string;\n  date_of_birth: string;\n  birth_last_name: string;\n  country_of_birth: string;\n  city_of_birth: string;\n  nationality: string;\n  citizenship: string;\n  address: string;\n  father_name: string;\n  mother_name: string;\n  mother_birth_last_name: string;\n  bank_account: string;\n  bank_name: string;\n  official_personal_id: string;\n  official_personal_document_number: string;\n  official_personal_document_issuer: string;\n  gender: string;\n  single_parent: boolean;\n  housing_done: boolean;\n  housing_description: string;\n  revisor_role: boolean;\n  marital_status: string;\n  date_of_taking_oath: string;\n  date_of_becoming_judge: string;\n  email: string;\n  phone: string;\n  organization_unit: DropdownDataNumber;\n  job_position: DropdownDataNumber;\n  contracts: UserContract[];\n}\n\nexport interface UserProfileBasicInfoFormValues {\n  id: number;\n  first_name: string;\n  last_name: string;\n  date_of_birth: string;\n  birth_last_name: string;\n  country_of_birth: string;\n  city_of_birth: string;\n  nationality: string;\n  citizenship: string;\n  address: string;\n  father_name: string;\n  mother_name: string;\n  mother_birth_last_name: string;\n  bank_account: string;\n  bank_name: string;\n  official_personal_id: string;\n  official_personal_document_number: string;\n  official_personal_document_issuer: string;\n  gender: string;\n  single_parent: boolean;\n  housing_done: boolean;\n  revisor_role: boolean;\n  housing_description: string;\n  marital_status: string;\n  date_of_taking_oath: string;\n  date_of_becoming_judge: string;\n  email: string;\n  phone: string;\n  national_minority: string;\n  secondary_email: string;\n  pin: string;\n  password: string;\n  middle_name: string;\n  position_in_organization_unit_id: number;\n  role_id: number;\n  contracts: UserContractItem[];\n}\n\nexport interface UserContract {\n  abbreviation: string;\n  active: boolean;\n  bank_account: string;\n  bank_name: string;\n  contract_type: any[];\n  contract_type_id: number;\n  created_at: string;\n  date_of_eligibility: string;\n  date_of_end: string;\n  date_of_signature: string;\n  date_of_start: string;\n  description: string;\n  file_id: string;\n  gross_salary: string;\n  id: number;\n  net_salary: string;\n  serial_number: string;\n  updated_at: string;\n  user_profile_id: number;\n}\n\nexport interface ContractType {\n  abbreviation: string;\n  color: string;\n  created_at: string;\n  description: string;\n  icon: string;\n  id: number;\n  title: string;\n  updated_at: string;\n}\n\nexport interface UserContractItem {\n  date_of_start: string;\n  date_of_end: string;\n  contract_type_id: number;\n}\n\nexport interface UserProfileBasicResponse {\n  data: {\n    userProfile_Basic: {\n      status?: string;\n      message?: string;\n      item?: UserProfileBasicInfo;\n    };\n  };\n}\n\nexport interface UserProfileParams {\n  page: number;\n  size: number;\n  id?: number;\n  is_active?: boolean;\n  organization_unit_id?: number;\n  job_position_id?: number;\n  name?: string;\n}\n\nexport interface UserProfile {\n  id: number;\n  first_name: string;\n  last_name: string;\n  date_of_birth: string;\n  email: string;\n  phone: string;\n  active: boolean;\n  is_judge: boolean;\n  is_judge_president: boolean;\n  role: DropdownDataNumber;\n  organization_unit: DropdownDataNumber;\n  job_position: DropdownDataNumber;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface UserProfileResponse {\n  items: UserProfile[];\n  message: string;\n  status: string;\n  total: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/micro-service-props.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[54,57],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[54,57],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface MicroserviceProps {\n  [key: string]: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/paginationParams.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/types/screen-props.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[42,45],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[42,45],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ScreenProps {\n  context: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/utils/constants.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":1,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useMemo} from 'react';\n\nexport const employeeRelationshipDropdownData = [\n  {id: 'Ćerka', title: 'Ćerka'},\n  {id: 'Sin', title: 'Sin'},\n  {id: 'Muž', title: 'Muž'},\n  {id: 'Žena', title: 'Žena'},\n];\n\nexport const cityData = [\n  {id: 'Andrijevica', title: 'Andrijevica'},\n  {id: 'Bar', title: 'Bar'},\n  {id: 'Berane', title: 'Berane'},\n  {id: 'Bijelo Polje', title: 'Bijelo Polje'},\n  {id: 'Budva', title: 'Budva'},\n  {id: 'Cetinje', title: 'Cetinje'},\n  {id: 'Danilovgrad', title: 'Danilovgrad'},\n  {id: 'Gusinje', title: 'Gusinje'},\n  {id: 'Herceg Novi', title: 'Herceg Novi'},\n  {id: 'Kolašin', title: 'Kolašin'},\n  {id: 'Kotor', title: 'Kotor'},\n  {id: 'Mojkovac', title: 'Mojkovac'},\n  {id: 'Nikšić', title: 'Nikšić'},\n  {id: 'Petnjica', title: 'Petnjica'},\n  {id: 'Plav', title: 'Plav'},\n  {id: 'Plužine', title: 'Plužine'},\n  {id: 'Pljevlja', title: 'Pljevlja'},\n  {id: 'Podgorica', title: 'Podgorica'},\n  {id: 'Rožaje', title: 'Rožaje'},\n  {id: 'Šavnik', title: 'Šavnik'},\n  {id: 'Tivat', title: 'Tivat'},\n  {id: 'Tuzi', title: 'Tuzi'},\n  {id: 'Ulcinj', title: 'Ulcinj'},\n  {id: 'Zeta', title: 'Zeta'},\n  {id: 'Žabljak', title: 'Žabljak'},\n];\n\nexport const yearsForDropdown = () => {\n  const maxOffset = 10;\n  const thisYear = new Date().getFullYear();\n  const allYears = [];\n  for (let x = 0; x <= maxOffset; x++) {\n    allYears.push(thisYear - x);\n  }\n  return allYears.map(year => ({id: year.toString(), title: year.toString()}));\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/utils/dateUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/utils/getRouteName.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/utils/useDebounce.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[79,82],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[79,82],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useState, useEffect} from 'react';\n\nexport const useDebounce = (value: any, milliSeconds: number) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, milliSeconds);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, milliSeconds]);\n\n  return debouncedValue;\n};\n","usedDeprecatedRules":[]},{"filePath":"/builds/erp/hr-ms-client/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]